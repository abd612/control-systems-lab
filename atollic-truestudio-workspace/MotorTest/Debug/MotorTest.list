
D:\Documents\Workspaces\Atollic Workspace\MotorTest\Debug\MotorTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001328  08001328  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001328  08001328  00011328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800132c  0800132c  0001132c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          0000002c  20000008  20000008  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000200  20000034  20000034  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00004ae2  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000d4b  00000000  00000000  00024b16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006d0  00000000  00000000  00025868  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000638  00000000  00000000  00025f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000224f  00000000  00000000  00026570  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002326  00000000  00000000  000287bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002aae5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001dec  00000000  00000000  0002ab64  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002c950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001310 	.word	0x08001310

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	08001310 	.word	0x08001310

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000964:	2300      	movs	r3, #0
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	2300      	movs	r3, #0
 800096a:	73bb      	strb	r3, [r7, #14]
 800096c:	230f      	movs	r3, #15
 800096e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d039      	beq.n	80009ec <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000978:	4b27      	ldr	r3, [pc, #156]	; (8000a18 <NVIC_Init+0xbc>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	43db      	mvns	r3, r3
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	b2db      	uxtb	r3, r3
 8000982:	f003 0307 	and.w	r3, r3, #7
 8000986:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	f1c3 0304 	rsb	r3, r3, #4
 800098e:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000990:	7b7a      	ldrb	r2, [r7, #13]
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	fa42 f303 	asr.w	r3, r2, r3
 8000998:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	461a      	mov	r2, r3
 80009a0:	7bbb      	ldrb	r3, [r7, #14]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	789a      	ldrb	r2, [r3, #2]
 80009ac:	7b7b      	ldrb	r3, [r7, #13]
 80009ae:	4013      	ands	r3, r2
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
 80009b4:	4313      	orrs	r3, r2
 80009b6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80009be:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <NVIC_Init+0xc0>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	7bfa      	ldrb	r2, [r7, #15]
 80009c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009cc:	4a13      	ldr	r2, [pc, #76]	; (8000a1c <NVIC_Init+0xc0>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	2101      	movs	r1, #1
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009e6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009ea:	e00f      	b.n	8000a0c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009ec:	490b      	ldr	r1, [pc, #44]	; (8000a1c <NVIC_Init+0xc0>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	095b      	lsrs	r3, r3, #5
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	f003 031f 	and.w	r3, r3, #31
 8000a00:	2201      	movs	r2, #1
 8000a02:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a04:	f100 0320 	add.w	r3, r0, #32
 8000a08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	e000e100 	.word	0xe000e100

08000a20 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <EXTI_Init+0xe0>)
 8000a2e:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	799b      	ldrb	r3, [r3, #6]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d04f      	beq.n	8000ad8 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a38:	4931      	ldr	r1, [pc, #196]	; (8000b00 <EXTI_Init+0xe0>)
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <EXTI_Init+0xe0>)
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	43db      	mvns	r3, r3
 8000a44:	4013      	ands	r3, r2
 8000a46:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000a48:	492d      	ldr	r1, [pc, #180]	; (8000b00 <EXTI_Init+0xe0>)
 8000a4a:	4b2d      	ldr	r3, [pc, #180]	; (8000b00 <EXTI_Init+0xe0>)
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	43db      	mvns	r3, r3
 8000a54:	4013      	ands	r3, r2
 8000a56:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	4413      	add	r3, r2
 8000a62:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	6811      	ldr	r1, [r2, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	430a      	orrs	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a72:	4923      	ldr	r1, [pc, #140]	; (8000b00 <EXTI_Init+0xe0>)
 8000a74:	4b22      	ldr	r3, [pc, #136]	; (8000b00 <EXTI_Init+0xe0>)
 8000a76:	689a      	ldr	r2, [r3, #8]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	4013      	ands	r3, r2
 8000a80:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000a82:	491f      	ldr	r1, [pc, #124]	; (8000b00 <EXTI_Init+0xe0>)
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <EXTI_Init+0xe0>)
 8000a86:	68da      	ldr	r2, [r3, #12]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	4013      	ands	r3, r2
 8000a90:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	2b10      	cmp	r3, #16
 8000a98:	d10e      	bne.n	8000ab8 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000a9a:	4919      	ldr	r1, [pc, #100]	; (8000b00 <EXTI_Init+0xe0>)
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <EXTI_Init+0xe0>)
 8000a9e:	689a      	ldr	r2, [r3, #8]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000aa8:	4915      	ldr	r1, [pc, #84]	; (8000b00 <EXTI_Init+0xe0>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <EXTI_Init+0xe0>)
 8000aac:	68da      	ldr	r2, [r3, #12]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000ab6:	e01d      	b.n	8000af4 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <EXTI_Init+0xe0>)
 8000aba:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	4413      	add	r3, r2
 8000ac6:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	6811      	ldr	r1, [r2, #0]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	601a      	str	r2, [r3, #0]
}
 8000ad6:	e00d      	b.n	8000af4 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	791b      	ldrb	r3, [r3, #4]
 8000adc:	461a      	mov	r2, r3
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	6811      	ldr	r1, [r2, #0]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	6812      	ldr	r2, [r2, #0]
 8000aee:	43d2      	mvns	r2, r2
 8000af0:	400a      	ands	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40013c00 	.word	0x40013c00

08000b04 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b085      	sub	sp, #20
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <EXTI_GetITStatus+0x44>)
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <EXTI_GetITStatus+0x44>)
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4013      	ands	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d005      	beq.n	8000b36 <EXTI_GetITStatus+0x32>
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d002      	beq.n	8000b36 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000b30:	2301      	movs	r3, #1
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	e001      	b.n	8000b3a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	40013c00 	.word	0x40013c00

08000b4c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <EXTI_ClearITPendingBit+0x1c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6153      	str	r3, [r2, #20]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40013c00 	.word	0x40013c00

08000b6c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b087      	sub	sp, #28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b82:	2300      	movs	r3, #0
 8000b84:	617b      	str	r3, [r7, #20]
 8000b86:	e076      	b.n	8000c76 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000b88:	2201      	movs	r2, #1
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b90:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d165      	bne.n	8000c70 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2103      	movs	r1, #3
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	401a      	ands	r2, r3
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	791b      	ldrb	r3, [r3, #4]
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bcc:	431a      	orrs	r2, r3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	791b      	ldrb	r3, [r3, #4]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d003      	beq.n	8000be2 <GPIO_Init+0x76>
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	791b      	ldrb	r3, [r3, #4]
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d12e      	bne.n	8000c40 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2103      	movs	r1, #3
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	689a      	ldr	r2, [r3, #8]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	795b      	ldrb	r3, [r3, #5]
 8000c00:	4619      	mov	r1, r3
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	431a      	orrs	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	4619      	mov	r1, r3
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	408b      	lsls	r3, r1
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	401a      	ands	r2, r3
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	683a      	ldr	r2, [r7, #0]
 8000c2c:	7992      	ldrb	r2, [r2, #6]
 8000c2e:	4611      	mov	r1, r2
 8000c30:	697a      	ldr	r2, [r7, #20]
 8000c32:	b292      	uxth	r2, r2
 8000c34:	fa01 f202 	lsl.w	r2, r1, r2
 8000c38:	b292      	uxth	r2, r2
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	79db      	ldrb	r3, [r3, #7]
 8000c60:	4619      	mov	r1, r3
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	3301      	adds	r3, #1
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d985      	bls.n	8000b88 <GPIO_Init+0x1c>
    }
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	371c      	adds	r7, #28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c94:	78fb      	ldrb	r3, [r7, #3]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d006      	beq.n	8000ca8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000c9a:	490a      	ldr	r1, [pc, #40]	; (8000cc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000ca6:	e006      	b.n	8000cb6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd4:	78fb      	ldrb	r3, [r7, #3]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d006      	beq.n	8000ce8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cda:	490a      	ldr	r1, [pc, #40]	; (8000d04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000cde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000ce6:	e006      	b.n	8000cf6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000ce8:	4906      	ldr	r1, [pc, #24]	; (8000d04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <RCC_APB1PeriphClockCmd+0x3c>)
 8000cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000cf6:	bf00      	nop
 8000cf8:	370c      	adds	r7, #12
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40023800 	.word	0x40023800

08000d08 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	460b      	mov	r3, r1
 8000d12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000d14:	78fb      	ldrb	r3, [r7, #3]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d006      	beq.n	8000d28 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000d1a:	490a      	ldr	r1, [pc, #40]	; (8000d44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d1c:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000d26:	e006      	b.n	8000d36 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000d28:	4906      	ldr	r1, [pc, #24]	; (8000d44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <RCC_APB2PeriphClockCmd+0x3c>)
 8000d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4013      	ands	r3, r2
 8000d34:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000d36:	bf00      	nop
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800

08000d48 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000d48:	b490      	push	{r4, r7}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	460a      	mov	r2, r1
 8000d52:	71fb      	strb	r3, [r7, #7]
 8000d54:	4613      	mov	r3, r2
 8000d56:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000d5c:	79bb      	ldrb	r3, [r7, #6]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000d6c:	4916      	ldr	r1, [pc, #88]	; (8000dc8 <SYSCFG_EXTILineConfig+0x80>)
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	4618      	mov	r0, r3
 8000d76:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <SYSCFG_EXTILineConfig+0x80>)
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3302      	adds	r3, #2
 8000d80:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	401a      	ands	r2, r3
 8000d8a:	1c83      	adds	r3, r0, #2
 8000d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <SYSCFG_EXTILineConfig+0x80>)
 8000d92:	79bb      	ldrb	r3, [r7, #6]
 8000d94:	089b      	lsrs	r3, r3, #2
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461c      	mov	r4, r3
 8000d9a:	4a0b      	ldr	r2, [pc, #44]	; (8000dc8 <SYSCFG_EXTILineConfig+0x80>)
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	089b      	lsrs	r3, r3, #2
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	3302      	adds	r3, #2
 8000da4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000da8:	79f9      	ldrb	r1, [r7, #7]
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	431a      	orrs	r2, r3
 8000db8:	1ca3      	adds	r3, r4, #2
 8000dba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bc90      	pop	{r4, r7}
 8000dc6:	4770      	bx	lr
 8000dc8:	40013800 	.word	0x40013800

08000dcc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4a29      	ldr	r2, [pc, #164]	; (8000e88 <TIM_TimeBaseInit+0xbc>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d013      	beq.n	8000e10 <TIM_TimeBaseInit+0x44>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a28      	ldr	r2, [pc, #160]	; (8000e8c <TIM_TimeBaseInit+0xc0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d00f      	beq.n	8000e10 <TIM_TimeBaseInit+0x44>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000df6:	d00b      	beq.n	8000e10 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a25      	ldr	r2, [pc, #148]	; (8000e90 <TIM_TimeBaseInit+0xc4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d007      	beq.n	8000e10 <TIM_TimeBaseInit+0x44>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a24      	ldr	r2, [pc, #144]	; (8000e94 <TIM_TimeBaseInit+0xc8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d003      	beq.n	8000e10 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a23      	ldr	r2, [pc, #140]	; (8000e98 <TIM_TimeBaseInit+0xcc>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d108      	bne.n	8000e22 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e16:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	885a      	ldrh	r2, [r3, #2]
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4a1d      	ldr	r2, [pc, #116]	; (8000e9c <TIM_TimeBaseInit+0xd0>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d00c      	beq.n	8000e44 <TIM_TimeBaseInit+0x78>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a1c      	ldr	r2, [pc, #112]	; (8000ea0 <TIM_TimeBaseInit+0xd4>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d008      	beq.n	8000e44 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000e32:	89fb      	ldrh	r3, [r7, #14]
 8000e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e38:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	891a      	ldrh	r2, [r3, #8]
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	89fa      	ldrh	r2, [r7, #14]
 8000e48:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	881a      	ldrh	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <TIM_TimeBaseInit+0xbc>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d003      	beq.n	8000e6a <TIM_TimeBaseInit+0x9e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a09      	ldr	r2, [pc, #36]	; (8000e8c <TIM_TimeBaseInit+0xc0>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d104      	bne.n	8000e74 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	7a9b      	ldrb	r3, [r3, #10]
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	829a      	strh	r2, [r3, #20]
}
 8000e7a:	bf00      	nop
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40010400 	.word	0x40010400
 8000e90:	40000400 	.word	0x40000400
 8000e94:	40000800 	.word	0x40000800
 8000e98:	40000c00 	.word	0x40000c00
 8000e9c:	40001000 	.word	0x40001000
 8000ea0:	40001400 	.word	0x40001400

08000ea4 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	683a      	ldr	r2, [r7, #0]
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d008      	beq.n	8000efc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000efa:	e007      	b.n	8000f0c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	801a      	strh	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <main>:
//#include "stm32f401_discovery.h"
// to record number of slits
uint8_t slits;
// to calculate speed of motor in rpm
double rpm;
int main(void) {
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
	// initial values
	slits = 0;
 8000f1e:	4b36      	ldr	r3, [pc, #216]	; (8000ff8 <main+0xe0>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	rpm = 0;
 8000f24:	4a35      	ldr	r2, [pc, #212]	; (8000ffc <main+0xe4>)
 8000f26:	f04f 0300 	mov.w	r3, #0
 8000f2a:	f04f 0400 	mov.w	r4, #0
 8000f2e:	e882 0018 	stmia.w	r2, {r3, r4}
	// Enabling CLock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000f32:	2101      	movs	r1, #1
 8000f34:	2008      	movs	r0, #8
 8000f36:	f7ff fea7 	bl	8000c88 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f40:	f7ff fee2 	bl	8000d08 <RCC_APB2PeriphClockCmd>
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000f44:	2101      	movs	r1, #1
 8000f46:	2004      	movs	r0, #4
 8000f48:	f7ff febe 	bl	8000cc8 <RCC_APB1PeriphClockCmd>

	// Configure Pin 0 of Port D to detect rising edges
	GPIO_InitTypeDef gpio;
	gpio.GPIO_Pin = GPIO_Pin_0;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
	gpio.GPIO_Mode = GPIO_Mode_IN;
 8000f50:	2300      	movs	r3, #0
 8000f52:	773b      	strb	r3, [r7, #28]
	gpio.GPIO_OType = GPIO_OType_PP;
 8000f54:	2300      	movs	r3, #0
 8000f56:	77bb      	strb	r3, [r7, #30]
	gpio.GPIO_Speed = GPIO_Speed_2MHz;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	777b      	strb	r3, [r7, #29]
	gpio.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOD, &gpio);
 8000f60:	f107 0318 	add.w	r3, r7, #24
 8000f64:	4619      	mov	r1, r3
 8000f66:	4826      	ldr	r0, [pc, #152]	; (8001000 <main+0xe8>)
 8000f68:	f7ff fe00 	bl	8000b6c <GPIO_Init>

	EXTI_InitTypeDef EXTI_InitStructure;
	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	613b      	str	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000f70:	2300      	movs	r3, #0
 8000f72:	753b      	strb	r3, [r7, #20]
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
 8000f74:	2308      	movs	r3, #8
 8000f76:	757b      	strb	r3, [r7, #21]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	75bb      	strb	r3, [r7, #22]
	EXTI_Init(&EXTI_InitStructure);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fd4d 	bl	8000a20 <EXTI_Init>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOD, EXTI_PinSource0);
 8000f86:	2100      	movs	r1, #0
 8000f88:	2003      	movs	r0, #3
 8000f8a:	f7ff fedd 	bl	8000d48 <SYSCFG_EXTILineConfig>

	gpio.GPIO_Pin = GPIO_Pin_12;
 8000f8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f92:	61bb      	str	r3, [r7, #24]
	gpio.GPIO_Mode = GPIO_Mode_OUT;
 8000f94:	2301      	movs	r3, #1
 8000f96:	773b      	strb	r3, [r7, #28]
	gpio.GPIO_OType = GPIO_OType_PP;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	77bb      	strb	r3, [r7, #30]
	gpio.GPIO_Speed = GPIO_Speed_2MHz;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	777b      	strb	r3, [r7, #29]
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOD, &gpio);
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4815      	ldr	r0, [pc, #84]	; (8001000 <main+0xe8>)
 8000fac:	f7ff fdde 	bl	8000b6c <GPIO_Init>

	/* Enable and set Button EXTI Interrupt to the lowest priority */
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	733b      	strb	r3, [r7, #12]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	737b      	strb	r3, [r7, #13]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73bb      	strb	r3, [r7, #14]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	73fb      	strb	r3, [r7, #15]
	NVIC_Init(&NVIC_InitStructure);
 8000fc0:	f107 030c 	add.w	r3, r7, #12
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fcc9 	bl	800095c <NVIC_Init>

	TIM_TimeBaseInitTypeDef timStruct;
	timStruct.TIM_Period = 0xFFFF;
 8000fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fce:	607b      	str	r3, [r7, #4]
	timStruct.TIM_Prescaler = 0xFFF;
 8000fd0:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000fd4:	803b      	strh	r3, [r7, #0]
	timStruct.TIM_ClockDivision = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	813b      	strh	r3, [r7, #8]
	timStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	807b      	strh	r3, [r7, #2]
	TIM_TimeBaseInit(TIM4, &timStruct);
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4808      	ldr	r0, [pc, #32]	; (8001004 <main+0xec>)
 8000fe4:	f7ff fef2 	bl	8000dcc <TIM_TimeBaseInit>
	GPIOD->ODR = 0x02;
 8000fe8:	4b05      	ldr	r3, [pc, #20]	; (8001000 <main+0xe8>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	615a      	str	r2, [r3, #20]
	TIM_Cmd(TIM4, ENABLE);
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <main+0xec>)
 8000ff2:	f7ff ff71 	bl	8000ed8 <TIM_Cmd>
	while (1) {
 8000ff6:	e7fe      	b.n	8000ff6 <main+0xde>
 8000ff8:	20000030 	.word	0x20000030
 8000ffc:	20000028 	.word	0x20000028
 8001000:	40020c00 	.word	0x40020c00
 8001004:	40000800 	.word	0x40000800

08001008 <EXTI0_IRQHandler>:
///
	}

}

void EXTI0_IRQHandler() {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	af00      	add	r7, sp, #0
	if (EXTI_GetITStatus(EXTI_Line0)) {
 800100c:	2001      	movs	r0, #1
 800100e:	f7ff fd79 	bl	8000b04 <EXTI_GetITStatus>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d03e      	beq.n	8001096 <EXTI0_IRQHandler+0x8e>
		slits++;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <EXTI0_IRQHandler+0x94>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <EXTI0_IRQHandler+0x94>)
 8001022:	701a      	strb	r2, [r3, #0]
		if (slits == 20) {
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <EXTI0_IRQHandler+0x94>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b14      	cmp	r3, #20
 800102a:	d131      	bne.n	8001090 <EXTI0_IRQHandler+0x88>
			rpm = (double) 60/ ((0xFFF+1)* (double) (TIM_GetCounter(TIM4)/ (double) SystemCoreClock));
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <EXTI0_IRQHandler+0x98>)
 800102e:	f7ff ff47 	bl	8000ec0 <TIM_GetCounter>
 8001032:	4603      	mov	r3, r0
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa09 	bl	800044c <__aeabi_ui2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <EXTI0_IRQHandler+0x9c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa02 	bl	800044c <__aeabi_ui2d>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4620      	mov	r0, r4
 800104e:	4629      	mov	r1, r5
 8001050:	f7ff fb9c 	bl	800078c <__aeabi_ddiv>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <EXTI0_IRQHandler+0xa0>)
 8001062:	f7ff fa69 	bl	8000538 <__aeabi_dmul>
 8001066:	4603      	mov	r3, r0
 8001068:	460c      	mov	r4, r1
 800106a:	461a      	mov	r2, r3
 800106c:	4623      	mov	r3, r4
 800106e:	f04f 0000 	mov.w	r0, #0
 8001072:	490e      	ldr	r1, [pc, #56]	; (80010ac <EXTI0_IRQHandler+0xa4>)
 8001074:	f7ff fb8a 	bl	800078c <__aeabi_ddiv>
 8001078:	4603      	mov	r3, r0
 800107a:	460c      	mov	r4, r1
 800107c:	4a0c      	ldr	r2, [pc, #48]	; (80010b0 <EXTI0_IRQHandler+0xa8>)
 800107e:	e882 0018 	stmia.w	r2, {r3, r4}
			slits = 0;
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <EXTI0_IRQHandler+0x94>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
			TIM_SetCounter(TIM4, 0);
 8001088:	2100      	movs	r1, #0
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <EXTI0_IRQHandler+0x98>)
 800108c:	f7ff ff0a 	bl	8000ea4 <TIM_SetCounter>
		}
		EXTI_ClearITPendingBit(EXTI_Line0);
 8001090:	2001      	movs	r0, #1
 8001092:	f7ff fd5b 	bl	8000b4c <EXTI_ClearITPendingBit>
	}
}
 8001096:	bf00      	nop
 8001098:	bdb0      	pop	{r4, r5, r7, pc}
 800109a:	bf00      	nop
 800109c:	20000030 	.word	0x20000030
 80010a0:	40000800 	.word	0x40000800
 80010a4:	20000000 	.word	0x20000000
 80010a8:	40b00000 	.word	0x40b00000
 80010ac:	404e0000 	.word	0x404e0000
 80010b0:	20000028 	.word	0x20000028

080010b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010ba:	e003      	b.n	80010c4 <LoopCopyDataInit>

080010bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010c2:	3104      	adds	r1, #4

080010c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010c4:	480b      	ldr	r0, [pc, #44]	; (80010f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010cc:	d3f6      	bcc.n	80010bc <CopyDataInit>
  ldr  r2, =_sbss
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010d0:	e002      	b.n	80010d8 <LoopFillZerobss>

080010d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010d4:	f842 3b04 	str.w	r3, [r2], #4

080010d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010dc:	d3f9      	bcc.n	80010d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010de:	f000 f841 	bl	8001164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010e2:	f000 f8f1 	bl	80012c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010e6:	f7ff ff17 	bl	8000f18 <main>
  bx  lr    
 80010ea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010ec:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80010f0:	08001330 	.word	0x08001330
  ldr  r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010f8:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80010fc:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 8001100:	20000034 	.word	0x20000034

08001104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC_IRQHandler>

08001106 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001118:	e7fe      	b.n	8001118 <HardFault_Handler+0x4>

0800111a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800111e:	e7fe      	b.n	800111e <MemManage_Handler+0x4>

08001120 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001124:	e7fe      	b.n	8001124 <BusFault_Handler+0x4>

08001126 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800112a:	e7fe      	b.n	800112a <UsageFault_Handler+0x4>

0800112c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr

08001156 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001168:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <SystemInit+0x60>)
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <SystemInit+0x60>)
 800116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001170:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001174:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <SystemInit+0x64>)
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <SystemInit+0x64>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <SystemInit+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800118a:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <SystemInit+0x64>)
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <SystemInit+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800119a:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <SystemInit+0x64>)
 800119c:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <SystemInit+0x68>)
 800119e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <SystemInit+0x64>)
 80011a2:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <SystemInit+0x64>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <SystemInit+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80011b2:	f000 f80d 	bl	80011d0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011b6:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <SystemInit+0x60>)
 80011b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011bc:	609a      	str	r2, [r3, #8]
#endif
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	40023800 	.word	0x40023800
 80011cc:	24003010 	.word	0x24003010

080011d0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011de:	4a36      	ldr	r2, [pc, #216]	; (80012b8 <SetSysClock+0xe8>)
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <SetSysClock+0xe8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80011ea:	4b33      	ldr	r3, [pc, #204]	; (80012b8 <SetSysClock+0xe8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3301      	adds	r3, #1
 80011f8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d103      	bne.n	8001208 <SetSysClock+0x38>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001206:	d1f0      	bne.n	80011ea <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001208:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <SetSysClock+0xe8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d002      	beq.n	800121a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001214:	2301      	movs	r3, #1
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	e001      	b.n	800121e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d142      	bne.n	80012aa <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001224:	4a24      	ldr	r2, [pc, #144]	; (80012b8 <SetSysClock+0xe8>)
 8001226:	4b24      	ldr	r3, [pc, #144]	; (80012b8 <SetSysClock+0xe8>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <SetSysClock+0xec>)
 8001232:	4b22      	ldr	r3, [pc, #136]	; (80012bc <SetSysClock+0xec>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800123a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800123c:	4a1e      	ldr	r2, [pc, #120]	; (80012b8 <SetSysClock+0xe8>)
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <SetSysClock+0xe8>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001244:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <SetSysClock+0xe8>)
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <SetSysClock+0xe8>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800124e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <SetSysClock+0xe8>)
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <SetSysClock+0xe8>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800125a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <SetSysClock+0xe8>)
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <SetSysClock+0xf0>)
 8001260:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001262:	4a15      	ldr	r2, [pc, #84]	; (80012b8 <SetSysClock+0xe8>)
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <SetSysClock+0xe8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800126c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800126e:	bf00      	nop
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <SetSysClock+0xe8>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f9      	beq.n	8001270 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <SetSysClock+0xf4>)
 800127e:	f240 7205 	movw	r2, #1797	; 0x705
 8001282:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001284:	4a0c      	ldr	r2, [pc, #48]	; (80012b8 <SetSysClock+0xe8>)
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <SetSysClock+0xe8>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f023 0303 	bic.w	r3, r3, #3
 800128e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001290:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <SetSysClock+0xe8>)
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <SetSysClock+0xe8>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800129c:	bf00      	nop
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <SetSysClock+0xe8>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d1f9      	bne.n	800129e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000
 80012c0:	07405419 	.word	0x07405419
 80012c4:	40023c00 	.word	0x40023c00

080012c8 <__libc_init_array>:
 80012c8:	b570      	push	{r4, r5, r6, lr}
 80012ca:	4e0d      	ldr	r6, [pc, #52]	; (8001300 <__libc_init_array+0x38>)
 80012cc:	4c0d      	ldr	r4, [pc, #52]	; (8001304 <__libc_init_array+0x3c>)
 80012ce:	1ba4      	subs	r4, r4, r6
 80012d0:	10a4      	asrs	r4, r4, #2
 80012d2:	2500      	movs	r5, #0
 80012d4:	42a5      	cmp	r5, r4
 80012d6:	d109      	bne.n	80012ec <__libc_init_array+0x24>
 80012d8:	4e0b      	ldr	r6, [pc, #44]	; (8001308 <__libc_init_array+0x40>)
 80012da:	4c0c      	ldr	r4, [pc, #48]	; (800130c <__libc_init_array+0x44>)
 80012dc:	f000 f818 	bl	8001310 <_init>
 80012e0:	1ba4      	subs	r4, r4, r6
 80012e2:	10a4      	asrs	r4, r4, #2
 80012e4:	2500      	movs	r5, #0
 80012e6:	42a5      	cmp	r5, r4
 80012e8:	d105      	bne.n	80012f6 <__libc_init_array+0x2e>
 80012ea:	bd70      	pop	{r4, r5, r6, pc}
 80012ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012f0:	4798      	blx	r3
 80012f2:	3501      	adds	r5, #1
 80012f4:	e7ee      	b.n	80012d4 <__libc_init_array+0xc>
 80012f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012fa:	4798      	blx	r3
 80012fc:	3501      	adds	r5, #1
 80012fe:	e7f2      	b.n	80012e6 <__libc_init_array+0x1e>
 8001300:	08001328 	.word	0x08001328
 8001304:	08001328 	.word	0x08001328
 8001308:	08001328 	.word	0x08001328
 800130c:	0800132c 	.word	0x0800132c

08001310 <_init>:
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	bf00      	nop
 8001314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001316:	bc08      	pop	{r3}
 8001318:	469e      	mov	lr, r3
 800131a:	4770      	bx	lr

0800131c <_fini>:
 800131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131e:	bf00      	nop
 8001320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001322:	bc08      	pop	{r3}
 8001324:	469e      	mov	lr, r3
 8001326:	4770      	bx	lr

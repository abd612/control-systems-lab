
C:\Documents\Workspaces\Atollic Workspace\SelfBalancev2\Debug\SelfBalancev2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e70  08002e70  00012e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e88  08002e88  00012e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08002e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002003c  2**0
                  CONTENTS
  7 .bss          00000140  2000003c  2000003c  0002003c  2**2
                  ALLOC
  8 ._user_heap_stack 00000200  2000017c  2000017c  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000abd1  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ac3  00000000  00000000  0002ac3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c60  00000000  00000000  0002c700  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b68  00000000  00000000  0002d360  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000042a6  00000000  00000000  0002dec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000405a  00000000  00000000  0003216e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000361c8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003628  00000000  00000000  00036244  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003986c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000003c 	.word	0x2000003c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002e58 	.word	0x08002e58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000040 	.word	0x20000040
 80001c4:	08002e58 	.word	0x08002e58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2iz>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d215      	bcs.n	8000992 <__aeabi_d2iz+0x36>
 8000966:	d511      	bpl.n	800098c <__aeabi_d2iz+0x30>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d912      	bls.n	8000998 <__aeabi_d2iz+0x3c>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000982:	fa23 f002 	lsr.w	r0, r3, r2
 8000986:	bf18      	it	ne
 8000988:	4240      	negne	r0, r0
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d105      	bne.n	80009a4 <__aeabi_d2iz+0x48>
 8000998:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800099c:	bf08      	it	eq
 800099e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000a60:	68fa      	ldr	r2, [r7, #12]
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <DMA_Init+0xac>)
 8000a64:	4013      	ands	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000a76:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a82:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000a8e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000a9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000aa0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	f023 0307 	bic.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68fa      	ldr	r2, [r7, #12]
 8000ad0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	691a      	ldr	r2, [r3, #16]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60da      	str	r2, [r3, #12]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	f01c803f 	.word	0xf01c803f

08000afc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f043 0201 	orr.w	r2, r3, #1
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b1a:	e005      	b.n	8000b28 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f023 0201 	bic.w	r2, r3, #1
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	601a      	str	r2, [r3, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	73fb      	strb	r3, [r7, #15]
 8000b50:	e001      	b.n	8000b56 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b087      	sub	sp, #28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a15      	ldr	r2, [pc, #84]	; (8000bd0 <DMA_GetFlagStatus+0x6c>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d802      	bhi.n	8000b84 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <DMA_GetFlagStatus+0x70>)
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	e001      	b.n	8000b88 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000b84:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <DMA_GetFlagStatus+0x74>)
 8000b86:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e002      	b.n	8000ba0 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000ba6:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000baa:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	75fb      	strb	r3, [r7, #23]
 8000bba:	e001      	b.n	8000bc0 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	371c      	adds	r7, #28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	4002640f 	.word	0x4002640f
 8000bd4:	40026000 	.word	0x40026000
 8000bd8:	40026400 	.word	0x40026400

08000bdc <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a10      	ldr	r2, [pc, #64]	; (8000c2c <DMA_ClearFlag+0x50>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d802      	bhi.n	8000bf4 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <DMA_ClearFlag+0x54>)
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e001      	b.n	8000bf8 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <DMA_ClearFlag+0x58>)
 8000bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d007      	beq.n	8000c12 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c08:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000c10:	e006      	b.n	8000c20 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c18:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	6093      	str	r3, [r2, #8]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	4002640f 	.word	0x4002640f
 8000c30:	40026000 	.word	0x40026000
 8000c34:	40026400 	.word	0x40026400

08000c38 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c42:	2300      	movs	r3, #0
 8000c44:	617b      	str	r3, [r7, #20]
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c4e:	2300      	movs	r3, #0
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e076      	b.n	8000d42 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c54:	2201      	movs	r2, #1
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c68:	68fa      	ldr	r2, [r7, #12]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d165      	bne.n	8000d3c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2103      	movs	r1, #3
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43db      	mvns	r3, r3
 8000c80:	401a      	ands	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	791b      	ldrb	r3, [r3, #4]
 8000ca2:	2b01      	cmp	r3, #1
 8000ca4:	d003      	beq.n	8000cae <GPIO_Init+0x76>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	791b      	ldrb	r3, [r3, #4]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d12e      	bne.n	8000d0c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2103      	movs	r1, #3
 8000cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	43db      	mvns	r3, r3
 8000cec:	401a      	ands	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	683a      	ldr	r2, [r7, #0]
 8000cf8:	7992      	ldrb	r2, [r2, #6]
 8000cfa:	4611      	mov	r1, r2
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fa01 f202 	lsl.w	r2, r1, r2
 8000d04:	b292      	uxth	r2, r2
 8000d06:	431a      	orrs	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68da      	ldr	r2, [r3, #12]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2103      	movs	r1, #3
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	79db      	ldrb	r3, [r3, #7]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	2b0f      	cmp	r3, #15
 8000d46:	d985      	bls.n	8000c54 <GPIO_Init+0x1c>
    }
  }
}
 8000d48:	bf00      	nop
 8000d4a:	371c      	adds	r7, #28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d6c:	787a      	ldrb	r2, [r7, #1]
 8000d6e:	887b      	ldrh	r3, [r7, #2]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d7c:	887b      	ldrh	r3, [r7, #2]
 8000d7e:	08db      	lsrs	r3, r3, #3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43db      	mvns	r3, r3
 8000da4:	ea02 0103 	and.w	r1, r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f100 0208 	add.w	r2, r0, #8
 8000dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	08db      	lsrs	r3, r3, #3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	461a      	mov	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	3208      	adds	r2, #8
 8000dbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000dc8:	887b      	ldrh	r3, [r7, #2]
 8000dca:	08db      	lsrs	r3, r3, #3
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	68b9      	ldr	r1, [r7, #8]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000dda:	bf00      	nop
 8000ddc:	3714      	adds	r7, #20
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b08a      	sub	sp, #40	; 0x28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000df6:	2300      	movs	r3, #0
 8000df8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000dfe:	4b57      	ldr	r3, [pc, #348]	; (8000f5c <I2C_Init+0x174>)
 8000e00:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	889b      	ldrh	r3, [r3, #4]
 8000e06:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000e08:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e0a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e0e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 f8d9 	bl	8000fcc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	4a4f      	ldr	r2, [pc, #316]	; (8000f60 <I2C_Init+0x178>)
 8000e22:	fba2 2303 	umull	r2, r3, r2, r3
 8000e26:	0c9b      	lsrs	r3, r3, #18
 8000e28:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000e2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e36:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a44      	ldr	r2, [pc, #272]	; (8000f64 <I2C_Init+0x17c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d815      	bhi.n	8000e82 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d801      	bhi.n	8000e6e <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000e6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e72:	4313      	orrs	r3, r2
 8000e74:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000e76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	841a      	strh	r2, [r3, #32]
 8000e80:	e040      	b.n	8000f04 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	88db      	ldrh	r3, [r3, #6]
 8000e86:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d109      	bne.n	8000ea2 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000ea0:	e00e      	b.n	8000ec0 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	4413      	add	r3, r2
 8000eac:	009a      	lsls	r2, r3, #2
 8000eae:	4413      	add	r3, r2
 8000eb0:	69fa      	ldr	r2, [r7, #28]
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000eb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebe:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000ec0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000ed2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ee2:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ee6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <I2C_Init+0x180>)
 8000ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef4:	1192      	asrs	r2, r2, #6
 8000ef6:	17db      	asrs	r3, r3, #31
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3301      	adds	r3, #1
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f08:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000f20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f22:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	889a      	ldrh	r2, [r3, #4]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	895b      	ldrh	r3, [r3, #10]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f42:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	899a      	ldrh	r2, [r3, #12]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	891b      	ldrh	r3, [r3, #8]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	811a      	strh	r2, [r3, #8]
}
 8000f54:	bf00      	nop
 8000f56:	3728      	adds	r7, #40	; 0x28
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	007a1200 	.word	0x007a1200
 8000f60:	431bde83 	.word	0x431bde83
 8000f64:	000186a0 	.word	0x000186a0
 8000f68:	10624dd3 	.word	0x10624dd3

08000f6c <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	8a9b      	ldrh	r3, [r3, #20]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	8b1b      	ldrh	r3, [r3, #24]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000fa6:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	401a      	ands	r2, r3
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d102      	bne.n	8000fba <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	75fb      	strb	r3, [r7, #23]
 8000fb8:	e001      	b.n	8000fbe <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	; 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	2302      	movs	r3, #2
 8000fea:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000fec:	4b47      	ldr	r3, [pc, #284]	; (800110c <RCC_GetClocksFreq+0x140>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	f003 030c 	and.w	r3, r3, #12
 8000ff4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d007      	beq.n	800100c <RCC_GetClocksFreq+0x40>
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d009      	beq.n	8001014 <RCC_GetClocksFreq+0x48>
 8001000:	2b00      	cmp	r3, #0
 8001002:	d13d      	bne.n	8001080 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a42      	ldr	r2, [pc, #264]	; (8001110 <RCC_GetClocksFreq+0x144>)
 8001008:	601a      	str	r2, [r3, #0]
      break;
 800100a:	e03d      	b.n	8001088 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a41      	ldr	r2, [pc, #260]	; (8001114 <RCC_GetClocksFreq+0x148>)
 8001010:	601a      	str	r2, [r3, #0]
      break;
 8001012:	e039      	b.n	8001088 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <RCC_GetClocksFreq+0x140>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	0d9b      	lsrs	r3, r3, #22
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001020:	4b3a      	ldr	r3, [pc, #232]	; (800110c <RCC_GetClocksFreq+0x140>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001028:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d00c      	beq.n	800104a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001030:	4a38      	ldr	r2, [pc, #224]	; (8001114 <RCC_GetClocksFreq+0x148>)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	fbb2 f3f3 	udiv	r3, r2, r3
 8001038:	4a34      	ldr	r2, [pc, #208]	; (800110c <RCC_GetClocksFreq+0x140>)
 800103a:	6852      	ldr	r2, [r2, #4]
 800103c:	0992      	lsrs	r2, r2, #6
 800103e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	e00b      	b.n	8001062 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800104a:	4a31      	ldr	r2, [pc, #196]	; (8001110 <RCC_GetClocksFreq+0x144>)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001052:	4a2e      	ldr	r2, [pc, #184]	; (800110c <RCC_GetClocksFreq+0x140>)
 8001054:	6852      	ldr	r2, [r2, #4]
 8001056:	0992      	lsrs	r2, r2, #6
 8001058:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001062:	4b2a      	ldr	r3, [pc, #168]	; (800110c <RCC_GetClocksFreq+0x140>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	0c1b      	lsrs	r3, r3, #16
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	3301      	adds	r3, #1
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001072:	69fa      	ldr	r2, [r7, #28]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	fbb2 f2f3 	udiv	r2, r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	601a      	str	r2, [r3, #0]
      break;
 800107e:	e003      	b.n	8001088 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	4a23      	ldr	r2, [pc, #140]	; (8001110 <RCC_GetClocksFreq+0x144>)
 8001084:	601a      	str	r2, [r3, #0]
      break;
 8001086:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001088:	4b20      	ldr	r3, [pc, #128]	; (800110c <RCC_GetClocksFreq+0x140>)
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001090:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	091b      	lsrs	r3, r3, #4
 8001096:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <RCC_GetClocksFreq+0x14c>)
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	40da      	lsrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <RCC_GetClocksFreq+0x140>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80010b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	0a9b      	lsrs	r3, r3, #10
 80010be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <RCC_GetClocksFreq+0x14c>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	40da      	lsrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <RCC_GetClocksFreq+0x140>)
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80010e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	0b5b      	lsrs	r3, r3, #13
 80010e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80010e8:	4a0b      	ldr	r2, [pc, #44]	; (8001118 <RCC_GetClocksFreq+0x14c>)
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	4413      	add	r3, r2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	40da      	lsrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
}
 8001100:	bf00      	nop
 8001102:	3724      	adds	r7, #36	; 0x24
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800
 8001110:	00f42400 	.word	0x00f42400
 8001114:	007a1200 	.word	0x007a1200
 8001118:	20000000 	.word	0x20000000

0800111c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001128:	78fb      	ldrb	r3, [r7, #3]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d006      	beq.n	800113c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800112e:	490a      	ldr	r1, [pc, #40]	; (8001158 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4313      	orrs	r3, r2
 8001138:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800113a:	e006      	b.n	800114a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <RCC_AHB1PeriphClockCmd+0x3c>)
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001140:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	43db      	mvns	r3, r3
 8001146:	4013      	ands	r3, r2
 8001148:	630b      	str	r3, [r1, #48]	; 0x30
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001168:	78fb      	ldrb	r3, [r7, #3]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800116e:	490a      	ldr	r1, [pc, #40]	; (8001198 <RCC_APB1PeriphClockCmd+0x3c>)
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <RCC_APB1PeriphClockCmd+0x3c>)
 8001172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4313      	orrs	r3, r2
 8001178:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800117a:	e006      	b.n	800118a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800117c:	4906      	ldr	r1, [pc, #24]	; (8001198 <RCC_APB1PeriphClockCmd+0x3c>)
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <RCC_APB1PeriphClockCmd+0x3c>)
 8001180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	43db      	mvns	r3, r3
 8001186:	4013      	ands	r3, r2
 8001188:	640b      	str	r3, [r1, #64]	; 0x40
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40023800 	.word	0x40023800

0800119c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	819a      	strh	r2, [r3, #12]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b085      	sub	sp, #20
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	891b      	ldrh	r3, [r3, #8]
 80011ce:	b29a      	uxth	r2, r3
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4013      	ands	r3, r2
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 80011da:	2301      	movs	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	e001      	b.n	80011e4 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
	...

080011f4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a29      	ldr	r2, [pc, #164]	; (80012b0 <TIM_TimeBaseInit+0xbc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d013      	beq.n	8001238 <TIM_TimeBaseInit+0x44>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4a28      	ldr	r2, [pc, #160]	; (80012b4 <TIM_TimeBaseInit+0xc0>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d00f      	beq.n	8001238 <TIM_TimeBaseInit+0x44>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800121e:	d00b      	beq.n	8001238 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a25      	ldr	r2, [pc, #148]	; (80012b8 <TIM_TimeBaseInit+0xc4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d007      	beq.n	8001238 <TIM_TimeBaseInit+0x44>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	4a24      	ldr	r2, [pc, #144]	; (80012bc <TIM_TimeBaseInit+0xc8>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d003      	beq.n	8001238 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a23      	ldr	r2, [pc, #140]	; (80012c0 <TIM_TimeBaseInit+0xcc>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d108      	bne.n	800124a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800123e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	885a      	ldrh	r2, [r3, #2]
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	4313      	orrs	r3, r2
 8001248:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <TIM_TimeBaseInit+0xd0>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d00c      	beq.n	800126c <TIM_TimeBaseInit+0x78>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1c      	ldr	r2, [pc, #112]	; (80012c8 <TIM_TimeBaseInit+0xd4>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d008      	beq.n	800126c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001260:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	891a      	ldrh	r2, [r3, #8]
 8001266:	89fb      	ldrh	r3, [r7, #14]
 8001268:	4313      	orrs	r3, r2
 800126a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	89fa      	ldrh	r2, [r7, #14]
 8001270:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	881a      	ldrh	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a0a      	ldr	r2, [pc, #40]	; (80012b0 <TIM_TimeBaseInit+0xbc>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d003      	beq.n	8001292 <TIM_TimeBaseInit+0x9e>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <TIM_TimeBaseInit+0xc0>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d104      	bne.n	800129c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	7a9b      	ldrb	r3, [r3, #10]
 8001296:	b29a      	uxth	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	829a      	strh	r2, [r3, #20]
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40010400 	.word	0x40010400
 80012b8:	40000400 	.word	0x40000400
 80012bc:	40000800 	.word	0x40000800
 80012c0:	40000c00 	.word	0x40000c00
 80012c4:	40001000 	.word	0x40001000
 80012c8:	40001400 	.word	0x40001400

080012cc <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	881b      	ldrh	r3, [r3, #0]
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80012ee:	e007      	b.n	8001300 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	801a      	strh	r2, [r3, #0]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d008      	beq.n	8001330 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	b29a      	uxth	r2, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800132e:	e007      	b.n	8001340 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	b29b      	uxth	r3, r3
 8001336:	f023 0301 	bic.w	r3, r3, #1
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	801a      	strh	r2, [r3, #0]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	817b      	strh	r3, [r7, #10]
 800135a:	2300      	movs	r3, #0
 800135c:	81fb      	strh	r3, [r7, #14]
 800135e:	2300      	movs	r3, #0
 8001360:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	8c1b      	ldrh	r3, [r3, #32]
 8001366:	b29b      	uxth	r3, r3
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	b29a      	uxth	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	8c1b      	ldrh	r3, [r3, #32]
 8001376:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	889b      	ldrh	r3, [r3, #4]
 800137c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	8b1b      	ldrh	r3, [r3, #24]
 8001382:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 8001384:	897b      	ldrh	r3, [r7, #10]
 8001386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800138a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800138c:	897b      	ldrh	r3, [r7, #10]
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	881a      	ldrh	r2, [r3, #0]
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	4313      	orrs	r3, r2
 800139c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800139e:	89fb      	ldrh	r3, [r7, #14]
 80013a0:	f023 0302 	bic.w	r3, r3, #2
 80013a4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	899a      	ldrh	r2, [r3, #12]
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	885a      	ldrh	r2, [r3, #2]
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a1e      	ldr	r2, [pc, #120]	; (8001438 <TIM_OC1Init+0xec>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d003      	beq.n	80013ca <TIM_OC1Init+0x7e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a1d      	ldr	r2, [pc, #116]	; (800143c <TIM_OC1Init+0xf0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d123      	bne.n	8001412 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80013ca:	89fb      	ldrh	r3, [r7, #14]
 80013cc:	f023 0308 	bic.w	r3, r3, #8
 80013d0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	89da      	ldrh	r2, [r3, #14]
 80013d6:	89fb      	ldrh	r3, [r7, #14]
 80013d8:	4313      	orrs	r3, r2
 80013da:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	f023 0304 	bic.w	r3, r3, #4
 80013e2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	889a      	ldrh	r2, [r3, #4]
 80013e8:	89fb      	ldrh	r3, [r7, #14]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 80013ee:	89bb      	ldrh	r3, [r7, #12]
 80013f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013f4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 80013f6:	89bb      	ldrh	r3, [r7, #12]
 80013f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013fc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	8a1a      	ldrh	r2, [r3, #16]
 8001402:	89bb      	ldrh	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	8a5a      	ldrh	r2, [r3, #18]
 800140c:	89bb      	ldrh	r3, [r7, #12]
 800140e:	4313      	orrs	r3, r2
 8001410:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	89ba      	ldrh	r2, [r7, #12]
 8001416:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	897a      	ldrh	r2, [r7, #10]
 800141c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	689a      	ldr	r2, [r3, #8]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	89fa      	ldrh	r2, [r7, #14]
 800142a:	841a      	strh	r2, [r3, #32]
}
 800142c:	bf00      	nop
 800142e:	3714      	adds	r7, #20
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40010000 	.word	0x40010000
 800143c:	40010400 	.word	0x40010400

08001440 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	817b      	strh	r3, [r7, #10]
 800144e:	2300      	movs	r3, #0
 8001450:	81fb      	strh	r3, [r7, #14]
 8001452:	2300      	movs	r3, #0
 8001454:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	8c1b      	ldrh	r3, [r3, #32]
 800145a:	b29b      	uxth	r3, r3
 800145c:	f023 0310 	bic.w	r3, r3, #16
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	8c1b      	ldrh	r3, [r3, #32]
 800146a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	889b      	ldrh	r3, [r3, #4]
 8001470:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	8b1b      	ldrh	r3, [r3, #24]
 8001476:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 8001478:	897b      	ldrh	r3, [r7, #10]
 800147a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800147e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8001480:	897b      	ldrh	r3, [r7, #10]
 8001482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001486:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	021b      	lsls	r3, r3, #8
 800148e:	b29a      	uxth	r2, r3
 8001490:	897b      	ldrh	r3, [r7, #10]
 8001492:	4313      	orrs	r3, r2
 8001494:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	f023 0320 	bic.w	r3, r3, #32
 800149c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	899b      	ldrh	r3, [r3, #12]
 80014a2:	011b      	lsls	r3, r3, #4
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	89fb      	ldrh	r3, [r7, #14]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	885b      	ldrh	r3, [r3, #2]
 80014b0:	011b      	lsls	r3, r3, #4
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	89fb      	ldrh	r3, [r7, #14]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <TIM_OC2Init+0x108>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d003      	beq.n	80014ca <TIM_OC2Init+0x8a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a21      	ldr	r2, [pc, #132]	; (800154c <TIM_OC2Init+0x10c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d12b      	bne.n	8001522 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014d0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	89db      	ldrh	r3, [r3, #14]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	b29a      	uxth	r2, r3
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	4313      	orrs	r3, r2
 80014de:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 80014e0:	89fb      	ldrh	r3, [r7, #14]
 80014e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80014e6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	889b      	ldrh	r3, [r3, #4]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	89fb      	ldrh	r3, [r7, #14]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 80014f6:	89bb      	ldrh	r3, [r7, #12]
 80014f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014fc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 80014fe:	89bb      	ldrh	r3, [r7, #12]
 8001500:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001504:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	8a1b      	ldrh	r3, [r3, #16]
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	b29a      	uxth	r2, r3
 800150e:	89bb      	ldrh	r3, [r7, #12]
 8001510:	4313      	orrs	r3, r2
 8001512:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	8a5b      	ldrh	r3, [r3, #18]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	b29a      	uxth	r2, r3
 800151c:	89bb      	ldrh	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	89ba      	ldrh	r2, [r7, #12]
 8001526:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	897a      	ldrh	r2, [r7, #10]
 800152c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	89fa      	ldrh	r2, [r7, #14]
 800153a:	841a      	strh	r2, [r3, #32]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40010000 	.word	0x40010000
 800154c:	40010400 	.word	0x40010400

08001550 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	817b      	strh	r3, [r7, #10]
 800155e:	2300      	movs	r3, #0
 8001560:	81fb      	strh	r3, [r7, #14]
 8001562:	2300      	movs	r3, #0
 8001564:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	8c1b      	ldrh	r3, [r3, #32]
 800156a:	b29b      	uxth	r3, r3
 800156c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	8c1b      	ldrh	r3, [r3, #32]
 800157a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	889b      	ldrh	r3, [r3, #4]
 8001580:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	8b9b      	ldrh	r3, [r3, #28]
 8001586:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8001588:	897b      	ldrh	r3, [r7, #10]
 800158a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800158e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001590:	897b      	ldrh	r3, [r7, #10]
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	881a      	ldrh	r2, [r3, #0]
 800159c:	897b      	ldrh	r3, [r7, #10]
 800159e:	4313      	orrs	r3, r2
 80015a0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015a8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	899b      	ldrh	r3, [r3, #12]
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	89fb      	ldrh	r3, [r7, #14]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	885b      	ldrh	r3, [r3, #2]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a22      	ldr	r2, [pc, #136]	; (8001654 <TIM_OC3Init+0x104>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d003      	beq.n	80015d6 <TIM_OC3Init+0x86>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <TIM_OC3Init+0x108>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12b      	bne.n	800162e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80015d6:	89fb      	ldrh	r3, [r7, #14]
 80015d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015dc:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	89db      	ldrh	r3, [r3, #14]
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	89fb      	ldrh	r3, [r7, #14]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015f2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	889b      	ldrh	r3, [r3, #4]
 80015f8:	021b      	lsls	r3, r3, #8
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	89fb      	ldrh	r3, [r7, #14]
 80015fe:	4313      	orrs	r3, r2
 8001600:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001602:	89bb      	ldrh	r3, [r7, #12]
 8001604:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001608:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800160a:	89bb      	ldrh	r3, [r7, #12]
 800160c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001610:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	8a1b      	ldrh	r3, [r3, #16]
 8001616:	011b      	lsls	r3, r3, #4
 8001618:	b29a      	uxth	r2, r3
 800161a:	89bb      	ldrh	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	8a5b      	ldrh	r3, [r3, #18]
 8001624:	011b      	lsls	r3, r3, #4
 8001626:	b29a      	uxth	r2, r3
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	89ba      	ldrh	r2, [r7, #12]
 8001632:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	897a      	ldrh	r2, [r7, #10]
 8001638:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	89fa      	ldrh	r2, [r7, #14]
 8001646:	841a      	strh	r2, [r3, #32]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40010000 	.word	0x40010000
 8001658:	40010400 	.word	0x40010400

0800165c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	81bb      	strh	r3, [r7, #12]
 800166a:	2300      	movs	r3, #0
 800166c:	817b      	strh	r3, [r7, #10]
 800166e:	2300      	movs	r3, #0
 8001670:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8c1b      	ldrh	r3, [r3, #32]
 8001676:	b29b      	uxth	r3, r3
 8001678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	8c1b      	ldrh	r3, [r3, #32]
 8001686:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	889b      	ldrh	r3, [r3, #4]
 800168c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	8b9b      	ldrh	r3, [r3, #28]
 8001692:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001694:	89bb      	ldrh	r3, [r7, #12]
 8001696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800169a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800169c:	89bb      	ldrh	r3, [r7, #12]
 800169e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016a2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	881b      	ldrh	r3, [r3, #0]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	89bb      	ldrh	r3, [r7, #12]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80016b2:	897b      	ldrh	r3, [r7, #10]
 80016b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016b8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	899b      	ldrh	r3, [r3, #12]
 80016be:	031b      	lsls	r3, r3, #12
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	897b      	ldrh	r3, [r7, #10]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	885b      	ldrh	r3, [r3, #2]
 80016cc:	031b      	lsls	r3, r3, #12
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	897b      	ldrh	r3, [r7, #10]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a12      	ldr	r2, [pc, #72]	; (8001724 <TIM_OC4Init+0xc8>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d003      	beq.n	80016e6 <TIM_OC4Init+0x8a>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a11      	ldr	r2, [pc, #68]	; (8001728 <TIM_OC4Init+0xcc>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d10a      	bne.n	80016fc <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80016e6:	89fb      	ldrh	r3, [r7, #14]
 80016e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016ec:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	8a1b      	ldrh	r3, [r3, #16]
 80016f2:	019b      	lsls	r3, r3, #6
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	89fb      	ldrh	r3, [r7, #14]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	89fa      	ldrh	r2, [r7, #14]
 8001700:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	89ba      	ldrh	r2, [r7, #12]
 8001706:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	897a      	ldrh	r2, [r7, #10]
 8001714:	841a      	strh	r2, [r3, #32]
}
 8001716:	bf00      	nop
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40010000 	.word	0x40010000
 8001728:	40010400 	.word	0x40010400

0800172c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	460b      	mov	r3, r1
 8001736:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8b1b      	ldrh	r3, [r3, #24]
 8001740:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8001742:	89fb      	ldrh	r3, [r7, #14]
 8001744:	f023 0308 	bic.w	r3, r3, #8
 8001748:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800174a:	89fa      	ldrh	r2, [r7, #14]
 800174c:	887b      	ldrh	r3, [r7, #2]
 800174e:	4313      	orrs	r3, r2
 8001750:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	89fa      	ldrh	r2, [r7, #14]
 8001756:	831a      	strh	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8b1b      	ldrh	r3, [r3, #24]
 8001778:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800177a:	89fb      	ldrh	r3, [r7, #14]
 800177c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001780:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8001782:	887b      	ldrh	r3, [r7, #2]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b29a      	uxth	r2, r3
 8001788:	89fb      	ldrh	r3, [r7, #14]
 800178a:	4313      	orrs	r3, r2
 800178c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	89fa      	ldrh	r2, [r7, #14]
 8001792:	831a      	strh	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80017ac:	2300      	movs	r3, #0
 80017ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	8b9b      	ldrh	r3, [r3, #28]
 80017b4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	f023 0308 	bic.w	r3, r3, #8
 80017bc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80017be:	89fa      	ldrh	r2, [r7, #14]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	89fa      	ldrh	r2, [r7, #14]
 80017ca:	839a      	strh	r2, [r3, #28]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8b9b      	ldrh	r3, [r3, #28]
 80017ec:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80017ee:	89fb      	ldrh	r3, [r7, #14]
 80017f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017f4:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	89fb      	ldrh	r3, [r7, #14]
 80017fe:	4313      	orrs	r3, r2
 8001800:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	89fa      	ldrh	r2, [r7, #14]
 8001806:	839a      	strh	r2, [r3, #28]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4a10      	ldr	r2, [pc, #64]	; (8001864 <STM_EVAL_LEDInit+0x50>)
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001826:	2101      	movs	r1, #1
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc77 	bl	800111c <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <STM_EVAL_LEDInit+0x54>)
 8001832:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001836:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001838:	2301      	movs	r3, #1
 800183a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800183c:	2300      	movs	r3, #0
 800183e:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001844:	2302      	movs	r3, #2
 8001846:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	4a08      	ldr	r2, [pc, #32]	; (800186c <STM_EVAL_LEDInit+0x58>)
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff f9ee 	bl	8000c38 <GPIO_Init>
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	08002e78 	.word	0x08002e78
 8001868:	08002e70 	.word	0x08002e70
 800186c:	20000010 	.word	0x20000010

08001870 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <STM_EVAL_LEDToggle+0x34>)
 800187e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	4907      	ldr	r1, [pc, #28]	; (80018a4 <STM_EVAL_LEDToggle+0x34>)
 8001886:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800188a:	6952      	ldr	r2, [r2, #20]
 800188c:	79f9      	ldrb	r1, [r7, #7]
 800188e:	4806      	ldr	r0, [pc, #24]	; (80018a8 <STM_EVAL_LEDToggle+0x38>)
 8001890:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 8001894:	404a      	eors	r2, r1
 8001896:	615a      	str	r2, [r3, #20]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	20000010 	.word	0x20000010
 80018a8:	08002e70 	.word	0x08002e70

080018ac <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80018b0:	4b38      	ldr	r3, [pc, #224]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b38      	ldr	r3, [pc, #224]	; (8001998 <Audio_MAL_IRQHandler+0xec>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4619      	mov	r1, r3
 80018ba:	4610      	mov	r0, r2
 80018bc:	f7ff f952 	bl	8000b64 <DMA_GetFlagStatus>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d064      	beq.n	8001990 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d04c      	beq.n	8001968 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80018ce:	bf00      	nop
 80018d0:	4b30      	ldr	r3, [pc, #192]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f92d 	bl	8000b34 <DMA_GetCmdStatus>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f7      	bne.n	80018d0 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80018e0:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <Audio_MAL_IRQHandler+0xec>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	f7ff f976 	bl	8000bdc <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <Audio_MAL_IRQHandler+0xf4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <Audio_MAL_IRQHandler+0xf8>)
 80018f8:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 80018fa:	4b28      	ldr	r3, [pc, #160]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001902:	4293      	cmp	r3, r2
 8001904:	bf28      	it	cs
 8001906:	4613      	movcs	r3, r2
 8001908:	4a26      	ldr	r2, [pc, #152]	; (80019a4 <Audio_MAL_IRQHandler+0xf8>)
 800190a:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 800190c:	4b21      	ldr	r3, [pc, #132]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4924      	ldr	r1, [pc, #144]	; (80019a4 <Audio_MAL_IRQHandler+0xf8>)
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f89a 	bl	8000a4c <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f8ec 	bl	8000afc <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <Audio_MAL_IRQHandler+0xf4>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b1c      	ldr	r3, [pc, #112]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d203      	bcs.n	800193a <Audio_MAL_IRQHandler+0x8e>
 8001932:	4b1a      	ldr	r3, [pc, #104]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	e000      	b.n	800193c <Audio_MAL_IRQHandler+0x90>
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <Audio_MAL_IRQHandler+0xfc>)
 800193c:	4413      	add	r3, r2
 800193e:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <Audio_MAL_IRQHandler+0xf4>)
 8001940:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001942:	4b16      	ldr	r3, [pc, #88]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	4b15      	ldr	r3, [pc, #84]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800194e:	428b      	cmp	r3, r1
 8001950:	bf28      	it	cs
 8001952:	460b      	movcs	r3, r1
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	4a11      	ldr	r2, [pc, #68]	; (800199c <Audio_MAL_IRQHandler+0xf0>)
 8001958:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	2101      	movs	r1, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f8cb 	bl	8000afc <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8001966:	e013      	b.n	8001990 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2100      	movs	r1, #0
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f8c4 	bl	8000afc <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <Audio_MAL_IRQHandler+0xe8>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <Audio_MAL_IRQHandler+0xec>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4619      	mov	r1, r3
 800197e:	4610      	mov	r0, r2
 8001980:	f7ff f92c 	bl	8000bdc <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <Audio_MAL_IRQHandler+0xf4>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f000 faec 	bl	8001f68 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000024 	.word	0x20000024
 8001998:	20000028 	.word	0x20000028
 800199c:	20000020 	.word	0x20000020
 80019a0:	20000098 	.word	0x20000098
 80019a4:	200000d8 	.word	0x200000d8
 80019a8:	0001fffe 	.word	0x0001fffe

080019ac <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80019b0:	f7ff ff7c 	bl	80018ac <Audio_MAL_IRQHandler>
}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80019bc:	2102      	movs	r1, #2
 80019be:	4807      	ldr	r0, [pc, #28]	; (80019dc <SPI3_IRQHandler+0x24>)
 80019c0:	f7ff fbfb 	bl	80011ba <SPI_I2S_GetFlagStatus>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d006      	beq.n	80019d8 <SPI3_IRQHandler+0x20>
  { 
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80019ca:	f000 fad8 	bl	8001f7e <EVAL_AUDIO_GetSampleCallBack>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4802      	ldr	r0, [pc, #8]	; (80019dc <SPI3_IRQHandler+0x24>)
 80019d4:	f7ff fbe2 	bl	800119c <SPI_I2S_SendData>
  }
}
 80019d8:	bf00      	nop
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40003c00 	.word	0x40003c00

080019e0 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <Delayms+0x50>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019ee:	f3ef 8305 	mrs	r3, IPSR
 80019f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80019f4:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d111      	bne.n	8001a1e <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 80019fa:	bf00      	nop
 80019fc:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <Delayms+0x50>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d3f8      	bcc.n	80019fc <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8001a0a:	e00b      	b.n	8001a24 <Delayms+0x44>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8001a0c:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <Delayms+0x54>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <Delayms+0x3e>
				millis--;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	607b      	str	r3, [r7, #4]
		while (millis) {
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1f3      	bne.n	8001a0c <Delayms+0x2c>
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000058 	.word	0x20000058
 8001a34:	e000e010 	.word	0xe000e010

08001a38 <main>:
double abs_val(double value);

int16_t AX, AY, AZ;
int16_t GX, GY, GZ;

int main(void) {
 8001a38:	b5b0      	push	{r4, r5, r7, lr}
 8001a3a:	b08c      	sub	sp, #48	; 0x30
 8001a3c:	af00      	add	r7, sp, #0

	double PDout = 0;
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	f04f 0400 	mov.w	r4, #0
 8001a46:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	duty = 0;
 8001a4a:	4b97      	ldr	r3, [pc, #604]	; (8001ca8 <main+0x270>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
	ref = 4;
 8001a50:	4b96      	ldr	r3, [pc, #600]	; (8001cac <main+0x274>)
 8001a52:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001a56:	601a      	str	r2, [r3, #0]
	flag = 0;
 8001a58:	4b95      	ldr	r3, [pc, #596]	; (8001cb0 <main+0x278>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
	error = 0, pError = 0;
 8001a5e:	4b95      	ldr	r3, [pc, #596]	; (8001cb4 <main+0x27c>)
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	4b94      	ldr	r3, [pc, #592]	; (8001cb8 <main+0x280>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
	Acc = 0;
 8001a6e:	4b93      	ldr	r3, [pc, #588]	; (8001cbc <main+0x284>)
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
	Gyro = 0;
 8001a76:	4b92      	ldr	r3, [pc, #584]	; (8001cc0 <main+0x288>)
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
	pro = 0;
 8001a7e:	4b91      	ldr	r3, [pc, #580]	; (8001cc4 <main+0x28c>)
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
	diff = 0;
 8001a86:	4b90      	ldr	r3, [pc, #576]	; (8001cc8 <main+0x290>)
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
	integ = 0;
 8001a8e:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <main+0x294>)
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
	Angle = 0;
 8001a96:	4b8e      	ldr	r3, [pc, #568]	; (8001cd0 <main+0x298>)
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
	Kp = 4;
 8001a9e:	4b8d      	ldr	r3, [pc, #564]	; (8001cd4 <main+0x29c>)
 8001aa0:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001aa4:	601a      	str	r2, [r3, #0]
	Kd = 160;
 8001aa6:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <main+0x2a0>)
 8001aa8:	4a8c      	ldr	r2, [pc, #560]	; (8001cdc <main+0x2a4>)
 8001aaa:	601a      	str	r2, [r3, #0]
	Ki = 0;
 8001aac:	4b8c      	ldr	r3, [pc, #560]	; (8001ce0 <main+0x2a8>)
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4 | RCC_APB1Periph_TIM3, ENABLE);
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	2006      	movs	r0, #6
 8001ab8:	f7ff fb50 	bl	800115c <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001abc:	2101      	movs	r1, #1
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f7ff fb2c 	bl	800111c <RCC_AHB1PeriphClockCmd>

	TM_DELAY_Init();
 8001ac4:	f000 fc2a 	bl	800231c <TM_DELAY_Init>
	STM_EVAL_LEDInit(LED3);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fea3 	bl	8001814 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED4);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff fea0 	bl	8001814 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED5);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	f7ff fe9d 	bl	8001814 <STM_EVAL_LEDInit>
	STM_EVAL_LEDInit(LED6);
 8001ada:	2003      	movs	r0, #3
 8001adc:	f7ff fe9a 	bl	8001814 <STM_EVAL_LEDInit>

	TM_MPU6050_Init_Custom(&data, TM_MPU6050_Device_0,
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	487f      	ldr	r0, [pc, #508]	; (8001ce4 <main+0x2ac>)
 8001ae8:	f001 f8d4 	bl	8002c94 <TM_MPU6050_Init_Custom>
			TM_MPU6050_Accelerometer_2G, TM_MPU6050_Gyroscope_250s);
	BK_MPU6050_Activate_DLPF_Custom(&data, BK_MPU6050_BW_Acc_21_Gyro_20);
 8001aec:	2104      	movs	r1, #4
 8001aee:	487d      	ldr	r0, [pc, #500]	; (8001ce4 <main+0x2ac>)
 8001af0:	f001 f8bc 	bl	8002c6c <BK_MPU6050_Activate_DLPF_Custom>

	GPIO_InitTypeDef gpio;
	gpio.GPIO_Pin = (GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9);
 8001af4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001af8:	623b      	str	r3, [r7, #32]
	gpio.GPIO_Mode = GPIO_Mode_AF;
 8001afa:	2302      	movs	r3, #2
 8001afc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	gpio.GPIO_OType = GPIO_OType_PP;
 8001b00:	2300      	movs	r3, #0
 8001b02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	gpio.GPIO_Speed = GPIO_Speed_2MHz;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	gpio.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	GPIO_Init(GPIOB, &gpio);
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	4619      	mov	r1, r3
 8001b18:	4873      	ldr	r0, [pc, #460]	; (8001ce8 <main+0x2b0>)
 8001b1a:	f7ff f88d 	bl	8000c38 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_TIM4);
 8001b1e:	2202      	movs	r2, #2
 8001b20:	2106      	movs	r1, #6
 8001b22:	4871      	ldr	r0, [pc, #452]	; (8001ce8 <main+0x2b0>)
 8001b24:	f7ff f916 	bl	8000d54 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_TIM4);
 8001b28:	2202      	movs	r2, #2
 8001b2a:	2107      	movs	r1, #7
 8001b2c:	486e      	ldr	r0, [pc, #440]	; (8001ce8 <main+0x2b0>)
 8001b2e:	f7ff f911 	bl	8000d54 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource8, GPIO_AF_TIM4);
 8001b32:	2202      	movs	r2, #2
 8001b34:	2108      	movs	r1, #8
 8001b36:	486c      	ldr	r0, [pc, #432]	; (8001ce8 <main+0x2b0>)
 8001b38:	f7ff f90c 	bl	8000d54 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_TIM4);
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	2109      	movs	r1, #9
 8001b40:	4869      	ldr	r0, [pc, #420]	; (8001ce8 <main+0x2b0>)
 8001b42:	f7ff f907 	bl	8000d54 <GPIO_PinAFConfig>

	TIM_TimeBaseInitTypeDef timStruct;
	timStruct.TIM_Period = 8399;
 8001b46:	f242 03cf 	movw	r3, #8399	; 0x20cf
 8001b4a:	61bb      	str	r3, [r7, #24]
	timStruct.TIM_Prescaler = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	82bb      	strh	r3, [r7, #20]
	timStruct.TIM_ClockDivision = 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	83bb      	strh	r3, [r7, #28]
	timStruct.TIM_CounterMode = TIM_CounterMode_Up;
 8001b54:	2300      	movs	r3, #0
 8001b56:	82fb      	strh	r3, [r7, #22]
	TIM_TimeBaseInit(TIM4, &timStruct);
 8001b58:	f107 0314 	add.w	r3, r7, #20
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4863      	ldr	r0, [pc, #396]	; (8001cec <main+0x2b4>)
 8001b60:	f7ff fb48 	bl	80011f4 <TIM_TimeBaseInit>

	TIM_OCInitTypeDef oc;
	oc.TIM_OCMode = TIM_OCMode_PWM1;
 8001b64:	2360      	movs	r3, #96	; 0x60
 8001b66:	803b      	strh	r3, [r7, #0]
	oc.TIM_OCPolarity = TIM_OCPolarity_High;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	81bb      	strh	r3, [r7, #12]
	oc.TIM_OutputState = TIM_OutputState_Enable;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	807b      	strh	r3, [r7, #2]
	oc.TIM_Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]

	TIM_OC1Init(TIM4, &oc);
 8001b74:	463b      	mov	r3, r7
 8001b76:	4619      	mov	r1, r3
 8001b78:	485c      	ldr	r0, [pc, #368]	; (8001cec <main+0x2b4>)
 8001b7a:	f7ff fbe7 	bl	800134c <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001b7e:	2108      	movs	r1, #8
 8001b80:	485a      	ldr	r0, [pc, #360]	; (8001cec <main+0x2b4>)
 8001b82:	f7ff fdd3 	bl	800172c <TIM_OC1PreloadConfig>

	TIM_OC2Init(TIM4, &oc);
 8001b86:	463b      	mov	r3, r7
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4858      	ldr	r0, [pc, #352]	; (8001cec <main+0x2b4>)
 8001b8c:	f7ff fc58 	bl	8001440 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001b90:	2108      	movs	r1, #8
 8001b92:	4856      	ldr	r0, [pc, #344]	; (8001cec <main+0x2b4>)
 8001b94:	f7ff fde6 	bl	8001764 <TIM_OC2PreloadConfig>

	TIM_OC3Init(TIM4, &oc);
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4853      	ldr	r0, [pc, #332]	; (8001cec <main+0x2b4>)
 8001b9e:	f7ff fcd7 	bl	8001550 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4851      	ldr	r0, [pc, #324]	; (8001cec <main+0x2b4>)
 8001ba6:	f7ff fdfb 	bl	80017a0 <TIM_OC3PreloadConfig>

	TIM_OC4Init(TIM4, &oc);
 8001baa:	463b      	mov	r3, r7
 8001bac:	4619      	mov	r1, r3
 8001bae:	484f      	ldr	r0, [pc, #316]	; (8001cec <main+0x2b4>)
 8001bb0:	f7ff fd54 	bl	800165c <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001bb4:	2108      	movs	r1, #8
 8001bb6:	484d      	ldr	r0, [pc, #308]	; (8001cec <main+0x2b4>)
 8001bb8:	f7ff fe0e 	bl	80017d8 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	484b      	ldr	r0, [pc, #300]	; (8001cec <main+0x2b4>)
 8001bc0:	f7ff fb84 	bl	80012cc <TIM_ARRPreloadConfig>
	TIM_Cmd(TIM4, ENABLE);
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4849      	ldr	r0, [pc, #292]	; (8001cec <main+0x2b4>)
 8001bc8:	f7ff fba0 	bl	800130c <TIM_Cmd>

	while (1) {
		Delayms(1);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f7ff ff07 	bl	80019e0 <Delayms>
		STM_EVAL_LEDToggle(LED5);
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f7ff fe4c 	bl	8001870 <STM_EVAL_LEDToggle>
		TM_MPU6050_ReadAll_Custom(&data);
 8001bd8:	4842      	ldr	r0, [pc, #264]	; (8001ce4 <main+0x2ac>)
 8001bda:	f001 f815 	bl	8002c08 <TM_MPU6050_ReadAll_Custom>

		AX = data.Accelerometer_X;
 8001bde:	4b41      	ldr	r3, [pc, #260]	; (8001ce4 <main+0x2ac>)
 8001be0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001be4:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <main+0x2b8>)
 8001be6:	801a      	strh	r2, [r3, #0]
		AY = data.Accelerometer_Y;
 8001be8:	4b3e      	ldr	r3, [pc, #248]	; (8001ce4 <main+0x2ac>)
 8001bea:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001bee:	4b41      	ldr	r3, [pc, #260]	; (8001cf4 <main+0x2bc>)
 8001bf0:	801a      	strh	r2, [r3, #0]
		AZ = data.Accelerometer_Z;
 8001bf2:	4b3c      	ldr	r3, [pc, #240]	; (8001ce4 <main+0x2ac>)
 8001bf4:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001bf8:	4b3f      	ldr	r3, [pc, #252]	; (8001cf8 <main+0x2c0>)
 8001bfa:	801a      	strh	r2, [r3, #0]
		GX = data.Gyroscope_X;
 8001bfc:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <main+0x2ac>)
 8001bfe:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001c02:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <main+0x2c4>)
 8001c04:	801a      	strh	r2, [r3, #0]
		GY = data.Gyroscope_Y;
 8001c06:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <main+0x2ac>)
 8001c08:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001c0c:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <main+0x2c8>)
 8001c0e:	801a      	strh	r2, [r3, #0]
		GZ = data.Gyroscope_Z;
 8001c10:	4b34      	ldr	r3, [pc, #208]	; (8001ce4 <main+0x2ac>)
 8001c12:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001c16:	4b3b      	ldr	r3, [pc, #236]	; (8001d04 <main+0x2cc>)
 8001c18:	801a      	strh	r2, [r3, #0]

		Acc = -57.296 * (data.Accelerometer_X + 420) * data.Acce_Mult;
 8001c1a:	4b32      	ldr	r3, [pc, #200]	; (8001ce4 <main+0x2ac>)
 8001c1c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c20:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc21 	bl	800046c <__aeabi_i2d>
 8001c2a:	a31d      	add	r3, pc, #116	; (adr r3, 8001ca0 <main+0x268>)
 8001c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c30:	f7fe fc82 	bl	8000538 <__aeabi_dmul>
 8001c34:	4603      	mov	r3, r0
 8001c36:	460c      	mov	r4, r1
 8001c38:	4625      	mov	r5, r4
 8001c3a:	461c      	mov	r4, r3
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <main+0x2ac>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc25 	bl	8000490 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	4629      	mov	r1, r5
 8001c4e:	f7fe fc73 	bl	8000538 <__aeabi_dmul>
 8001c52:	4603      	mov	r3, r0
 8001c54:	460c      	mov	r4, r1
 8001c56:	4618      	mov	r0, r3
 8001c58:	4621      	mov	r1, r4
 8001c5a:	f7fe fea7 	bl	80009ac <__aeabi_d2f>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <main+0x284>)
 8001c62:	601a      	str	r2, [r3, #0]
		Gyro = (data.Gyroscope_Y + 13) * data.Gyro_Mult;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <main+0x2ac>)
 8001c66:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001c6a:	330d      	adds	r3, #13
 8001c6c:	ee07 3a90 	vmov	s15, r3
 8001c70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <main+0x2ac>)
 8001c76:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <main+0x288>)
 8001c80:	edc3 7a00 	vstr	s15, [r3]
		if (!flag) {
 8001c84:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <main+0x278>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d13d      	bne.n	8001d08 <main+0x2d0>
			Angle = Acc;
 8001c8c:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <main+0x284>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a0f      	ldr	r2, [pc, #60]	; (8001cd0 <main+0x298>)
 8001c92:	6013      	str	r3, [r2, #0]
			flag = 1;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <main+0x278>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
 8001c9a:	e072      	b.n	8001d82 <main+0x34a>
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	53f7ced9 	.word	0x53f7ced9
 8001ca4:	c04ca5e3 	.word	0xc04ca5e3
 8001ca8:	2000016c 	.word	0x2000016c
 8001cac:	20000128 	.word	0x20000128
 8001cb0:	20000122 	.word	0x20000122
 8001cb4:	20000158 	.word	0x20000158
 8001cb8:	2000012c 	.word	0x2000012c
 8001cbc:	20000160 	.word	0x20000160
 8001cc0:	20000170 	.word	0x20000170
 8001cc4:	20000134 	.word	0x20000134
 8001cc8:	2000015c 	.word	0x2000015c
 8001ccc:	20000118 	.word	0x20000118
 8001cd0:	20000114 	.word	0x20000114
 8001cd4:	20000168 	.word	0x20000168
 8001cd8:	20000154 	.word	0x20000154
 8001cdc:	43200000 	.word	0x43200000
 8001ce0:	2000011c 	.word	0x2000011c
 8001ce4:	20000138 	.word	0x20000138
 8001ce8:	40020400 	.word	0x40020400
 8001cec:	40000800 	.word	0x40000800
 8001cf0:	20000174 	.word	0x20000174
 8001cf4:	20000124 	.word	0x20000124
 8001cf8:	20000150 	.word	0x20000150
 8001cfc:	20000164 	.word	0x20000164
 8001d00:	20000120 	.word	0x20000120
 8001d04:	20000130 	.word	0x20000130
		} else
			Angle = 0.9987 * (Angle + Gyro * 0.001) + 0.0013 * Acc;
 8001d08:	4b65      	ldr	r3, [pc, #404]	; (8001ea0 <main+0x468>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7fe fbbf 	bl	8000490 <__aeabi_f2d>
 8001d12:	4604      	mov	r4, r0
 8001d14:	460d      	mov	r5, r1
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <main+0x46c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fbb8 	bl	8000490 <__aeabi_f2d>
 8001d20:	a357      	add	r3, pc, #348	; (adr r3, 8001e80 <main+0x448>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fc07 	bl	8000538 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fa4f 	bl	80001d4 <__adddf3>
 8001d36:	4603      	mov	r3, r0
 8001d38:	460c      	mov	r4, r1
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4621      	mov	r1, r4
 8001d3e:	a352      	add	r3, pc, #328	; (adr r3, 8001e88 <main+0x450>)
 8001d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d44:	f7fe fbf8 	bl	8000538 <__aeabi_dmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	460c      	mov	r4, r1
 8001d4c:	4625      	mov	r5, r4
 8001d4e:	461c      	mov	r4, r3
 8001d50:	4b55      	ldr	r3, [pc, #340]	; (8001ea8 <main+0x470>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fb9b 	bl	8000490 <__aeabi_f2d>
 8001d5a:	a34d      	add	r3, pc, #308	; (adr r3, 8001e90 <main+0x458>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fbea 	bl	8000538 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4620      	mov	r0, r4
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	f7fe fa32 	bl	80001d4 <__adddf3>
 8001d70:	4603      	mov	r3, r0
 8001d72:	460c      	mov	r4, r1
 8001d74:	4618      	mov	r0, r3
 8001d76:	4621      	mov	r1, r4
 8001d78:	f7fe fe18 	bl	80009ac <__aeabi_d2f>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b48      	ldr	r3, [pc, #288]	; (8001ea0 <main+0x468>)
 8001d80:	601a      	str	r2, [r3, #0]

		error = ref - Angle;
 8001d82:	4b4a      	ldr	r3, [pc, #296]	; (8001eac <main+0x474>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	4b45      	ldr	r3, [pc, #276]	; (8001ea0 <main+0x468>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d92:	4b47      	ldr	r3, [pc, #284]	; (8001eb0 <main+0x478>)
 8001d94:	edc3 7a00 	vstr	s15, [r3]
		pro = Kp * error;
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <main+0x47c>)
 8001d9a:	ed93 7a00 	vldr	s14, [r3]
 8001d9e:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <main+0x478>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da8:	4b43      	ldr	r3, [pc, #268]	; (8001eb8 <main+0x480>)
 8001daa:	edc3 7a00 	vstr	s15, [r3]
		diff = Kd * (error - pError);
 8001dae:	4b40      	ldr	r3, [pc, #256]	; (8001eb0 <main+0x478>)
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <main+0x484>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dbe:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <main+0x488>)
 8001dc0:	edd3 7a00 	vldr	s15, [r3]
 8001dc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <main+0x48c>)
 8001dca:	edc3 7a00 	vstr	s15, [r3]
		integ += Ki * error;
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <main+0x490>)
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <main+0x478>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dde:	4b3b      	ldr	r3, [pc, #236]	; (8001ecc <main+0x494>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de8:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <main+0x494>)
 8001dea:	edc3 7a00 	vstr	s15, [r3]
		PDout = pro + diff + integ;
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <main+0x480>)
 8001df0:	ed93 7a00 	vldr	s14, [r3]
 8001df4:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <main+0x48c>)
 8001df6:	edd3 7a00 	vldr	s15, [r3]
 8001dfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <main+0x494>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f7fe fb40 	bl	8000490 <__aeabi_f2d>
 8001e10:	4603      	mov	r3, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		pError = error;
 8001e18:	4b25      	ldr	r3, [pc, #148]	; (8001eb0 <main+0x478>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a27      	ldr	r2, [pc, #156]	; (8001ebc <main+0x484>)
 8001e1e:	6013      	str	r3, [r2, #0]
		duty = (int) (215.359 * PDout);	// 8399/39
 8001e20:	a31d      	add	r3, pc, #116	; (adr r3, 8001e98 <main+0x460>)
 8001e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e26:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e2a:	f7fe fb85 	bl	8000538 <__aeabi_dmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4618      	mov	r0, r3
 8001e34:	4621      	mov	r1, r4
 8001e36:	f7fe fd91 	bl	800095c <__aeabi_d2iz>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <main+0x498>)
 8001e3e:	601a      	str	r2, [r3, #0]
		if (duty == 0)
 8001e40:	4b23      	ldr	r3, [pc, #140]	; (8001ed0 <main+0x498>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d102      	bne.n	8001e4e <main+0x416>
			stop();
 8001e48:	f000 f878 	bl	8001f3c <stop>
 8001e4c:	e6be      	b.n	8001bcc <main+0x194>
		else if (duty > 0)
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <main+0x498>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	dd09      	ble.n	8001e6a <main+0x432>
			reverse(duty+1000);//*0.5);// - 2000); //+ 1000);
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <main+0x498>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 f850 	bl	8001f08 <reverse>
 8001e68:	e6b0      	b.n	8001bcc <main+0x194>
		else
			forward(-duty+1000 );
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <main+0x498>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f82c 	bl	8001ed4 <forward>
		Delayms(1);
 8001e7c:	e6a6      	b.n	8001bcc <main+0x194>
 8001e7e:	bf00      	nop
 8001e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001e84:	3f50624d 	.word	0x3f50624d
 8001e88:	b3d07c85 	.word	0xb3d07c85
 8001e8c:	3feff559 	.word	0x3feff559
 8001e90:	5f06f694 	.word	0x5f06f694
 8001e94:	3f554c98 	.word	0x3f554c98
 8001e98:	ed916873 	.word	0xed916873
 8001e9c:	406aeb7c 	.word	0x406aeb7c
 8001ea0:	20000114 	.word	0x20000114
 8001ea4:	20000170 	.word	0x20000170
 8001ea8:	20000160 	.word	0x20000160
 8001eac:	20000128 	.word	0x20000128
 8001eb0:	20000158 	.word	0x20000158
 8001eb4:	20000168 	.word	0x20000168
 8001eb8:	20000134 	.word	0x20000134
 8001ebc:	2000012c 	.word	0x2000012c
 8001ec0:	20000154 	.word	0x20000154
 8001ec4:	2000015c 	.word	0x2000015c
 8001ec8:	2000011c 	.word	0x2000011c
 8001ecc:	20000118 	.word	0x20000118
 8001ed0:	2000016c 	.word	0x2000016c

08001ed4 <forward>:

	}
}

void forward(uint16_t duty_value) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
	STM_EVAL_LEDToggle(LED6);
 8001ede:	2003      	movs	r0, #3
 8001ee0:	f7ff fcc6 	bl	8001870 <STM_EVAL_LEDToggle>
	TIM4->CCR2 = 0;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <forward+0x30>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR4 = 0;
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <forward+0x30>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
	TIM4->CCR1 = duty_value;
 8001ef0:	4a04      	ldr	r2, [pc, #16]	; (8001f04 <forward+0x30>)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR3 = duty_value;
 8001ef6:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <forward+0x30>)
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	40000800 	.word	0x40000800

08001f08 <reverse>:
void reverse(uint16_t duty_value) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
	STM_EVAL_LEDToggle(LED3);
 8001f12:	2001      	movs	r0, #1
 8001f14:	f7ff fcac 	bl	8001870 <STM_EVAL_LEDToggle>
	TIM4->CCR1 = 0;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <reverse+0x30>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR3 = 0;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <reverse+0x30>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR2 = duty_value;
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <reverse+0x30>)
 8001f26:	88fb      	ldrh	r3, [r7, #6]
 8001f28:	6393      	str	r3, [r2, #56]	; 0x38
	TIM4->CCR4 = duty_value;
 8001f2a:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <reverse+0x30>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001f30:	bf00      	nop
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40000800 	.word	0x40000800

08001f3c <stop>:
void stop() {
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
	TIM4->CCR1 = 0;
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <stop+0x28>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR3 = 0;
 8001f46:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <stop+0x28>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR2 = 0;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <stop+0x28>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR4 = 0;
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <stop+0x28>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40000800 	.word	0x40000800

08001f68 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f401_discovery_audio_codec.c.
 * Refer to stm32f401_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size) {
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8001f72:	bf00      	nop
}
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm32f401_discovery_audio_codec.c.
 * Refer to stm32f401_discovery_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void) {
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8001f82:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f96:	e003      	b.n	8001fa0 <LoopCopyDataInit>

08001f98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f9e:	3104      	adds	r1, #4

08001fa0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fa0:	480b      	ldr	r0, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fa2:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fa4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fa8:	d3f6      	bcc.n	8001f98 <CopyDataInit>
  ldr  r2, =_sbss
 8001faa:	4a0b      	ldr	r2, [pc, #44]	; (8001fd8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fac:	e002      	b.n	8001fb4 <LoopFillZerobss>

08001fae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fb0:	f842 3b04 	str.w	r3, [r2], #4

08001fb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fb4:	4b09      	ldr	r3, [pc, #36]	; (8001fdc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fb8:	d3f9      	bcc.n	8001fae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fba:	f000 f83b 	bl	8002034 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fbe:	f000 ff27 	bl	8002e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fc2:	f7ff fd39 	bl	8001a38 <main>
  bx  lr    
 8001fc6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fc8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001fcc:	08002e90 	.word	0x08002e90
  ldr  r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fd4:	2000003c 	.word	0x2000003c
  ldr  r2, =_sbss
 8001fd8:	2000003c 	.word	0x2000003c
  ldr  r3, = _ebss
 8001fdc:	2000017c 	.word	0x2000017c

08001fe0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC_IRQHandler>

08001fe2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <HardFault_Handler+0x4>

08001ff6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001ffa:	e7fe      	b.n	8001ffa <MemManage_Handler+0x4>

08001ffc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002000:	e7fe      	b.n	8002000 <BusFault_Handler+0x4>

08002002 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002006:	e7fe      	b.n	8002006 <UsageFault_Handler+0x4>

08002008 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002016:	b480      	push	{r7}
 8002018:	af00      	add	r7, sp, #0
}
 800201a:	bf00      	nop
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <SystemInit+0x60>)
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <SystemInit+0x60>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002044:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002048:	4a13      	ldr	r2, [pc, #76]	; (8002098 <SystemInit+0x64>)
 800204a:	4b13      	ldr	r3, [pc, #76]	; (8002098 <SystemInit+0x64>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002054:	4b10      	ldr	r3, [pc, #64]	; (8002098 <SystemInit+0x64>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800205a:	4a0f      	ldr	r2, [pc, #60]	; (8002098 <SystemInit+0x64>)
 800205c:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <SystemInit+0x64>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002068:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <SystemInit+0x64>)
 800206c:	4a0b      	ldr	r2, [pc, #44]	; (800209c <SystemInit+0x68>)
 800206e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <SystemInit+0x64>)
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <SystemInit+0x64>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800207a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <SystemInit+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	60da      	str	r2, [r3, #12]
       
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002082:	f000 f80d 	bl	80020a0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002086:	4b03      	ldr	r3, [pc, #12]	; (8002094 <SystemInit+0x60>)
 8002088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800208c:	609a      	str	r2, [r3, #8]
#endif
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	e000ed00 	.word	0xe000ed00
 8002098:	40023800 	.word	0x40023800
 800209c:	24003010 	.word	0x24003010

080020a0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL  used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	2300      	movs	r3, #0
 80020ac:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
   
#else  /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */
    
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80020ae:	4a35      	ldr	r2, [pc, #212]	; (8002184 <SetSysClock+0xe4>)
 80020b0:	4b34      	ldr	r3, [pc, #208]	; (8002184 <SetSysClock+0xe4>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]
  #endif  /* PLL_SOURCE_HSE_BYPASS */
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80020ba:	4b32      	ldr	r3, [pc, #200]	; (8002184 <SetSysClock+0xe4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d103      	bne.n	80020d8 <SetSysClock+0x38>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020d6:	d1f0      	bne.n	80020ba <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <SetSysClock+0xe4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80020e4:	2301      	movs	r3, #1
 80020e6:	603b      	str	r3, [r7, #0]
 80020e8:	e001      	b.n	80020ee <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80020ea:	2300      	movs	r3, #0
 80020ec:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d102      	bne.n	80020fa <SetSysClock+0x5a>
  {

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80020f4:	4b23      	ldr	r3, [pc, #140]	; (8002184 <SetSysClock+0xe4>)
 80020f6:	4a24      	ldr	r2, [pc, #144]	; (8002188 <SetSysClock+0xe8>)
 80020f8:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif  /* PLL_SOURCE_HSI */
  
     /* Select regulator voltage output Scale 2 mode, System frequency up to 84 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80020fa:	4a22      	ldr	r2, [pc, #136]	; (8002184 <SetSysClock+0xe4>)
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <SetSysClock+0xe4>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR &= (uint32_t)~(PWR_CR_VOS);
 8002106:	4a21      	ldr	r2, [pc, #132]	; (800218c <SetSysClock+0xec>)
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <SetSysClock+0xec>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002110:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <SetSysClock+0xe4>)
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <SetSysClock+0xe4>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800211a:	4a1a      	ldr	r2, [pc, #104]	; (8002184 <SetSysClock+0xe4>)
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <SetSysClock+0xe4>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  
 8002122:	4a18      	ldr	r2, [pc, #96]	; (8002184 <SetSysClock+0xe4>)
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <SetSysClock+0xe4>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800212c:	6093      	str	r3, [r2, #8]
 
  /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <SetSysClock+0xe4>)
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <SetSysClock+0xe4>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002138:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800213a:	bf00      	nop
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <SetSysClock+0xe4>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f9      	beq.n	800213c <SetSysClock+0x9c>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <SetSysClock+0xf0>)
 800214a:	f240 7202 	movw	r2, #1794	; 0x702
 800214e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002150:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <SetSysClock+0xe4>)
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <SetSysClock+0xe4>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800215c:	4a09      	ldr	r2, [pc, #36]	; (8002184 <SetSysClock+0xe4>)
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <SetSysClock+0xe4>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002168:	bf00      	nop
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <SetSysClock+0xe4>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d1f9      	bne.n	800216a <SetSysClock+0xca>
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	07415408 	.word	0x07415408
 800218c:	40007000 	.word	0x40007000
 8002190:	40023c00 	.word	0x40023c00

08002194 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da0b      	bge.n	80021c0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80021a8:	490d      	ldr	r1, [pc, #52]	; (80021e0 <NVIC_SetPriority+0x4c>)
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	3b04      	subs	r3, #4
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80021be:	e009      	b.n	80021d4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80021c0:	4908      	ldr	r1, [pc, #32]	; (80021e4 <NVIC_SetPriority+0x50>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	0112      	lsls	r2, r2, #4
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	440b      	add	r3, r1
 80021d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f6:	d301      	bcc.n	80021fc <SysTick_Config+0x14>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e011      	b.n	8002220 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <SysTick_Config+0x40>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002204:	3b01      	subs	r3, #1
 8002206:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8002208:	210f      	movs	r1, #15
 800220a:	f04f 30ff 	mov.w	r0, #4294967295
 800220e:	f7ff ffc1 	bl	8002194 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <SysTick_Config+0x40>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <SysTick_Config+0x40>)
 800221a:	2207      	movs	r2, #7
 800221c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000e010 	.word	0xe000e010

0800222c <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <SysTick_Handler+0xe4>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a35      	ldr	r2, [pc, #212]	; (8002310 <SysTick_Handler+0xe4>)
 800223a:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 800223c:	4b35      	ldr	r3, [pc, #212]	; (8002314 <SysTick_Handler+0xe8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d004      	beq.n	800224e <SysTick_Handler+0x22>
		TM_Time2--;
 8002244:	4b33      	ldr	r3, [pc, #204]	; (8002314 <SysTick_Handler+0xe8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	4a32      	ldr	r2, [pc, #200]	; (8002314 <SysTick_Handler+0xe8>)
 800224c:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 800224e:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8002252:	2300      	movs	r3, #0
 8002254:	71fb      	strb	r3, [r7, #7]
 8002256:	e052      	b.n	80022fe <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <SysTick_Handler+0xec>)
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	685b      	ldr	r3, [r3, #4]
		if (
 8002262:	2b00      	cmp	r3, #0
 8002264:	d048      	beq.n	80022f8 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <SysTick_Handler+0xec>)
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 8002272:	2b00      	cmp	r3, #0
 8002274:	d040      	beq.n	80022f8 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	4a27      	ldr	r2, [pc, #156]	; (8002318 <SysTick_Handler+0xec>)
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 8002282:	2b00      	cmp	r3, #0
 8002284:	d038      	beq.n	80022f8 <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <SysTick_Handler+0xec>)
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	3a01      	subs	r2, #1
 8002294:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <SysTick_Handler+0xec>)
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d128      	bne.n	80022f8 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <SysTick_Handler+0xec>)
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	691a      	ldr	r2, [r3, #16]
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4918      	ldr	r1, [pc, #96]	; (8002318 <SysTick_Handler+0xec>)
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	4618      	mov	r0, r3
 80022c0:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	4a14      	ldr	r2, [pc, #80]	; (8002318 <SysTick_Handler+0xec>)
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	4912      	ldr	r1, [pc, #72]	; (8002318 <SysTick_Handler+0xec>)
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4a0e      	ldr	r2, [pc, #56]	; (8002318 <SysTick_Handler+0xec>)
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <SysTick_Handler+0xec>)
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	3301      	adds	r3, #1
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <SysTick_Handler+0xec>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	79fa      	ldrb	r2, [r7, #7]
 8002304:	429a      	cmp	r2, r3
 8002306:	d3a7      	bcc.n	8002258 <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000058 	.word	0x20000058
 8002314:	2000005c 	.word	0x2000005c
 8002318:	20000064 	.word	0x20000064

0800231c <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8002320:	4b0d      	ldr	r3, [pc, #52]	; (8002358 <TM_DELAY_Init+0x3c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a0d      	ldr	r2, [pc, #52]	; (800235c <TM_DELAY_Init+0x40>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	099b      	lsrs	r3, r3, #6
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5b 	bl	80021e8 <SysTick_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d000      	beq.n	800233a <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8002338:	e7fe      	b.n	8002338 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <TM_DELAY_Init+0x3c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	099b      	lsrs	r3, r3, #6
 8002340:	4a07      	ldr	r2, [pc, #28]	; (8002360 <TM_DELAY_Init+0x44>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	0a9b      	lsrs	r3, r3, #10
 8002348:	4a06      	ldr	r2, [pc, #24]	; (8002364 <TM_DELAY_Init+0x48>)
 800234a:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <TM_DELAY_Init+0x4c>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000002c 	.word	0x2000002c
 800235c:	10624dd3 	.word	0x10624dd3
 8002360:	02659117 	.word	0x02659117
 8002364:	20000178 	.word	0x20000178
 8002368:	20000060 	.word	0x20000060

0800236c <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af02      	add	r7, sp, #8
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	4608      	mov	r0, r1
 8002376:	4611      	mov	r1, r2
 8002378:	461a      	mov	r2, r3
 800237a:	4603      	mov	r3, r0
 800237c:	807b      	strh	r3, [r7, #2]
 800237e:	460b      	mov	r3, r1
 8002380:	707b      	strb	r3, [r7, #1]
 8002382:	4613      	mov	r3, r2
 8002384:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d03e      	beq.n	800240a <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f851 	bl	8002434 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	e029      	b.n	80023ec <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8002398:	887a      	ldrh	r2, [r7, #2]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	fa42 f303 	asr.w	r3, r2, r3
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01d      	beq.n	80023e4 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	08da      	lsrs	r2, r3, #3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	08d9      	lsrs	r1, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3108      	adds	r1, #8
 80023b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80023b8:	68f9      	ldr	r1, [r7, #12]
 80023ba:	f001 0107 	and.w	r1, r1, #7
 80023be:	0089      	lsls	r1, r1, #2
 80023c0:	200f      	movs	r0, #15
 80023c2:	fa00 f101 	lsl.w	r1, r0, r1
 80023c6:	43c9      	mvns	r1, r1
 80023c8:	400b      	ands	r3, r1
 80023ca:	7f38      	ldrb	r0, [r7, #28]
 80023cc:	68f9      	ldr	r1, [r7, #12]
 80023ce:	f001 0107 	and.w	r1, r1, #7
 80023d2:	0089      	lsls	r1, r1, #2
 80023d4:	fa00 f101 	lsl.w	r1, r0, r1
 80023d8:	4319      	orrs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80023e2:	e000      	b.n	80023e6 <TM_GPIO_InitAlternate+0x7a>
			continue;
 80023e4:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	3301      	adds	r3, #1
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b0f      	cmp	r3, #15
 80023f0:	d9d2      	bls.n	8002398 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80023f2:	787a      	ldrb	r2, [r7, #1]
 80023f4:	8879      	ldrh	r1, [r7, #2]
 80023f6:	7e3b      	ldrb	r3, [r7, #24]
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	783b      	ldrb	r3, [r7, #0]
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	2202      	movs	r2, #2
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f82e 	bl	8002464 <TM_GPIO_INT_Init>
 8002408:	e000      	b.n	800240c <TM_GPIO_InitAlternate+0xa0>
		return;
 800240a:	bf00      	nop
}
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8002412:	b480      	push	{r7}
 8002414:	b083      	sub	sp, #12
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8002420:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8002424:	0a9b      	lsrs	r3, r3, #10
 8002426:	b29b      	uxth	r3, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff ffe8 	bl	8002412 <TM_GPIO_GetPortSource>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	2301      	movs	r3, #1
 8002448:	fa03 f102 	lsl.w	r1, r3, r2
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <TM_GPIO_INT_EnableClock+0x2c>)
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <TM_GPIO_INT_EnableClock+0x2c>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	430b      	orrs	r3, r1
 8002454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	4608      	mov	r0, r1
 800246e:	4611      	mov	r1, r2
 8002470:	461a      	mov	r2, r3
 8002472:	4603      	mov	r3, r0
 8002474:	807b      	strh	r3, [r7, #2]
 8002476:	460b      	mov	r3, r1
 8002478:	707b      	strb	r3, [r7, #1]
 800247a:	4613      	mov	r3, r2
 800247c:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffc7 	bl	8002412 <TM_GPIO_GetPortSource>
 8002484:	4603      	mov	r3, r0
 8002486:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e067      	b.n	800255e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800248e:	887a      	ldrh	r2, [r7, #2]
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	fa42 f303 	asr.w	r3, r2, r3
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b00      	cmp	r3, #0
 800249c:	d05b      	beq.n	8002556 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800249e:	7bbb      	ldrb	r3, [r7, #14]
 80024a0:	7bba      	ldrb	r2, [r7, #14]
 80024a2:	4932      	ldr	r1, [pc, #200]	; (800256c <TM_GPIO_INT_Init+0x108>)
 80024a4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024a8:	b211      	sxth	r1, r2
 80024aa:	7bfa      	ldrb	r2, [r7, #15]
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	b212      	sxth	r2, r2
 80024b4:	430a      	orrs	r2, r1
 80024b6:	b212      	sxth	r2, r2
 80024b8:	b291      	uxth	r1, r2
 80024ba:	4a2c      	ldr	r2, [pc, #176]	; (800256c <TM_GPIO_INT_Init+0x108>)
 80024bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	0052      	lsls	r2, r2, #1
 80024c8:	2103      	movs	r1, #3
 80024ca:	fa01 f202 	lsl.w	r2, r1, r2
 80024ce:	43d2      	mvns	r2, r2
 80024d0:	4013      	ands	r3, r2
 80024d2:	7e39      	ldrb	r1, [r7, #24]
 80024d4:	7bfa      	ldrb	r2, [r7, #15]
 80024d6:	0052      	lsls	r2, r2, #1
 80024d8:	fa01 f202 	lsl.w	r2, r1, r2
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	2103      	movs	r1, #3
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4013      	ands	r3, r2
 80024f4:	7879      	ldrb	r1, [r7, #1]
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	0052      	lsls	r2, r2, #1
 80024fa:	fa01 f202 	lsl.w	r2, r1, r2
 80024fe:	431a      	orrs	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002504:	787b      	ldrb	r3, [r7, #1]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d002      	beq.n	8002510 <TM_GPIO_INT_Init+0xac>
 800250a:	787b      	ldrb	r3, [r7, #1]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d123      	bne.n	8002558 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	2101      	movs	r1, #1
 8002518:	fa01 f202 	lsl.w	r2, r1, r2
 800251c:	b292      	uxth	r2, r2
 800251e:	43d2      	mvns	r2, r2
 8002520:	4013      	ands	r3, r2
 8002522:	7839      	ldrb	r1, [r7, #0]
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	fa01 f202 	lsl.w	r2, r1, r2
 800252a:	b292      	uxth	r2, r2
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2103      	movs	r1, #3
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4013      	ands	r3, r2
 8002544:	7f39      	ldrb	r1, [r7, #28]
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	0052      	lsls	r2, r2, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	e000      	b.n	8002558 <TM_GPIO_INT_Init+0xf4>
			continue;
 8002556:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	3301      	adds	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	2b0f      	cmp	r3, #15
 8002562:	d994      	bls.n	800248e <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	2000007c 	.word	0x2000007c

08002570 <TM_I2C_Init>:
/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	460b      	mov	r3, r1
 800257a:	607a      	str	r2, [r7, #4]
 800257c:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4a44      	ldr	r2, [pc, #272]	; (8002694 <TM_I2C_Init+0x124>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d121      	bne.n	80025ca <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8002586:	4a44      	ldr	r2, [pc, #272]	; (8002698 <TM_I2C_Init+0x128>)
 8002588:	4b43      	ldr	r3, [pc, #268]	; (8002698 <TM_I2C_Init+0x128>)
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002590:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fa79 	bl	8002a8c <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 800259a:	4b40      	ldr	r3, [pc, #256]	; (800269c <TM_I2C_Init+0x12c>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d902      	bls.n	80025aa <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 80025a4:	4a3d      	ldr	r2, [pc, #244]	; (800269c <TM_I2C_Init+0x12c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <TM_I2C_Init+0x12c>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 80025b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025b4:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 80025ba:	2300      	movs	r3, #0
 80025bc:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 80025be:	2300      	movs	r3, #0
 80025c0:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 80025c2:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80025c6:	82fb      	strh	r3, [r7, #22]
 80025c8:	e04a      	b.n	8002660 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	4a34      	ldr	r2, [pc, #208]	; (80026a0 <TM_I2C_Init+0x130>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d121      	bne.n	8002616 <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 80025d2:	4a31      	ldr	r2, [pc, #196]	; (8002698 <TM_I2C_Init+0x128>)
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <TM_I2C_Init+0x128>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 80025de:	7afb      	ldrb	r3, [r7, #11]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fa91 	bl	8002b08 <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <TM_I2C_Init+0x12c>)
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d902      	bls.n	80025f6 <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 80025f0:	4a2a      	ldr	r2, [pc, #168]	; (800269c <TM_I2C_Init+0x12c>)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 80025f6:	4b29      	ldr	r3, [pc, #164]	; (800269c <TM_I2C_Init+0x12c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 80025fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002600:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8002602:	2300      	movs	r3, #0
 8002604:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8002606:	2300      	movs	r3, #0
 8002608:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 800260a:	2300      	movs	r3, #0
 800260c:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 800260e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002612:	82fb      	strh	r3, [r7, #22]
 8002614:	e024      	b.n	8002660 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a22      	ldr	r2, [pc, #136]	; (80026a4 <TM_I2C_Init+0x134>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d120      	bne.n	8002660 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800261e:	4a1e      	ldr	r2, [pc, #120]	; (8002698 <TM_I2C_Init+0x128>)
 8002620:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <TM_I2C_Init+0x128>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 800262a:	7afb      	ldrb	r3, [r7, #11]
 800262c:	4618      	mov	r0, r3
 800262e:	f000 faab 	bl	8002b88 <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <TM_I2C_Init+0x12c>)
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d902      	bls.n	8002642 <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 800263c:	4a17      	ldr	r2, [pc, #92]	; (800269c <TM_I2C_Init+0x12c>)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 8002642:	4b16      	ldr	r3, [pc, #88]	; (800269c <TM_I2C_Init+0x12c>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 8002648:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800264c:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 800264e:	2300      	movs	r3, #0
 8002650:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 8002652:	2300      	movs	r3, #0
 8002654:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 8002656:	2300      	movs	r3, #0
 8002658:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 800265a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800265e:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	881b      	ldrh	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 8002670:	f107 0310 	add.w	r3, r7, #16
 8002674:	4619      	mov	r1, r3
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7fe fbb6 	bl	8000de8 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	881b      	ldrh	r3, [r3, #0]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f043 0301 	orr.w	r3, r3, #1
 8002686:	b29a      	uxth	r2, r3
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	801a      	strh	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	3720      	adds	r7, #32
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40005400 	.word	0x40005400
 8002698:	40023800 	.word	0x40023800
 800269c:	20000030 	.word	0x20000030
 80026a0:	40005800 	.word	0x40005800
 80026a4:	40005c00 	.word	0x40005c00

080026a8 <TM_I2C_Read>:

uint8_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg) {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
 80026b4:	4613      	mov	r3, r2
 80026b6:	70bb      	strb	r3, [r7, #2]
	uint8_t received_data;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 80026b8:	78f9      	ldrb	r1, [r7, #3]
 80026ba:	2300      	movs	r3, #0
 80026bc:	2200      	movs	r2, #0
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f89c 	bl	80027fc <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 80026c4:	78bb      	ldrb	r3, [r7, #2]
 80026c6:	4619      	mov	r1, r3
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f91b 	bl	8002904 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f9a8 	bl	8002a24 <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 80026d4:	78f9      	ldrb	r1, [r7, #3]
 80026d6:	2300      	movs	r3, #0
 80026d8:	2201      	movs	r2, #1
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f88e 	bl	80027fc <TM_I2C_Start>
	received_data = TM_I2C_ReadNack(I2Cx);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f967 	bl	80029b4 <TM_I2C_ReadNack>
 80026e6:	4603      	mov	r3, r0
 80026e8:	73fb      	strb	r3, [r7, #15]
	return received_data;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <TM_I2C_ReadMulti>:

void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	460b      	mov	r3, r1
 8002700:	72fb      	strb	r3, [r7, #11]
 8002702:	4613      	mov	r3, r2
 8002704:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 8002706:	7af9      	ldrb	r1, [r7, #11]
 8002708:	2301      	movs	r3, #1
 800270a:	2200      	movs	r2, #0
 800270c:	68f8      	ldr	r0, [r7, #12]
 800270e:	f000 f875 	bl	80027fc <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8002712:	7abb      	ldrb	r3, [r7, #10]
 8002714:	4619      	mov	r1, r3
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f000 f8f4 	bl	8002904 <TM_I2C_WriteData>
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 800271c:	7af9      	ldrb	r1, [r7, #11]
 800271e:	2301      	movs	r3, #1
 8002720:	2201      	movs	r2, #1
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f86a 	bl	80027fc <TM_I2C_Start>
	while (count--) {
 8002728:	e013      	b.n	8002752 <TM_I2C_ReadMulti+0x5e>
		if (!count) {
 800272a:	8c3b      	ldrh	r3, [r7, #32]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d108      	bne.n	8002742 <TM_I2C_ReadMulti+0x4e>
			/* Last byte */
			*data++ = TM_I2C_ReadNack(I2Cx);
 8002730:	687c      	ldr	r4, [r7, #4]
 8002732:	1c63      	adds	r3, r4, #1
 8002734:	607b      	str	r3, [r7, #4]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f93c 	bl	80029b4 <TM_I2C_ReadNack>
 800273c:	4603      	mov	r3, r0
 800273e:	7023      	strb	r3, [r4, #0]
 8002740:	e007      	b.n	8002752 <TM_I2C_ReadMulti+0x5e>
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
 8002742:	687c      	ldr	r4, [r7, #4]
 8002744:	1c63      	adds	r3, r4, #1
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f000 f903 	bl	8002954 <TM_I2C_ReadAck>
 800274e:	4603      	mov	r3, r0
 8002750:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8002752:	8c3b      	ldrh	r3, [r7, #32]
 8002754:	1e5a      	subs	r2, r3, #1
 8002756:	843a      	strh	r2, [r7, #32]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e6      	bne.n	800272a <TM_I2C_ReadMulti+0x36>
		}
	}
}
 800275c:	bf00      	nop
 800275e:	3714      	adds	r7, #20
 8002760:	46bd      	mov	sp, r7
 8002762:	bd90      	pop	{r4, r7, pc}

08002764 <TM_I2C_Write>:
			*data = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	4608      	mov	r0, r1
 800276e:	4611      	mov	r1, r2
 8002770:	461a      	mov	r2, r3
 8002772:	4603      	mov	r3, r0
 8002774:	70fb      	strb	r3, [r7, #3]
 8002776:	460b      	mov	r3, r1
 8002778:	70bb      	strb	r3, [r7, #2]
 800277a:	4613      	mov	r3, r2
 800277c:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 800277e:	78f9      	ldrb	r1, [r7, #3]
 8002780:	2300      	movs	r3, #0
 8002782:	2200      	movs	r2, #0
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f839 	bl	80027fc <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 800278a:	78bb      	ldrb	r3, [r7, #2]
 800278c:	4619      	mov	r1, r3
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f8b8 	bl	8002904 <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	4619      	mov	r1, r3
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f8b3 	bl	8002904 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f940 	bl	8002a24 <TM_I2C_Stop>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <TM_I2C_IsDeviceConnected>:
	}
	TM_I2C_Stop(I2Cx);
}


uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	460b      	mov	r3, r1
 80027b6:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 80027bc:	78f9      	ldrb	r1, [r7, #3]
 80027be:	2301      	movs	r3, #1
 80027c0:	2200      	movs	r2, #0
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f81a 	bl	80027fc <TM_I2C_Start>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <TM_I2C_IsDeviceConnected+0x26>
		connected = 1;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f926 	bl	8002a24 <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 80027d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}

080027e2 <TM_I2C_InitCustomPinsCallback>:

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 80027e2:	b480      	push	{r7}
 80027e4:	b083      	sub	sp, #12
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <TM_I2C_Start>:

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	461a      	mov	r2, r3
 800280a:	4603      	mov	r3, r0
 800280c:	70fb      	strb	r3, [r7, #3]
 800280e:	460b      	mov	r3, r1
 8002810:	70bb      	strb	r3, [r7, #2]
 8002812:	4613      	mov	r3, r2
 8002814:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	881b      	ldrh	r3, [r3, #0]
 800281a:	b29b      	uxth	r3, r3
 800281c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002820:	b29a      	uxth	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <TM_I2C_Start+0x100>)
 8002828:	f644 6220 	movw	r2, #20000	; 0x4e20
 800282c:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 800282e:	e00a      	b.n	8002846 <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8002830:	4b32      	ldr	r3, [pc, #200]	; (80028fc <TM_I2C_Start+0x100>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	3b01      	subs	r3, #1
 8002836:	4a31      	ldr	r2, [pc, #196]	; (80028fc <TM_I2C_Start+0x100>)
 8002838:	6013      	str	r3, [r2, #0]
 800283a:	4b30      	ldr	r3, [pc, #192]	; (80028fc <TM_I2C_Start+0x100>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <TM_I2C_Start+0x4a>
			return 1;
 8002842:	2301      	movs	r3, #1
 8002844:	e056      	b.n	80028f4 <TM_I2C_Start+0xf8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8a9b      	ldrh	r3, [r3, #20]
 800284a:	b29b      	uxth	r3, r3
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0ed      	beq.n	8002830 <TM_I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 8002854:	787b      	ldrb	r3, [r7, #1]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002864:	b29a      	uxth	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 800286a:	78bb      	ldrb	r3, [r7, #2]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d11d      	bne.n	80028ac <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	b29b      	uxth	r3, r3
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	b29a      	uxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <TM_I2C_Start+0x100>)
 8002880:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002884:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8002886:	e00a      	b.n	800289e <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <TM_I2C_Start+0x100>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <TM_I2C_Start+0x100>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <TM_I2C_Start+0x100>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <TM_I2C_Start+0xa2>
				return 1;
 800289a:	2301      	movs	r3, #1
 800289c:	e02a      	b.n	80028f4 <TM_I2C_Start+0xf8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	8a9b      	ldrh	r3, [r3, #20]
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ed      	beq.n	8002888 <TM_I2C_Start+0x8c>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 80028ac:	78bb      	ldrb	r3, [r7, #2]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11d      	bne.n	80028ee <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <TM_I2C_Start+0x100>)
 80028c2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80028c6:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 80028c8:	e00a      	b.n	80028e0 <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <TM_I2C_Start+0x100>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <TM_I2C_Start+0x100>)
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <TM_I2C_Start+0x100>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <TM_I2C_Start+0xe4>
				return 1;
 80028dc:	2301      	movs	r3, #1
 80028de:	e009      	b.n	80028f4 <TM_I2C_Start+0xf8>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <TM_I2C_Start+0x104>)
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fb42 	bl	8000f6c <I2C_CheckEvent>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ed      	beq.n	80028ca <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000094 	.word	0x20000094
 8002900:	00030002 	.word	0x00030002

08002904 <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <TM_I2C_WriteData+0x4c>)
 8002912:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002916:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8002918:	e004      	b.n	8002924 <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <TM_I2C_WriteData+0x4c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a0b      	ldr	r2, [pc, #44]	; (8002950 <TM_I2C_WriteData+0x4c>)
 8002922:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	8a9b      	ldrh	r3, [r3, #20]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <TM_I2C_WriteData+0x36>
 8002932:	4b07      	ldr	r3, [pc, #28]	; (8002950 <TM_I2C_WriteData+0x4c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1ef      	bne.n	800291a <TM_I2C_WriteData+0x16>
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	821a      	strh	r2, [r3, #16]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000094 	.word	0x20000094

08002954 <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	b29b      	uxth	r3, r3
 8002962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002966:	b29a      	uxth	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <TM_I2C_ReadAck+0x58>)
 800296e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002972:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8002974:	e00a      	b.n	800298c <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <TM_I2C_ReadAck+0x58>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	3b01      	subs	r3, #1
 800297c:	4a0b      	ldr	r2, [pc, #44]	; (80029ac <TM_I2C_ReadAck+0x58>)
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <TM_I2C_ReadAck+0x58>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <TM_I2C_ReadAck+0x38>
			return 1;
 8002988:	2301      	movs	r3, #1
 800298a:	e00b      	b.n	80029a4 <TM_I2C_ReadAck+0x50>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 800298c:	4908      	ldr	r1, [pc, #32]	; (80029b0 <TM_I2C_ReadAck+0x5c>)
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fe faec 	bl	8000f6c <I2C_CheckEvent>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ed      	beq.n	8002976 <TM_I2C_ReadAck+0x22>
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	8a1b      	ldrh	r3, [r3, #16]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 80029a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000094 	.word	0x20000094
 80029b0:	00030040 	.word	0x00030040

080029b4 <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	881b      	ldrh	r3, [r3, #0]
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <TM_I2C_ReadNack+0x68>)
 80029de:	f644 6220 	movw	r2, #20000	; 0x4e20
 80029e2:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80029e4:	e00a      	b.n	80029fc <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <TM_I2C_ReadNack+0x68>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <TM_I2C_ReadNack+0x68>)
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <TM_I2C_ReadNack+0x68>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <TM_I2C_ReadNack+0x48>
			return 1;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e00b      	b.n	8002a14 <TM_I2C_ReadNack+0x60>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80029fc:	4908      	ldr	r1, [pc, #32]	; (8002a20 <TM_I2C_ReadNack+0x6c>)
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fe fab4 	bl	8000f6c <I2C_CheckEvent>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0ed      	beq.n	80029e6 <TM_I2C_ReadNack+0x32>
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	8a1b      	ldrh	r3, [r3, #16]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 8002a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000094 	.word	0x20000094
 8002a20:	00030040 	.word	0x00030040

08002a24 <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002a2c:	4b16      	ldr	r3, [pc, #88]	; (8002a88 <TM_I2C_Stop+0x64>)
 8002a2e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002a32:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8002a34:	e00a      	b.n	8002a4c <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <TM_I2C_Stop+0x64>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	4a12      	ldr	r2, [pc, #72]	; (8002a88 <TM_I2C_Stop+0x64>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b11      	ldr	r3, [pc, #68]	; (8002a88 <TM_I2C_Stop+0x64>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <TM_I2C_Stop+0x28>
			return 1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e016      	b.n	8002a7a <TM_I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	8a9b      	ldrh	r3, [r3, #20]
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ed      	beq.n	8002a36 <TM_I2C_Stop+0x12>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8a9b      	ldrh	r3, [r3, #20]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0e6      	beq.n	8002a36 <TM_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000094 	.word	0x20000094

08002a8c <TM_I2C1_INT_InitPins>:




/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d109      	bne.n	8002ab0 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002a9c:	2304      	movs	r3, #4
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	21c0      	movs	r1, #192	; 0xc0
 8002aaa:	4815      	ldr	r0, [pc, #84]	; (8002b00 <TM_I2C1_INT_InitPins+0x74>)
 8002aac:	f7ff fc5e 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d10a      	bne.n	8002acc <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002ab6:	2304      	movs	r3, #4
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	2301      	movs	r3, #1
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	2301      	movs	r3, #1
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002ac6:	480e      	ldr	r0, [pc, #56]	; (8002b00 <TM_I2C1_INT_InitPins+0x74>)
 8002ac8:	f7ff fc50 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d10a      	bne.n	8002ae8 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002ad2:	2304      	movs	r3, #4
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2301      	movs	r3, #1
 8002adc:	2201      	movs	r2, #1
 8002ade:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002ae2:	4807      	ldr	r0, [pc, #28]	; (8002b00 <TM_I2C1_INT_InitPins+0x74>)
 8002ae4:	f7ff fc42 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d103      	bne.n	8002af6 <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 8002aee:	2104      	movs	r1, #4
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <TM_I2C1_INT_InitPins+0x78>)
 8002af2:	f7ff fe76 	bl	80027e2 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40005400 	.word	0x40005400

08002b08 <TM_I2C2_INT_InitPins>:

static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	4603      	mov	r3, r0
 8002b10:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10a      	bne.n	8002b2e <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002b18:	2304      	movs	r3, #4
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2301      	movs	r3, #1
 8002b22:	2201      	movs	r2, #1
 8002b24:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002b28:	4813      	ldr	r0, [pc, #76]	; (8002b78 <TM_I2C2_INT_InitPins+0x70>)
 8002b2a:	f7ff fc1f 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d109      	bne.n	8002b48 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002b34:	2304      	movs	r3, #4
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	2301      	movs	r3, #1
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2103      	movs	r1, #3
 8002b42:	480e      	ldr	r0, [pc, #56]	; (8002b7c <TM_I2C2_INT_InitPins+0x74>)
 8002b44:	f7ff fc12 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d109      	bne.n	8002b62 <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002b4e:	2304      	movs	r3, #4
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	2301      	movs	r3, #1
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	2301      	movs	r3, #1
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2130      	movs	r1, #48	; 0x30
 8002b5c:	4808      	ldr	r0, [pc, #32]	; (8002b80 <TM_I2C2_INT_InitPins+0x78>)
 8002b5e:	f7ff fc05 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d103      	bne.n	8002b70 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8002b68:	2104      	movs	r1, #4
 8002b6a:	4806      	ldr	r0, [pc, #24]	; (8002b84 <TM_I2C2_INT_InitPins+0x7c>)
 8002b6c:	f7ff fe39 	bl	80027e2 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002b70:	bf00      	nop
 8002b72:	3708      	adds	r7, #8
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	40021400 	.word	0x40021400
 8002b80:	40021c00 	.word	0x40021c00
 8002b84:	40005800 	.word	0x40005800

08002b88 <TM_I2C3_INT_InitPins>:

static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002b92:	79fb      	ldrb	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d115      	bne.n	8002bc4 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002b98:	2304      	movs	r3, #4
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba8:	4813      	ldr	r0, [pc, #76]	; (8002bf8 <TM_I2C3_INT_InitPins+0x70>)
 8002baa:	f7ff fbdf 	bl	800236c <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002bae:	2304      	movs	r3, #4
 8002bb0:	9301      	str	r3, [sp, #4]
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	9300      	str	r3, [sp, #0]
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bbe:	480f      	ldr	r0, [pc, #60]	; (8002bfc <TM_I2C3_INT_InitPins+0x74>)
 8002bc0:	f7ff fbd4 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d10a      	bne.n	8002be0 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002bca:	2304      	movs	r3, #4
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	2301      	movs	r3, #1
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <TM_I2C3_INT_InitPins+0x78>)
 8002bdc:	f7ff fbc6 	bl	800236c <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	2b03      	cmp	r3, #3
 8002be4:	d103      	bne.n	8002bee <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 8002be6:	2104      	movs	r1, #4
 8002be8:	4806      	ldr	r0, [pc, #24]	; (8002c04 <TM_I2C3_INT_InitPins+0x7c>)
 8002bea:	f7ff fdfa 	bl	80027e2 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40021c00 	.word	0x40021c00
 8002c04:	40005c00 	.word	0x40005c00

08002c08 <TM_MPU6050_ReadAll_Custom>:

	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAll_Custom(TM_MPU6050_Custom_t* DataStruct) {
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b088      	sub	sp, #32
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
//	int16_t temp;

	/* Read full raw data, 14bytes */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7819      	ldrb	r1, [r3, #0]
 8002c14:	f107 0208 	add.w	r2, r7, #8
 8002c18:	230e      	movs	r3, #14
 8002c1a:	9300      	str	r3, [sp, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	223b      	movs	r2, #59	; 0x3b
 8002c20:	4811      	ldr	r0, [pc, #68]	; (8002c68 <TM_MPU6050_ReadAll_Custom+0x60>)
 8002c22:	f7ff fd67 	bl	80026f4 <TM_I2C_ReadMulti>
			data, 14);

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t) (data[0] << 8 | data[1]);
 8002c26:	7a3b      	ldrb	r3, [r7, #8]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	b21a      	sxth	r2, r3
 8002c2c:	7a7b      	ldrb	r3, [r7, #9]
 8002c2e:	b21b      	sxth	r3, r3
 8002c30:	4313      	orrs	r3, r2
 8002c32:	b21a      	sxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	819a      	strh	r2, [r3, #12]
//	DataStruct->Accelerometer_Y = (int16_t) (data[2] << 8 | data[3]);
	DataStruct->Accelerometer_Z = (int16_t) (data[4] << 8 | data[5]);
 8002c38:	7b3b      	ldrb	r3, [r7, #12]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	b21a      	sxth	r2, r3
 8002c3e:	7b7b      	ldrb	r3, [r7, #13]
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	4313      	orrs	r3, r2
 8002c44:	b21a      	sxth	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	821a      	strh	r2, [r3, #16]
//	DataStruct->Temperature = (float) ((float) ((int16_t) temp) / (float) 340.0
//			+ (float) 36.53);

	/* Format gyroscope data */
//	DataStruct->Gyroscope_X = (int16_t) (data[8] << 8 | data[9]);
	DataStruct->Gyroscope_Y = (int16_t) (data[10] << 8 | data[11]);
 8002c4a:	7cbb      	ldrb	r3, [r7, #18]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	b21a      	sxth	r2, r3
 8002c50:	7cfb      	ldrb	r3, [r7, #19]
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	4313      	orrs	r3, r2
 8002c56:	b21a      	sxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	829a      	strh	r2, [r3, #20]
//	DataStruct->Gyroscope_Z = (int16_t) (data[12] << 8 | data[13]);

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40005c00 	.word	0x40005c00

08002c6c <BK_MPU6050_Activate_DLPF_Custom>:
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_INT_PIN_CFG, 0x80);
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_INT_ENABLE, 0x01);
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t BK_MPU6050_Activate_DLPF_Custom(TM_MPU6050_Custom_t* DataStruct, BK_MPU6050_DLPF_t Bandwidth) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	70fb      	strb	r3, [r7, #3]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_CONFIG, Bandwidth);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7819      	ldrb	r1, [r3, #0]
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	221a      	movs	r2, #26
 8002c80:	4803      	ldr	r0, [pc, #12]	; (8002c90 <BK_MPU6050_Activate_DLPF_Custom+0x24>)
 8002c82:	f7ff fd6f 	bl	8002764 <TM_I2C_Write>
	return TM_MPU6050_Result_Ok;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40005c00 	.word	0x40005c00

08002c94 <TM_MPU6050_Init_Custom>:

TM_MPU6050_Result_t TM_MPU6050_Init_Custom(TM_MPU6050_Custom_t* DataStruct,
		TM_MPU6050_Device_t DeviceNumber,
		TM_MPU6050_Accelerometer_t AccelerometerSensitivity,
		TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	4608      	mov	r0, r1
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	70fb      	strb	r3, [r7, #3]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70bb      	strb	r3, [r7, #2]
 8002caa:	4613      	mov	r3, r2
 8002cac:	707b      	strb	r3, [r7, #1]
	uint8_t temp;

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	701a      	strb	r2, [r3, #0]

	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 8002cba:	4a4f      	ldr	r2, [pc, #316]	; (8002df8 <TM_MPU6050_Init_Custom+0x164>)
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	484f      	ldr	r0, [pc, #316]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002cc0:	f7ff fc56 	bl	8002570 <TM_I2C_Init>

	/* Check if device is connected */
	if (!TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address)) {
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	484c      	ldr	r0, [pc, #304]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002ccc:	f7ff fd6e 	bl	80027ac <TM_I2C_IsDeviceConnected>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <TM_MPU6050_Init_Custom+0x46>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e089      	b.n	8002dee <TM_MPU6050_Init_Custom+0x15a>
	}

	/* Check who I am */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2275      	movs	r2, #117	; 0x75
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4846      	ldr	r0, [pc, #280]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002ce4:	f7ff fce0 	bl	80026a8 <TM_I2C_Read>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b68      	cmp	r3, #104	; 0x68
 8002cec:	d001      	beq.n	8002cf2 <TM_MPU6050_Init_Custom+0x5e>
			MPU6050_WHO_AM_I) != MPU6050_I_AM) {
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e07d      	b.n	8002dee <TM_MPU6050_Init_Custom+0x15a>
	}

	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7819      	ldrb	r1, [r3, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	226b      	movs	r2, #107	; 0x6b
 8002cfa:	4840      	ldr	r0, [pc, #256]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002cfc:	f7ff fd32 	bl	8002764 <TM_I2C_Write>

	/* Config accelerometer */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	221c      	movs	r2, #28
 8002d06:	4619      	mov	r1, r3
 8002d08:	483c      	ldr	r0, [pc, #240]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002d0a:	f7ff fccd 	bl	80026a8 <TM_I2C_Read>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8002d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d16:	f023 0318 	bic.w	r3, r3, #24
 8002d1a:	b25a      	sxtb	r2, r3
 8002d1c:	78bb      	ldrb	r3, [r7, #2]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	b25b      	sxtb	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b25b      	sxtb	r3, r3
 8002d26:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	7819      	ldrb	r1, [r3, #0]
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	221c      	movs	r2, #28
 8002d30:	4832      	ldr	r0, [pc, #200]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002d32:	f7ff fd17 	bl	8002764 <TM_I2C_Write>

	/* Config gyroscope */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	221b      	movs	r2, #27
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	482f      	ldr	r0, [pc, #188]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002d40:	f7ff fcb2 	bl	80026a8 <TM_I2C_Read>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t) GyroscopeSensitivity << 3;
 8002d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4c:	f023 0318 	bic.w	r3, r3, #24
 8002d50:	b25a      	sxtb	r2, r3
 8002d52:	787b      	ldrb	r3, [r7, #1]
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	b25b      	sxtb	r3, r3
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b25b      	sxtb	r3, r3
 8002d5c:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	7819      	ldrb	r1, [r3, #0]
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	221b      	movs	r2, #27
 8002d66:	4825      	ldr	r0, [pc, #148]	; (8002dfc <TM_MPU6050_Init_Custom+0x168>)
 8002d68:	f7ff fcfc 	bl	8002764 <TM_I2C_Write>

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002d6c:	78bb      	ldrb	r3, [r7, #2]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d81d      	bhi.n	8002dae <TM_MPU6050_Init_Custom+0x11a>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <TM_MPU6050_Init_Custom+0xe4>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002d89 	.word	0x08002d89
 8002d7c:	08002d93 	.word	0x08002d93
 8002d80:	08002d9d 	.word	0x08002d9d
 8002d84:	08002da7 	.word	0x08002da7
	case TM_MPU6050_Accelerometer_2G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_2;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002d8e:	609a      	str	r2, [r3, #8]
		break;
 8002d90:	e00e      	b.n	8002db0 <TM_MPU6050_Init_Custom+0x11c>
	case TM_MPU6050_Accelerometer_4G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002d98:	609a      	str	r2, [r3, #8]
		break;
 8002d9a:	e009      	b.n	8002db0 <TM_MPU6050_Init_Custom+0x11c>
	case TM_MPU6050_Accelerometer_8G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002da2:	609a      	str	r2, [r3, #8]
		break;
 8002da4:	e004      	b.n	8002db0 <TM_MPU6050_Init_Custom+0x11c>
	case TM_MPU6050_Accelerometer_16G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002dac:	609a      	str	r2, [r3, #8]
	default:
		break;
 8002dae:	bf00      	nop
	}

	switch (GyroscopeSensitivity) {
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d819      	bhi.n	8002dea <TM_MPU6050_Init_Custom+0x156>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <TM_MPU6050_Init_Custom+0x128>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002dd5 	.word	0x08002dd5
 8002dc4:	08002ddd 	.word	0x08002ddd
 8002dc8:	08002de5 	.word	0x08002de5
	case TM_MPU6050_Gyroscope_250s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_250;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <TM_MPU6050_Init_Custom+0x16c>)
 8002dd0:	605a      	str	r2, [r3, #4]
		break;
 8002dd2:	e00b      	b.n	8002dec <TM_MPU6050_Init_Custom+0x158>
	case TM_MPU6050_Gyroscope_500s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_500;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0b      	ldr	r2, [pc, #44]	; (8002e04 <TM_MPU6050_Init_Custom+0x170>)
 8002dd8:	605a      	str	r2, [r3, #4]
		break;
 8002dda:	e007      	b.n	8002dec <TM_MPU6050_Init_Custom+0x158>
	case TM_MPU6050_Gyroscope_1000s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_1000;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <TM_MPU6050_Init_Custom+0x174>)
 8002de0:	605a      	str	r2, [r3, #4]
		break;
 8002de2:	e003      	b.n	8002dec <TM_MPU6050_Init_Custom+0x158>
	case TM_MPU6050_Gyroscope_2000s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_2000;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a09      	ldr	r2, [pc, #36]	; (8002e0c <TM_MPU6050_Init_Custom+0x178>)
 8002de8:	605a      	str	r2, [r3, #4]
	default:
		break;
 8002dea:	bf00      	nop
	}

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00061a80 	.word	0x00061a80
 8002dfc:	40005c00 	.word	0x40005c00
 8002e00:	3bfa232d 	.word	0x3bfa232d
 8002e04:	3c7a232d 	.word	0x3c7a232d
 8002e08:	3cf9c190 	.word	0x3cf9c190
 8002e0c:	3d79c190 	.word	0x3d79c190

08002e10 <__libc_init_array>:
 8002e10:	b570      	push	{r4, r5, r6, lr}
 8002e12:	4e0d      	ldr	r6, [pc, #52]	; (8002e48 <__libc_init_array+0x38>)
 8002e14:	4c0d      	ldr	r4, [pc, #52]	; (8002e4c <__libc_init_array+0x3c>)
 8002e16:	1ba4      	subs	r4, r4, r6
 8002e18:	10a4      	asrs	r4, r4, #2
 8002e1a:	2500      	movs	r5, #0
 8002e1c:	42a5      	cmp	r5, r4
 8002e1e:	d109      	bne.n	8002e34 <__libc_init_array+0x24>
 8002e20:	4e0b      	ldr	r6, [pc, #44]	; (8002e50 <__libc_init_array+0x40>)
 8002e22:	4c0c      	ldr	r4, [pc, #48]	; (8002e54 <__libc_init_array+0x44>)
 8002e24:	f000 f818 	bl	8002e58 <_init>
 8002e28:	1ba4      	subs	r4, r4, r6
 8002e2a:	10a4      	asrs	r4, r4, #2
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	42a5      	cmp	r5, r4
 8002e30:	d105      	bne.n	8002e3e <__libc_init_array+0x2e>
 8002e32:	bd70      	pop	{r4, r5, r6, pc}
 8002e34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e38:	4798      	blx	r3
 8002e3a:	3501      	adds	r5, #1
 8002e3c:	e7ee      	b.n	8002e1c <__libc_init_array+0xc>
 8002e3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e42:	4798      	blx	r3
 8002e44:	3501      	adds	r5, #1
 8002e46:	e7f2      	b.n	8002e2e <__libc_init_array+0x1e>
 8002e48:	08002e88 	.word	0x08002e88
 8002e4c:	08002e88 	.word	0x08002e88
 8002e50:	08002e88 	.word	0x08002e88
 8002e54:	08002e8c 	.word	0x08002e8c

08002e58 <_init>:
 8002e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5a:	bf00      	nop
 8002e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e5e:	bc08      	pop	{r3}
 8002e60:	469e      	mov	lr, r3
 8002e62:	4770      	bx	lr

08002e64 <_fini>:
 8002e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e66:	bf00      	nop
 8002e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e6a:	bc08      	pop	{r3}
 8002e6c:	469e      	mov	lr, r3
 8002e6e:	4770      	bx	lr

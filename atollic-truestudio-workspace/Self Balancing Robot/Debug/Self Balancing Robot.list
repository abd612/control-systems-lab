
C:\Documents\Workspaces\Atollic Workspace\Self Balancing Robot\Debug\Self Balancing Robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003298  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003420  08003420  00013420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800346c  0800346c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000058  20000000  08003470  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
  7 .bss          0000017c  20000058  20000058  00020058  2**3
                  ALLOC
  8 ._user_heap_stack 00000200  200001d4  200001d4  00020058  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000aabe  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001ac3  00000000  00000000  0002ab46  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c58  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000b60  00000000  00000000  0002d268  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004279  00000000  00000000  0002ddc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004069  00000000  00000000  00032041  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000360aa  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003758  00000000  00000000  00036128  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00039880  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000058 	.word	0x20000058
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003408 	.word	0x08003408

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000005c 	.word	0x2000005c
 80001c4:	08003408 	.word	0x08003408

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <DMA_Init+0xac>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000ae6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000af2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	6a1b      	ldr	r3, [r3, #32]
 8000af8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000afe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b04:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000b0a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b10:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f023 0307 	bic.w	r3, r3, #7
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4313      	orrs	r3, r2
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	691a      	ldr	r2, [r3, #16]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689a      	ldr	r2, [r3, #8]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60da      	str	r2, [r3, #12]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	f01c803f 	.word	0xf01c803f

08000b6c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d006      	beq.n	8000b8c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f043 0201 	orr.w	r2, r3, #1
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000b8a:	e005      	b.n	8000b98 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	f023 0201 	bic.w	r2, r3, #1
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	601a      	str	r2, [r3, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	73fb      	strb	r3, [r7, #15]
 8000bc0:	e001      	b.n	8000bc6 <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000bde:	2300      	movs	r3, #0
 8000be0:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <DMA_GetFlagStatus+0x6c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d802      	bhi.n	8000bf4 <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <DMA_GetFlagStatus+0x70>)
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	e001      	b.n	8000bf8 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000bf4:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <DMA_GetFlagStatus+0x74>)
 8000bf6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e002      	b.n	8000c10 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c16:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c1a:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000c1c:	68fa      	ldr	r2, [r7, #12]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000c26:	2301      	movs	r3, #1
 8000c28:	75fb      	strb	r3, [r7, #23]
 8000c2a:	e001      	b.n	8000c30 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	371c      	adds	r7, #28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	4002640f 	.word	0x4002640f
 8000c44:	40026000 	.word	0x40026000
 8000c48:	40026400 	.word	0x40026400

08000c4c <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <DMA_ClearFlag+0x50>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d802      	bhi.n	8000c64 <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <DMA_ClearFlag+0x54>)
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	e001      	b.n	8000c68 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000c64:	4b0f      	ldr	r3, [pc, #60]	; (8000ca4 <DMA_ClearFlag+0x58>)
 8000c66:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d007      	beq.n	8000c82 <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c78:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000c80:	e006      	b.n	8000c90 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000c88:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	6093      	str	r3, [r2, #8]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	4002640f 	.word	0x4002640f
 8000ca0:	40026000 	.word	0x40026000
 8000ca4:	40026400 	.word	0x40026400

08000ca8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
 8000cc2:	e076      	b.n	8000db2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d165      	bne.n	8000dac <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	2103      	movs	r1, #3
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	43db      	mvns	r3, r3
 8000cf0:	401a      	ands	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	791b      	ldrb	r3, [r3, #4]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa01 f303 	lsl.w	r3, r1, r3
 8000d08:	431a      	orrs	r2, r3
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	791b      	ldrb	r3, [r3, #4]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d003      	beq.n	8000d1e <GPIO_Init+0x76>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	791b      	ldrb	r3, [r3, #4]
 8000d1a:	2b02      	cmp	r3, #2
 8000d1c:	d12e      	bne.n	8000d7c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	689a      	ldr	r2, [r3, #8]
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	2103      	movs	r1, #3
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	401a      	ands	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689a      	ldr	r2, [r3, #8]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	795b      	ldrb	r3, [r3, #5]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	4619      	mov	r1, r3
 8000d56:	2301      	movs	r3, #1
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	683a      	ldr	r2, [r7, #0]
 8000d68:	7992      	ldrb	r2, [r2, #6]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	b292      	uxth	r2, r2
 8000d76:	431a      	orrs	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2103      	movs	r1, #3
 8000d88:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	68da      	ldr	r2, [r3, #12]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	79db      	ldrb	r3, [r3, #7]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa01 f303 	lsl.w	r3, r1, r3
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	3301      	adds	r3, #1
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b0f      	cmp	r3, #15
 8000db6:	d985      	bls.n	8000cc4 <GPIO_Init+0x1c>
    }
  }
}
 8000db8:	bf00      	nop
 8000dba:	371c      	adds	r7, #28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000ddc:	787a      	ldrb	r2, [r7, #1]
 8000dde:	887b      	ldrh	r3, [r7, #2]
 8000de0:	f003 0307 	and.w	r3, r3, #7
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	08db      	lsrs	r3, r3, #3
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3208      	adds	r2, #8
 8000e00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e04:	887b      	ldrh	r3, [r7, #2]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e12:	43db      	mvns	r3, r3
 8000e14:	ea02 0103 	and.w	r1, r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f100 0208 	add.w	r2, r0, #8
 8000e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	08db      	lsrs	r3, r3, #3
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	461a      	mov	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3208      	adds	r2, #8
 8000e2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	08db      	lsrs	r3, r3, #3
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3208      	adds	r2, #8
 8000e44:	68b9      	ldr	r1, [r7, #8]
 8000e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000e4a:	bf00      	nop
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
	...

08000e58 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e66:	2300      	movs	r3, #0
 8000e68:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000e6e:	4b57      	ldr	r3, [pc, #348]	; (8000fcc <I2C_Init+0x174>)
 8000e70:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	889b      	ldrh	r3, [r3, #4]
 8000e76:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 8000e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e7e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f8d9 	bl	800103c <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <I2C_Init+0x178>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	0c9b      	lsrs	r3, r3, #18
 8000e98:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000e9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ea6:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	881b      	ldrh	r3, [r3, #0]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	f023 0301 	bic.w	r3, r3, #1
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a44      	ldr	r2, [pc, #272]	; (8000fd4 <I2C_Init+0x17c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d815      	bhi.n	8000ef2 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000ed4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d801      	bhi.n	8000ede <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000eda:	2304      	movs	r3, #4
 8000edc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000ede:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000ee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000ee8:	3301      	adds	r3, #1
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	841a      	strh	r2, [r3, #32]
 8000ef0:	e040      	b.n	8000f74 <I2C_Init+0x11c>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	88db      	ldrh	r3, [r3, #6]
 8000ef6:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d109      	bne.n	8000f12 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	4613      	mov	r3, r2
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	4413      	add	r3, r2
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000f10:	e00e      	b.n	8000f30 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009a      	lsls	r2, r3, #2
 8000f1e:	4413      	add	r3, r2
 8000f20:	69fa      	ldr	r2, [r7, #28]
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000f28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8000f30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d103      	bne.n	8000f42 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f3c:	f043 0301 	orr.w	r3, r3, #1
 8000f40:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 8000f42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f52:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8000f54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <I2C_Init+0x180>)
 8000f60:	fb82 1203 	smull	r1, r2, r2, r3
 8000f64:	1192      	asrs	r2, r2, #6
 8000f66:	17db      	asrs	r3, r3, #31
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f78:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f92:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000f96:	f023 0302 	bic.w	r3, r3, #2
 8000f9a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	889a      	ldrh	r2, [r3, #4]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	895b      	ldrh	r3, [r3, #10]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000faa:	4313      	orrs	r3, r2
 8000fac:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000fb2:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	899a      	ldrh	r2, [r3, #12]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	891b      	ldrh	r3, [r3, #8]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	811a      	strh	r2, [r3, #8]
}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	007a1200 	.word	0x007a1200
 8000fd0:	431bde83 	.word	0x431bde83
 8000fd4:	000186a0 	.word	0x000186a0
 8000fd8:	10624dd3 	.word	0x10624dd3

08000fdc <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	8a9b      	ldrh	r3, [r3, #20]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	8b1b      	ldrh	r3, [r3, #24]
 8001002:	b29b      	uxth	r3, r3
 8001004:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	041b      	lsls	r3, r3, #16
 800100a:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	4313      	orrs	r3, r2
 8001012:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001016:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	401a      	ands	r2, r3
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	429a      	cmp	r2, r3
 8001022:	d102      	bne.n	800102a <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001024:	2301      	movs	r3, #1
 8001026:	75fb      	strb	r3, [r7, #23]
 8001028:	e001      	b.n	800102e <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800102e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001030:	4618      	mov	r0, r3
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	2302      	movs	r3, #2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	2302      	movs	r3, #2
 800105a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800105c:	4b47      	ldr	r3, [pc, #284]	; (800117c <RCC_GetClocksFreq+0x140>)
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 030c 	and.w	r3, r3, #12
 8001064:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b04      	cmp	r3, #4
 800106a:	d007      	beq.n	800107c <RCC_GetClocksFreq+0x40>
 800106c:	2b08      	cmp	r3, #8
 800106e:	d009      	beq.n	8001084 <RCC_GetClocksFreq+0x48>
 8001070:	2b00      	cmp	r3, #0
 8001072:	d13d      	bne.n	80010f0 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a42      	ldr	r2, [pc, #264]	; (8001180 <RCC_GetClocksFreq+0x144>)
 8001078:	601a      	str	r2, [r3, #0]
      break;
 800107a:	e03d      	b.n	80010f8 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a41      	ldr	r2, [pc, #260]	; (8001184 <RCC_GetClocksFreq+0x148>)
 8001080:	601a      	str	r2, [r3, #0]
      break;
 8001082:	e039      	b.n	80010f8 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001084:	4b3d      	ldr	r3, [pc, #244]	; (800117c <RCC_GetClocksFreq+0x140>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	0d9b      	lsrs	r3, r3, #22
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001090:	4b3a      	ldr	r3, [pc, #232]	; (800117c <RCC_GetClocksFreq+0x140>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001098:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00c      	beq.n	80010ba <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80010a0:	4a38      	ldr	r2, [pc, #224]	; (8001184 <RCC_GetClocksFreq+0x148>)
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a8:	4a34      	ldr	r2, [pc, #208]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010aa:	6852      	ldr	r2, [r2, #4]
 80010ac:	0992      	lsrs	r2, r2, #6
 80010ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	e00b      	b.n	80010d2 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010ba:	4a31      	ldr	r2, [pc, #196]	; (8001180 <RCC_GetClocksFreq+0x144>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4a2e      	ldr	r2, [pc, #184]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010c4:	6852      	ldr	r2, [r2, #4]
 80010c6:	0992      	lsrs	r2, r2, #6
 80010c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010d2:	4b2a      	ldr	r3, [pc, #168]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	0c1b      	lsrs	r3, r3, #16
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	3301      	adds	r3, #1
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
      break;
 80010ee:	e003      	b.n	80010f8 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a23      	ldr	r2, [pc, #140]	; (8001180 <RCC_GetClocksFreq+0x144>)
 80010f4:	601a      	str	r2, [r3, #0]
      break;
 80010f6:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <RCC_GetClocksFreq+0x140>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001100:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	091b      	lsrs	r3, r3, #4
 8001106:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001108:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <RCC_GetClocksFreq+0x14c>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
 8001112:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	40da      	lsrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <RCC_GetClocksFreq+0x140>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001128:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	0a9b      	lsrs	r3, r3, #10
 800112e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <RCC_GetClocksFreq+0x14c>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <RCC_GetClocksFreq+0x140>)
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001150:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	0b5b      	lsrs	r3, r3, #13
 8001156:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <RCC_GetClocksFreq+0x14c>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	40da      	lsrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	60da      	str	r2, [r3, #12]
}
 8001170:	bf00      	nop
 8001172:	3724      	adds	r7, #36	; 0x24
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40023800 	.word	0x40023800
 8001180:	00f42400 	.word	0x00f42400
 8001184:	007a1200 	.word	0x007a1200
 8001188:	20000000 	.word	0x20000000

0800118c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800119e:	490a      	ldr	r1, [pc, #40]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011a0:	4b09      	ldr	r3, [pc, #36]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011aa:	e006      	b.n	80011ba <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011ac:	4906      	ldr	r1, [pc, #24]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011ae:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4013      	ands	r3, r2
 80011b8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800

080011cc <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d006      	beq.n	80011ec <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80011de:	490a      	ldr	r1, [pc, #40]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80011ea:	e006      	b.n	80011fa <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <RCC_APB1PeriphClockCmd+0x3c>)
 80011f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	4013      	ands	r3, r2
 80011f8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800

0800120c <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	819a      	strh	r2, [r3, #12]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800122a:	b480      	push	{r7}
 800122c:	b085      	sub	sp, #20
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	460b      	mov	r3, r1
 8001234:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001236:	2300      	movs	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	891b      	ldrh	r3, [r3, #8]
 800123e:	b29a      	uxth	r2, r3
 8001240:	887b      	ldrh	r3, [r7, #2]
 8001242:	4013      	ands	r3, r2
 8001244:	b29b      	uxth	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d002      	beq.n	8001250 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	e001      	b.n	8001254 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8001254:	7bfb      	ldrb	r3, [r7, #15]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	881b      	ldrh	r3, [r3, #0]
 8001276:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a29      	ldr	r2, [pc, #164]	; (8001320 <TIM_TimeBaseInit+0xbc>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d013      	beq.n	80012a8 <TIM_TimeBaseInit+0x44>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a28      	ldr	r2, [pc, #160]	; (8001324 <TIM_TimeBaseInit+0xc0>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d00f      	beq.n	80012a8 <TIM_TimeBaseInit+0x44>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800128e:	d00b      	beq.n	80012a8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a25      	ldr	r2, [pc, #148]	; (8001328 <TIM_TimeBaseInit+0xc4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d007      	beq.n	80012a8 <TIM_TimeBaseInit+0x44>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a24      	ldr	r2, [pc, #144]	; (800132c <TIM_TimeBaseInit+0xc8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d003      	beq.n	80012a8 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a23      	ldr	r2, [pc, #140]	; (8001330 <TIM_TimeBaseInit+0xcc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d108      	bne.n	80012ba <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80012a8:	89fb      	ldrh	r3, [r7, #14]
 80012aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012ae:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	885a      	ldrh	r2, [r3, #2]
 80012b4:	89fb      	ldrh	r3, [r7, #14]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a1d      	ldr	r2, [pc, #116]	; (8001334 <TIM_TimeBaseInit+0xd0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00c      	beq.n	80012dc <TIM_TimeBaseInit+0x78>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a1c      	ldr	r2, [pc, #112]	; (8001338 <TIM_TimeBaseInit+0xd4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d008      	beq.n	80012dc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012d0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	891a      	ldrh	r2, [r3, #8]
 80012d6:	89fb      	ldrh	r3, [r7, #14]
 80012d8:	4313      	orrs	r3, r2
 80012da:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	89fa      	ldrh	r2, [r7, #14]
 80012e0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <TIM_TimeBaseInit+0xbc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d003      	beq.n	8001302 <TIM_TimeBaseInit+0x9e>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a09      	ldr	r2, [pc, #36]	; (8001324 <TIM_TimeBaseInit+0xc0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d104      	bne.n	800130c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	7a9b      	ldrb	r3, [r3, #10]
 8001306:	b29a      	uxth	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	829a      	strh	r2, [r3, #20]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40010000 	.word	0x40010000
 8001324:	40010400 	.word	0x40010400
 8001328:	40000400 	.word	0x40000400
 800132c:	40000800 	.word	0x40000800
 8001330:	40000c00 	.word	0x40000c00
 8001334:	40001000 	.word	0x40001000
 8001338:	40001400 	.word	0x40001400

0800133c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d008      	beq.n	8001360 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	881b      	ldrh	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	b29a      	uxth	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800135e:	e007      	b.n	8001370 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800136a:	b29a      	uxth	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	801a      	strh	r2, [r3, #0]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d008      	beq.n	80013a0 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	b29b      	uxth	r3, r3
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	b29a      	uxth	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800139e:	e007      	b.n	80013b0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	881b      	ldrh	r3, [r3, #0]
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f023 0301 	bic.w	r3, r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	801a      	strh	r2, [r3, #0]
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	817b      	strh	r3, [r7, #10]
 80013ca:	2300      	movs	r3, #0
 80013cc:	81fb      	strh	r3, [r7, #14]
 80013ce:	2300      	movs	r3, #0
 80013d0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	8c1b      	ldrh	r3, [r3, #32]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	b29a      	uxth	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	8c1b      	ldrh	r3, [r3, #32]
 80013e6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	889b      	ldrh	r3, [r3, #4]
 80013ec:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	8b1b      	ldrh	r3, [r3, #24]
 80013f2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80013f4:	897b      	ldrh	r3, [r7, #10]
 80013f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013fa:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 80013fc:	897b      	ldrh	r3, [r7, #10]
 80013fe:	f023 0303 	bic.w	r3, r3, #3
 8001402:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	881a      	ldrh	r2, [r3, #0]
 8001408:	897b      	ldrh	r3, [r7, #10]
 800140a:	4313      	orrs	r3, r2
 800140c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	f023 0302 	bic.w	r3, r3, #2
 8001414:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	899a      	ldrh	r2, [r3, #12]
 800141a:	89fb      	ldrh	r3, [r7, #14]
 800141c:	4313      	orrs	r3, r2
 800141e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	885a      	ldrh	r2, [r3, #2]
 8001424:	89fb      	ldrh	r3, [r7, #14]
 8001426:	4313      	orrs	r3, r2
 8001428:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1e      	ldr	r2, [pc, #120]	; (80014a8 <TIM_OC1Init+0xec>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d003      	beq.n	800143a <TIM_OC1Init+0x7e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <TIM_OC1Init+0xf0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <TIM_OC1Init+0xc6>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	f023 0308 	bic.w	r3, r3, #8
 8001440:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	89da      	ldrh	r2, [r3, #14]
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	4313      	orrs	r3, r2
 800144a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800144c:	89fb      	ldrh	r3, [r7, #14]
 800144e:	f023 0304 	bic.w	r3, r3, #4
 8001452:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	889a      	ldrh	r2, [r3, #4]
 8001458:	89fb      	ldrh	r3, [r7, #14]
 800145a:	4313      	orrs	r3, r2
 800145c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800145e:	89bb      	ldrh	r3, [r7, #12]
 8001460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001464:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 8001466:	89bb      	ldrh	r3, [r7, #12]
 8001468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800146c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	8a1a      	ldrh	r2, [r3, #16]
 8001472:	89bb      	ldrh	r3, [r7, #12]
 8001474:	4313      	orrs	r3, r2
 8001476:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	8a5a      	ldrh	r2, [r3, #18]
 800147c:	89bb      	ldrh	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	89ba      	ldrh	r2, [r7, #12]
 8001486:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	897a      	ldrh	r2, [r7, #10]
 800148c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	89fa      	ldrh	r2, [r7, #14]
 800149a:	841a      	strh	r2, [r3, #32]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40010000 	.word	0x40010000
 80014ac:	40010400 	.word	0x40010400

080014b0 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	817b      	strh	r3, [r7, #10]
 80014be:	2300      	movs	r3, #0
 80014c0:	81fb      	strh	r3, [r7, #14]
 80014c2:	2300      	movs	r3, #0
 80014c4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	8c1b      	ldrh	r3, [r3, #32]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	f023 0310 	bic.w	r3, r3, #16
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8c1b      	ldrh	r3, [r3, #32]
 80014da:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	889b      	ldrh	r3, [r3, #4]
 80014e0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8b1b      	ldrh	r3, [r3, #24]
 80014e6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80014e8:	897b      	ldrh	r3, [r7, #10]
 80014ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014ee:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 80014f0:	897b      	ldrh	r3, [r7, #10]
 80014f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f6:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	b29a      	uxth	r2, r3
 8001500:	897b      	ldrh	r3, [r7, #10]
 8001502:	4313      	orrs	r3, r2
 8001504:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	f023 0320 	bic.w	r3, r3, #32
 800150c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	899b      	ldrh	r3, [r3, #12]
 8001512:	011b      	lsls	r3, r3, #4
 8001514:	b29a      	uxth	r2, r3
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	4313      	orrs	r3, r2
 800151a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	885b      	ldrh	r3, [r3, #2]
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	b29a      	uxth	r2, r3
 8001524:	89fb      	ldrh	r3, [r7, #14]
 8001526:	4313      	orrs	r3, r2
 8001528:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a22      	ldr	r2, [pc, #136]	; (80015b8 <TIM_OC2Init+0x108>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d003      	beq.n	800153a <TIM_OC2Init+0x8a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a21      	ldr	r2, [pc, #132]	; (80015bc <TIM_OC2Init+0x10c>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <TIM_OC2Init+0xe2>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001540:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	89db      	ldrh	r3, [r3, #14]
 8001546:	011b      	lsls	r3, r3, #4
 8001548:	b29a      	uxth	r2, r3
 800154a:	89fb      	ldrh	r3, [r7, #14]
 800154c:	4313      	orrs	r3, r2
 800154e:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8001550:	89fb      	ldrh	r3, [r7, #14]
 8001552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001556:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	889b      	ldrh	r3, [r3, #4]
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	b29a      	uxth	r2, r3
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	4313      	orrs	r3, r2
 8001564:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800156c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800156e:	89bb      	ldrh	r3, [r7, #12]
 8001570:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001574:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	8a1b      	ldrh	r3, [r3, #16]
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	b29a      	uxth	r2, r3
 800157e:	89bb      	ldrh	r3, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	8a5b      	ldrh	r3, [r3, #18]
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	b29a      	uxth	r2, r3
 800158c:	89bb      	ldrh	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	89ba      	ldrh	r2, [r7, #12]
 8001596:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	897a      	ldrh	r2, [r7, #10]
 800159c:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	89fa      	ldrh	r2, [r7, #14]
 80015aa:	841a      	strh	r2, [r3, #32]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40010000 	.word	0x40010000
 80015bc:	40010400 	.word	0x40010400

080015c0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	817b      	strh	r3, [r7, #10]
 80015ce:	2300      	movs	r3, #0
 80015d0:	81fb      	strh	r3, [r7, #14]
 80015d2:	2300      	movs	r3, #0
 80015d4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8c1b      	ldrh	r3, [r3, #32]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	8c1b      	ldrh	r3, [r3, #32]
 80015ea:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	8b9b      	ldrh	r3, [r3, #28]
 80015f6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80015f8:	897b      	ldrh	r3, [r7, #10]
 80015fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015fe:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001600:	897b      	ldrh	r3, [r7, #10]
 8001602:	f023 0303 	bic.w	r3, r3, #3
 8001606:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	881a      	ldrh	r2, [r3, #0]
 800160c:	897b      	ldrh	r3, [r7, #10]
 800160e:	4313      	orrs	r3, r2
 8001610:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001618:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	899b      	ldrh	r3, [r3, #12]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b29a      	uxth	r2, r3
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	4313      	orrs	r3, r2
 8001626:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	885b      	ldrh	r3, [r3, #2]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b29a      	uxth	r2, r3
 8001630:	89fb      	ldrh	r3, [r7, #14]
 8001632:	4313      	orrs	r3, r2
 8001634:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <TIM_OC3Init+0x104>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d003      	beq.n	8001646 <TIM_OC3Init+0x86>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a21      	ldr	r2, [pc, #132]	; (80016c8 <TIM_OC3Init+0x108>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d12b      	bne.n	800169e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800164c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	89db      	ldrh	r3, [r3, #14]
 8001652:	021b      	lsls	r3, r3, #8
 8001654:	b29a      	uxth	r2, r3
 8001656:	89fb      	ldrh	r3, [r7, #14]
 8001658:	4313      	orrs	r3, r2
 800165a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001662:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	889b      	ldrh	r3, [r3, #4]
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	b29a      	uxth	r2, r3
 800166c:	89fb      	ldrh	r3, [r7, #14]
 800166e:	4313      	orrs	r3, r2
 8001670:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001672:	89bb      	ldrh	r3, [r7, #12]
 8001674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001678:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800167a:	89bb      	ldrh	r3, [r7, #12]
 800167c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001680:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	8a1b      	ldrh	r3, [r3, #16]
 8001686:	011b      	lsls	r3, r3, #4
 8001688:	b29a      	uxth	r2, r3
 800168a:	89bb      	ldrh	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	8a5b      	ldrh	r3, [r3, #18]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	b29a      	uxth	r2, r3
 8001698:	89bb      	ldrh	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	89ba      	ldrh	r2, [r7, #12]
 80016a2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	897a      	ldrh	r2, [r7, #10]
 80016a8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	89fa      	ldrh	r2, [r7, #14]
 80016b6:	841a      	strh	r2, [r3, #32]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40010000 	.word	0x40010000
 80016c8:	40010400 	.word	0x40010400

080016cc <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	81bb      	strh	r3, [r7, #12]
 80016da:	2300      	movs	r3, #0
 80016dc:	817b      	strh	r3, [r7, #10]
 80016de:	2300      	movs	r3, #0
 80016e0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	8c1b      	ldrh	r3, [r3, #32]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	8c1b      	ldrh	r3, [r3, #32]
 80016f6:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	889b      	ldrh	r3, [r3, #4]
 80016fc:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8b9b      	ldrh	r3, [r3, #28]
 8001702:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800170a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800170c:	89bb      	ldrh	r3, [r7, #12]
 800170e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001712:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b29a      	uxth	r2, r3
 800171c:	89bb      	ldrh	r3, [r7, #12]
 800171e:	4313      	orrs	r3, r2
 8001720:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001722:	897b      	ldrh	r3, [r7, #10]
 8001724:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001728:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	899b      	ldrh	r3, [r3, #12]
 800172e:	031b      	lsls	r3, r3, #12
 8001730:	b29a      	uxth	r2, r3
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	4313      	orrs	r3, r2
 8001736:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	885b      	ldrh	r3, [r3, #2]
 800173c:	031b      	lsls	r3, r3, #12
 800173e:	b29a      	uxth	r2, r3
 8001740:	897b      	ldrh	r3, [r7, #10]
 8001742:	4313      	orrs	r3, r2
 8001744:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <TIM_OC4Init+0xc8>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d003      	beq.n	8001756 <TIM_OC4Init+0x8a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a11      	ldr	r2, [pc, #68]	; (8001798 <TIM_OC4Init+0xcc>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10a      	bne.n	800176c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001756:	89fb      	ldrh	r3, [r7, #14]
 8001758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800175c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	8a1b      	ldrh	r3, [r3, #16]
 8001762:	019b      	lsls	r3, r3, #6
 8001764:	b29a      	uxth	r2, r3
 8001766:	89fb      	ldrh	r3, [r7, #14]
 8001768:	4313      	orrs	r3, r2
 800176a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	89fa      	ldrh	r2, [r7, #14]
 8001770:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	89ba      	ldrh	r2, [r7, #12]
 8001776:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	897a      	ldrh	r2, [r7, #10]
 8001784:	841a      	strh	r2, [r3, #32]
}
 8001786:	bf00      	nop
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40010000 	.word	0x40010000
 8001798:	40010400 	.word	0x40010400

0800179c <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	460b      	mov	r3, r1
 80017a6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	8b1b      	ldrh	r3, [r3, #24]
 80017b0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80017b2:	89fb      	ldrh	r3, [r7, #14]
 80017b4:	f023 0308 	bic.w	r3, r3, #8
 80017b8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80017ba:	89fa      	ldrh	r2, [r7, #14]
 80017bc:	887b      	ldrh	r3, [r7, #2]
 80017be:	4313      	orrs	r3, r2
 80017c0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	89fa      	ldrh	r2, [r7, #14]
 80017c6:	831a      	strh	r2, [r3, #24]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8b1b      	ldrh	r3, [r3, #24]
 80017e8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80017f0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80017f2:	887b      	ldrh	r3, [r7, #2]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	89fa      	ldrh	r2, [r7, #14]
 8001802:	831a      	strh	r2, [r3, #24]
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	8b9b      	ldrh	r3, [r3, #28]
 8001824:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	f023 0308 	bic.w	r3, r3, #8
 800182c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800182e:	89fa      	ldrh	r2, [r7, #14]
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	4313      	orrs	r3, r2
 8001834:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	89fa      	ldrh	r2, [r7, #14]
 800183a:	839a      	strh	r2, [r3, #28]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001854:	2300      	movs	r3, #0
 8001856:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	8b9b      	ldrh	r3, [r3, #28]
 800185c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800185e:	89fb      	ldrh	r3, [r7, #14]
 8001860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001864:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	021b      	lsls	r3, r3, #8
 800186a:	b29a      	uxth	r2, r3
 800186c:	89fb      	ldrh	r3, [r7, #14]
 800186e:	4313      	orrs	r3, r2
 8001870:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	89fa      	ldrh	r2, [r7, #14]
 8001876:	839a      	strh	r2, [r3, #28]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	4a09      	ldr	r2, [pc, #36]	; (80018b8 <STM_EVAL_LEDToggle+0x34>)
 8001892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001896:	79fa      	ldrb	r2, [r7, #7]
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <STM_EVAL_LEDToggle+0x34>)
 800189a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800189e:	6952      	ldr	r2, [r2, #20]
 80018a0:	79f9      	ldrb	r1, [r7, #7]
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <STM_EVAL_LEDToggle+0x38>)
 80018a4:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
 80018a8:	404a      	eors	r2, r1
 80018aa:	615a      	str	r2, [r3, #20]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	20000010 	.word	0x20000010
 80018bc:	08003420 	.word	0x08003420

080018c0 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 80018c4:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	4b38      	ldr	r3, [pc, #224]	; (80019ac <Audio_MAL_IRQHandler+0xec>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4619      	mov	r1, r3
 80018ce:	4610      	mov	r0, r2
 80018d0:	f7ff f980 	bl	8000bd4 <DMA_GetFlagStatus>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d064      	beq.n	80019a4 <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 80018da:	4b35      	ldr	r3, [pc, #212]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d04c      	beq.n	800197c <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 80018e2:	bf00      	nop
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff f95b 	bl	8000ba4 <DMA_GetCmdStatus>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f7      	bne.n	80018e4 <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b2c      	ldr	r3, [pc, #176]	; (80019ac <Audio_MAL_IRQHandler+0xec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4619      	mov	r1, r3
 80018fe:	4610      	mov	r0, r2
 8001900:	f7ff f9a4 	bl	8000c4c <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <Audio_MAL_IRQHandler+0xf4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <Audio_MAL_IRQHandler+0xf8>)
 800190c:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 800190e:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001916:	4293      	cmp	r3, r2
 8001918:	bf28      	it	cs
 800191a:	4613      	movcs	r3, r2
 800191c:	4a26      	ldr	r2, [pc, #152]	; (80019b8 <Audio_MAL_IRQHandler+0xf8>)
 800191e:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4924      	ldr	r1, [pc, #144]	; (80019b8 <Audio_MAL_IRQHandler+0xf8>)
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f8c8 	bl	8000abc <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f91a 	bl	8000b6c <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8001938:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <Audio_MAL_IRQHandler+0xf4>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	4b1c      	ldr	r3, [pc, #112]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001944:	d203      	bcs.n	800194e <Audio_MAL_IRQHandler+0x8e>
 8001946:	4b1a      	ldr	r3, [pc, #104]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	e000      	b.n	8001950 <Audio_MAL_IRQHandler+0x90>
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <Audio_MAL_IRQHandler+0xfc>)
 8001950:	4413      	add	r3, r2
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <Audio_MAL_IRQHandler+0xf4>)
 8001954:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001962:	428b      	cmp	r3, r1
 8001964:	bf28      	it	cs
 8001966:	460b      	movcs	r3, r1
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a11      	ldr	r2, [pc, #68]	; (80019b0 <Audio_MAL_IRQHandler+0xf0>)
 800196c:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2101      	movs	r1, #1
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff f8f9 	bl	8000b6c <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 800197a:	e013      	b.n	80019a4 <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f8f2 	bl	8000b6c <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <Audio_MAL_IRQHandler+0xe8>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <Audio_MAL_IRQHandler+0xec>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f7ff f95a 	bl	8000c4c <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <Audio_MAL_IRQHandler+0xf4>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 fb0a 	bl	8001fb8 <EVAL_AUDIO_TransferComplete_CallBack>
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000024 	.word	0x20000024
 80019ac:	20000028 	.word	0x20000028
 80019b0:	20000020 	.word	0x20000020
 80019b4:	20000128 	.word	0x20000128
 80019b8:	20000168 	.word	0x20000168
 80019bc:	0001fffe 	.word	0x0001fffe

080019c0 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 80019c4:	f7ff ff7c 	bl	80018c0 <Audio_MAL_IRQHandler>
}
 80019c8:	bf00      	nop
 80019ca:	bd80      	pop	{r7, pc}

080019cc <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 80019d0:	2102      	movs	r1, #2
 80019d2:	4807      	ldr	r0, [pc, #28]	; (80019f0 <SPI3_IRQHandler+0x24>)
 80019d4:	f7ff fc29 	bl	800122a <SPI_I2S_GetFlagStatus>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d006      	beq.n	80019ec <SPI3_IRQHandler+0x20>
  { 
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 80019de:	f000 faf6 	bl	8001fce <EVAL_AUDIO_GetSampleCallBack>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4619      	mov	r1, r3
 80019e6:	4802      	ldr	r0, [pc, #8]	; (80019f0 <SPI3_IRQHandler+0x24>)
 80019e8:	f7ff fc10 	bl	800120c <SPI_I2S_SendData>
  }
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40003c00 	.word	0x40003c00

080019f4 <Delayms>:
 * @param  Delays for specific amount of milliseconds
 * @param  millis: Time in milliseconds for delay
 * @retval None
 * @note   Declared as static inline
 */
static __INLINE void Delayms(uint32_t millis) {
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	volatile uint32_t timer = TM_Time;
 80019fc:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <Delayms+0x50>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60bb      	str	r3, [r7, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a02:	f3ef 8305 	mrs	r3, IPSR
 8001a06:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a08:	68fb      	ldr	r3, [r7, #12]

	/* Called from thread */
	if (!__get_IPSR()) {
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d111      	bne.n	8001a32 <Delayms+0x3e>
		/* Wait for timer to count milliseconds */
		while ((TM_Time - timer) < millis) {
 8001a0e:	bf00      	nop
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <Delayms+0x50>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d3f8      	bcc.n	8001a10 <Delayms+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				millis--;
			}
		}
	}
}
 8001a1e:	e00b      	b.n	8001a38 <Delayms+0x44>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <Delayms+0x54>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <Delayms+0x3e>
				millis--;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	607b      	str	r3, [r7, #4]
		while (millis) {
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f3      	bne.n	8001a20 <Delayms+0x2c>
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	200000e8 	.word	0x200000e8
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <main>:
int16_t GZ;
double taaan = 0;
TM_MPU6050_t data;

int main(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	PWMInit();
 8001a50:	f000 fa2e 	bl	8001eb0 <PWMInit>
	TM_DELAY_Init();
 8001a54:	f000 fc8a 	bl	800236c <TM_DELAY_Init>
	TM_MPU6050_Init(&data, TM_MPU6050_Device_0, TM_MPU6050_Accelerometer_4G,TM_MPU6050_Gyroscope_500s);
 8001a58:	2301      	movs	r3, #1
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <main+0x28>)
 8001a60:	f001 f8fa 	bl	8002c58 <TM_MPU6050_Init>

	while (1)
	{
		AngleMeasure();
 8001a64:	f000 f93c 	bl	8001ce0 <AngleMeasure>
		PIDCalculate();
 8001a68:	f000 f806 	bl	8001a78 <PIDCalculate>
		PWMSet();
 8001a6c:	f000 f8a2 	bl	8001bb4 <PWMSet>
		AngleMeasure();
 8001a70:	e7f8      	b.n	8001a64 <main+0x18>
 8001a72:	bf00      	nop
 8001a74:	200001ac 	.word	0x200001ac

08001a78 <PIDCalculate>:
	}
}

void PIDCalculate(void)
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
	Error = AngleRef - AngleComp;
 8001a7c:	4b42      	ldr	r3, [pc, #264]	; (8001b88 <PIDCalculate+0x110>)
 8001a7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a82:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <PIDCalculate+0x114>)
 8001a84:	cb18      	ldmia	r3, {r3, r4}
 8001a86:	461a      	mov	r2, r3
 8001a88:	4623      	mov	r3, r4
 8001a8a:	f7fe fba1 	bl	80001d0 <__aeabi_dsub>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	460c      	mov	r4, r1
 8001a92:	4a3f      	ldr	r2, [pc, #252]	; (8001b90 <PIDCalculate+0x118>)
 8001a94:	e882 0018 	stmia.w	r2, {r3, r4}
	DelT = 0.01;
 8001a98:	4a3e      	ldr	r2, [pc, #248]	; (8001b94 <PIDCalculate+0x11c>)
 8001a9a:	a439      	add	r4, pc, #228	; (adr r4, 8001b80 <PIDCalculate+0x108>)
 8001a9c:	cc18      	ldmia	r4, {r3, r4}
 8001a9e:	e882 0018 	stmia.w	r2, {r3, r4}

	IntError += (Error * DelT);
 8001aa2:	4b3b      	ldr	r3, [pc, #236]	; (8001b90 <PIDCalculate+0x118>)
 8001aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa8:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <PIDCalculate+0x11c>)
 8001aaa:	cb18      	ldmia	r3, {r3, r4}
 8001aac:	461a      	mov	r2, r3
 8001aae:	4623      	mov	r3, r4
 8001ab0:	f7fe fd42 	bl	8000538 <__aeabi_dmul>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	460c      	mov	r4, r1
 8001ab8:	4618      	mov	r0, r3
 8001aba:	4621      	mov	r1, r4
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <PIDCalculate+0x120>)
 8001abe:	cb18      	ldmia	r3, {r3, r4}
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	f7fe fb86 	bl	80001d4 <__adddf3>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	460c      	mov	r4, r1
 8001acc:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <PIDCalculate+0x120>)
 8001ace:	e882 0018 	stmia.w	r2, {r3, r4}
	DerError = (Error - PrevError) / DelT;
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <PIDCalculate+0x118>)
 8001ad4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ad8:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <PIDCalculate+0x124>)
 8001ada:	cb18      	ldmia	r3, {r3, r4}
 8001adc:	461a      	mov	r2, r3
 8001ade:	4623      	mov	r3, r4
 8001ae0:	f7fe fb76 	bl	80001d0 <__aeabi_dsub>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	4b29      	ldr	r3, [pc, #164]	; (8001b94 <PIDCalculate+0x11c>)
 8001aee:	cb18      	ldmia	r3, {r3, r4}
 8001af0:	461a      	mov	r2, r3
 8001af2:	4623      	mov	r3, r4
 8001af4:	f7fe fe4a 	bl	800078c <__aeabi_ddiv>
 8001af8:	4603      	mov	r3, r0
 8001afa:	460c      	mov	r4, r1
 8001afc:	4a28      	ldr	r2, [pc, #160]	; (8001ba0 <PIDCalculate+0x128>)
 8001afe:	e882 0018 	stmia.w	r2, {r3, r4}
	PID = (Kp * Error) + (Ki * IntError) + (Kd * DerError);
 8001b02:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <PIDCalculate+0x12c>)
 8001b04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b08:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <PIDCalculate+0x118>)
 8001b0a:	cb18      	ldmia	r3, {r3, r4}
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4623      	mov	r3, r4
 8001b10:	f7fe fd12 	bl	8000538 <__aeabi_dmul>
 8001b14:	4603      	mov	r3, r0
 8001b16:	460c      	mov	r4, r1
 8001b18:	461d      	mov	r5, r3
 8001b1a:	4626      	mov	r6, r4
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <PIDCalculate+0x130>)
 8001b1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b22:	4b1d      	ldr	r3, [pc, #116]	; (8001b98 <PIDCalculate+0x120>)
 8001b24:	cb18      	ldmia	r3, {r3, r4}
 8001b26:	461a      	mov	r2, r3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	f7fe fd05 	bl	8000538 <__aeabi_dmul>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	460c      	mov	r4, r1
 8001b32:	461a      	mov	r2, r3
 8001b34:	4623      	mov	r3, r4
 8001b36:	4628      	mov	r0, r5
 8001b38:	4631      	mov	r1, r6
 8001b3a:	f7fe fb4b 	bl	80001d4 <__adddf3>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460c      	mov	r4, r1
 8001b42:	461d      	mov	r5, r3
 8001b44:	4626      	mov	r6, r4
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <PIDCalculate+0x134>)
 8001b48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <PIDCalculate+0x128>)
 8001b4e:	cb18      	ldmia	r3, {r3, r4}
 8001b50:	461a      	mov	r2, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	f7fe fcf0 	bl	8000538 <__aeabi_dmul>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4623      	mov	r3, r4
 8001b60:	4628      	mov	r0, r5
 8001b62:	4631      	mov	r1, r6
 8001b64:	f7fe fb36 	bl	80001d4 <__adddf3>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <PIDCalculate+0x138>)
 8001b6e:	e882 0018 	stmia.w	r2, {r3, r4}

	PrevError = Error;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <PIDCalculate+0x118>)
 8001b74:	cb18      	ldmia	r3, {r3, r4}
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <PIDCalculate+0x124>)
 8001b78:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8001b7c:	bf00      	nop
 8001b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b80:	47ae147b 	.word	0x47ae147b
 8001b84:	3f847ae1 	.word	0x3f847ae1
 8001b88:	20000090 	.word	0x20000090
 8001b8c:	20000088 	.word	0x20000088
 8001b90:	200000a0 	.word	0x200000a0
 8001b94:	200000c8 	.word	0x200000c8
 8001b98:	200000b0 	.word	0x200000b0
 8001b9c:	200000a8 	.word	0x200000a8
 8001ba0:	200000b8 	.word	0x200000b8
 8001ba4:	20000040 	.word	0x20000040
 8001ba8:	200000d0 	.word	0x200000d0
 8001bac:	200000d8 	.word	0x200000d8
 8001bb0:	200000c0 	.word	0x200000c0

08001bb4 <PWMSet>:

void PWMSet(void)
{
 8001bb4:	b598      	push	{r3, r4, r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	PWM = (MaxPWM * PID) / AngleMax;
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <PWMSet+0xb8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fc55 	bl	800046c <__aeabi_i2d>
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <PWMSet+0xbc>)
 8001bc4:	cb18      	ldmia	r3, {r3, r4}
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4623      	mov	r3, r4
 8001bca:	f7fe fcb5 	bl	8000538 <__aeabi_dmul>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <PWMSet+0xc0>)
 8001bd8:	cb18      	ldmia	r3, {r3, r4}
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4623      	mov	r3, r4
 8001bde:	f7fe fdd5 	bl	800078c <__aeabi_ddiv>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4618      	mov	r0, r3
 8001be8:	4621      	mov	r1, r4
 8001bea:	f7fe ff3f 	bl	8000a6c <__aeabi_d2iz>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <PWMSet+0xc4>)
 8001bf2:	601a      	str	r2, [r3, #0]
	if (PWM > MaxPWM) PWM = MaxPWM;
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <PWMSet+0xc4>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <PWMSet+0xb8>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	dd03      	ble.n	8001c08 <PWMSet+0x54>
 8001c00:	4b1a      	ldr	r3, [pc, #104]	; (8001c6c <PWMSet+0xb8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <PWMSet+0xc4>)
 8001c06:	6013      	str	r3, [r2, #0]
	if (PWM < (-1)*MaxPWM) PWM = (-1)*MaxPWM;
 8001c08:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <PWMSet+0xb8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	425a      	negs	r2, r3
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <PWMSet+0xc4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dd04      	ble.n	8001c20 <PWMSet+0x6c>
 8001c16:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <PWMSet+0xb8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	4a16      	ldr	r2, [pc, #88]	; (8001c78 <PWMSet+0xc4>)
 8001c1e:	6013      	str	r3, [r2, #0]

	if(Error > 0)
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <PWMSet+0xc8>)
 8001c22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c26:	f04f 0200 	mov.w	r2, #0
 8001c2a:	f04f 0300 	mov.w	r3, #0
 8001c2e:	f7fe ff13 	bl	8000a58 <__aeabi_dcmpgt>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <PWMSet+0x8e>
		Advance(PWM);
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <PWMSet+0xc4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 f81f 	bl	8001c80 <Advance>
	if (Error < 0)
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <PWMSet+0xc8>)
 8001c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c48:	f04f 0200 	mov.w	r2, #0
 8001c4c:	f04f 0300 	mov.w	r3, #0
 8001c50:	f7fe fee4 	bl	8000a1c <__aeabi_dcmplt>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d100      	bne.n	8001c5c <PWMSet+0xa8>
		Retreat((-1)*PWM);
}
 8001c5a:	e005      	b.n	8001c68 <PWMSet+0xb4>
		Retreat((-1)*PWM);
 8001c5c:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <PWMSet+0xc4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	425b      	negs	r3, r3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f824 	bl	8001cb0 <Retreat>
}
 8001c68:	bf00      	nop
 8001c6a:	bd98      	pop	{r3, r4, r7, pc}
 8001c6c:	20000034 	.word	0x20000034
 8001c70:	200000c0 	.word	0x200000c0
 8001c74:	20000038 	.word	0x20000038
 8001c78:	20000078 	.word	0x20000078
 8001c7c:	200000a0 	.word	0x200000a0

08001c80 <Advance>:

void Advance(int pwm)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	TIM4->CCR1 = pwm;
 8001c88:	4a08      	ldr	r2, [pc, #32]	; (8001cac <Advance+0x2c>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6353      	str	r3, [r2, #52]	; 0x34
	TIM4->CCR2 = 0;
 8001c8e:	4b07      	ldr	r3, [pc, #28]	; (8001cac <Advance+0x2c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
	TIM4->CCR3 = pwm;
 8001c94:	4a05      	ldr	r2, [pc, #20]	; (8001cac <Advance+0x2c>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	63d3      	str	r3, [r2, #60]	; 0x3c
	TIM4->CCR4 = 0;
 8001c9a:	4b04      	ldr	r3, [pc, #16]	; (8001cac <Advance+0x2c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40000800 	.word	0x40000800

08001cb0 <Retreat>:

void Retreat(int pwm)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
	TIM4->CCR1 = 0;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <Retreat+0x2c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	635a      	str	r2, [r3, #52]	; 0x34
	TIM4->CCR2 = pwm;
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <Retreat+0x2c>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6393      	str	r3, [r2, #56]	; 0x38
	TIM4->CCR3 = 0;
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <Retreat+0x2c>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM4->CCR4 = pwm;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <Retreat+0x2c>)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40000800 	.word	0x40000800

08001ce0 <AngleMeasure>:

void AngleMeasure (void)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	Delayms(10);
 8001ce4:	200a      	movs	r0, #10
 8001ce6:	f7ff fe85 	bl	80019f4 <Delayms>
	STM_EVAL_LEDToggle(LED5);
 8001cea:	2002      	movs	r0, #2
 8001cec:	f7ff fdca 	bl	8001884 <STM_EVAL_LEDToggle>
	TM_MPU6050_ReadAll(&data);
 8001cf0:	4863      	ldr	r0, [pc, #396]	; (8001e80 <AngleMeasure+0x1a0>)
 8001cf2:	f001 f86f 	bl	8002dd4 <TM_MPU6050_ReadAll>

	AX = data.Accelerometer_X;
 8001cf6:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <AngleMeasure+0x1a0>)
 8001cf8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <AngleMeasure+0x1a4>)
 8001cfe:	801a      	strh	r2, [r3, #0]
	AY = data.Accelerometer_Y;
 8001d00:	4b5f      	ldr	r3, [pc, #380]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d02:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8001d06:	4b60      	ldr	r3, [pc, #384]	; (8001e88 <AngleMeasure+0x1a8>)
 8001d08:	801a      	strh	r2, [r3, #0]
	AZ = data.Accelerometer_Z;
 8001d0a:	4b5d      	ldr	r3, [pc, #372]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d0c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8001d10:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <AngleMeasure+0x1ac>)
 8001d12:	801a      	strh	r2, [r3, #0]
	GX = data.Gyroscope_X;
 8001d14:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d16:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8001d1a:	4b5d      	ldr	r3, [pc, #372]	; (8001e90 <AngleMeasure+0x1b0>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	GY = data.Gyroscope_Y;
 8001d1e:	4b58      	ldr	r3, [pc, #352]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d20:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8001d24:	4b5b      	ldr	r3, [pc, #364]	; (8001e94 <AngleMeasure+0x1b4>)
 8001d26:	801a      	strh	r2, [r3, #0]
	GZ = data.Gyroscope_Z;
 8001d28:	4b55      	ldr	r3, [pc, #340]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d2a:	f9b3 2016 	ldrsh.w	r2, [r3, #22]
 8001d2e:	4b5a      	ldr	r3, [pc, #360]	; (8001e98 <AngleMeasure+0x1b8>)
 8001d30:	801a      	strh	r2, [r3, #0]

	AngleOrig = (180 / 3.14159 * atan2(data.Accelerometer_Y, data.Accelerometer_Z) + AngleOfs);
 8001d32:	4b53      	ldr	r3, [pc, #332]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d34:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fb97 	bl	800046c <__aeabi_i2d>
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460d      	mov	r5, r1
 8001d42:	4b4f      	ldr	r3, [pc, #316]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d44:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fb8f 	bl	800046c <__aeabi_i2d>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	ec43 2b11 	vmov	d1, r2, r3
 8001d56:	ec45 4b10 	vmov	d0, r4, r5
 8001d5a:	f001 f8c7 	bl	8002eec <atan2>
 8001d5e:	ec51 0b10 	vmov	r0, r1, d0
 8001d62:	a33f      	add	r3, pc, #252	; (adr r3, 8001e60 <AngleMeasure+0x180>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fbe6 	bl	8000538 <__aeabi_dmul>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	4618      	mov	r0, r3
 8001d72:	4621      	mov	r1, r4
 8001d74:	4b49      	ldr	r3, [pc, #292]	; (8001e9c <AngleMeasure+0x1bc>)
 8001d76:	cb18      	ldmia	r3, {r3, r4}
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4623      	mov	r3, r4
 8001d7c:	f7fe fa2a 	bl	80001d4 <__adddf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4a46      	ldr	r2, [pc, #280]	; (8001ea0 <AngleMeasure+0x1c0>)
 8001d86:	e882 0018 	stmia.w	r2, {r3, r4}
	taaan = atan2(data.Accelerometer_Y, data.Accelerometer_Z);
 8001d8a:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d8c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fb6b 	bl	800046c <__aeabi_i2d>
 8001d96:	4604      	mov	r4, r0
 8001d98:	460d      	mov	r5, r1
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <AngleMeasure+0x1a0>)
 8001d9c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fb63 	bl	800046c <__aeabi_i2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	ec43 2b11 	vmov	d1, r2, r3
 8001dae:	ec45 4b10 	vmov	d0, r4, r5
 8001db2:	f001 f89b 	bl	8002eec <atan2>
 8001db6:	eeb0 7a40 	vmov.f32	s14, s0
 8001dba:	eef0 7a60 	vmov.f32	s15, s1
 8001dbe:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <AngleMeasure+0x1c4>)
 8001dc0:	ed83 7b00 	vstr	d7, [r3]
	if (!First)
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <AngleMeasure+0x1c8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d108      	bne.n	8001dde <AngleMeasure+0xfe>
	{
		AngleComp = AngleOrig;
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <AngleMeasure+0x1c0>)
 8001dce:	cb18      	ldmia	r3, {r3, r4}
 8001dd0:	4a36      	ldr	r2, [pc, #216]	; (8001eac <AngleMeasure+0x1cc>)
 8001dd2:	e882 0018 	stmia.w	r2, {r3, r4}
		First = 1;
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <AngleMeasure+0x1c8>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	601a      	str	r2, [r3, #0]
    }
	else
		AngleComp = 0.8 * (AngleComp + (data.Gyroscope_X * data.Gyro_Mult) * 0.01) + 0.2 * AngleOrig;
}
 8001ddc:	e03e      	b.n	8001e5c <AngleMeasure+0x17c>
		AngleComp = 0.8 * (AngleComp + (data.Gyroscope_X * data.Gyro_Mult) * 0.01) + 0.2 * AngleOrig;
 8001dde:	4b28      	ldr	r3, [pc, #160]	; (8001e80 <AngleMeasure+0x1a0>)
 8001de0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <AngleMeasure+0x1a0>)
 8001dee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001df6:	ee17 0a90 	vmov	r0, s15
 8001dfa:	f7fe fb49 	bl	8000490 <__aeabi_f2d>
 8001dfe:	a31a      	add	r3, pc, #104	; (adr r3, 8001e68 <AngleMeasure+0x188>)
 8001e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e04:	f7fe fb98 	bl	8000538 <__aeabi_dmul>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	460c      	mov	r4, r1
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	4621      	mov	r1, r4
 8001e10:	4b26      	ldr	r3, [pc, #152]	; (8001eac <AngleMeasure+0x1cc>)
 8001e12:	cb18      	ldmia	r3, {r3, r4}
 8001e14:	461a      	mov	r2, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	f7fe f9dc 	bl	80001d4 <__adddf3>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460c      	mov	r4, r1
 8001e20:	4618      	mov	r0, r3
 8001e22:	4621      	mov	r1, r4
 8001e24:	a312      	add	r3, pc, #72	; (adr r3, 8001e70 <AngleMeasure+0x190>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fb85 	bl	8000538 <__aeabi_dmul>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460c      	mov	r4, r1
 8001e32:	4625      	mov	r5, r4
 8001e34:	461c      	mov	r4, r3
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <AngleMeasure+0x1c0>)
 8001e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e3c:	a30e      	add	r3, pc, #56	; (adr r3, 8001e78 <AngleMeasure+0x198>)
 8001e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e42:	f7fe fb79 	bl	8000538 <__aeabi_dmul>
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	4629      	mov	r1, r5
 8001e4e:	f7fe f9c1 	bl	80001d4 <__adddf3>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <AngleMeasure+0x1cc>)
 8001e58:	e882 0018 	stmia.w	r2, {r3, r4}
}
 8001e5c:	bf00      	nop
 8001e5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e60:	b05cc3e8 	.word	0xb05cc3e8
 8001e64:	404ca5dd 	.word	0x404ca5dd
 8001e68:	47ae147b 	.word	0x47ae147b
 8001e6c:	3f847ae1 	.word	0x3f847ae1
 8001e70:	9999999a 	.word	0x9999999a
 8001e74:	3fe99999 	.word	0x3fe99999
 8001e78:	9999999a 	.word	0x9999999a
 8001e7c:	3fc99999 	.word	0x3fc99999
 8001e80:	200001ac 	.word	0x200001ac
 8001e84:	200001cc 	.word	0x200001cc
 8001e88:	200001a6 	.word	0x200001a6
 8001e8c:	200001c8 	.word	0x200001c8
 8001e90:	200001ca 	.word	0x200001ca
 8001e94:	200001a4 	.word	0x200001a4
 8001e98:	200001a8 	.word	0x200001a8
 8001e9c:	20000098 	.word	0x20000098
 8001ea0:	20000080 	.word	0x20000080
 8001ea4:	200000e0 	.word	0x200000e0
 8001ea8:	20000074 	.word	0x20000074
 8001eac:	20000088 	.word	0x20000088

08001eb0 <PWMInit>:

void PWMInit (void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08a      	sub	sp, #40	; 0x28
 8001eb4:	af00      	add	r7, sp, #0
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_OCInitTypeDef TIM_OCInitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2004      	movs	r0, #4
 8001eba:	f7ff f987 	bl	80011cc <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2008      	movs	r0, #8
 8001ec2:	f7ff f963 	bl	800118c <RCC_AHB1PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
 8001ec6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001eca:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001edc:	463b      	mov	r3, r7
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4831      	ldr	r0, [pc, #196]	; (8001fa8 <PWMInit+0xf8>)
 8001ee2:	f7fe fee1 	bl	8000ca8 <GPIO_Init>

	GPIO_PinAFConfig(GPIOD, GPIO_PinSource12, GPIO_AF_TIM4);
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	210c      	movs	r1, #12
 8001eea:	482f      	ldr	r0, [pc, #188]	; (8001fa8 <PWMInit+0xf8>)
 8001eec:	f7fe ff6a 	bl	8000dc4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_TIM4);
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	210d      	movs	r1, #13
 8001ef4:	482c      	ldr	r0, [pc, #176]	; (8001fa8 <PWMInit+0xf8>)
 8001ef6:	f7fe ff65 	bl	8000dc4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_TIM4);
 8001efa:	2202      	movs	r2, #2
 8001efc:	210e      	movs	r1, #14
 8001efe:	482a      	ldr	r0, [pc, #168]	; (8001fa8 <PWMInit+0xf8>)
 8001f00:	f7fe ff60 	bl	8000dc4 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_TIM4);
 8001f04:	2202      	movs	r2, #2
 8001f06:	210f      	movs	r1, #15
 8001f08:	4827      	ldr	r0, [pc, #156]	; (8001fa8 <PWMInit+0xf8>)
 8001f0a:	f7fe ff5b 	bl	8000dc4 <GPIO_PinAFConfig>

	TIM_TimeBaseStructure.TIM_Period = PeriodValue;
 8001f0e:	4b27      	ldr	r3, [pc, #156]	; (8001fac <PWMInit+0xfc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	623b      	str	r3, [r7, #32]
	TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 8001f14:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <PWMInit+0x100>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	83bb      	strh	r3, [r7, #28]
	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	84bb      	strh	r3, [r7, #36]	; 0x24
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001f20:	2300      	movs	r3, #0
 8001f22:	83fb      	strh	r3, [r7, #30]

	TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4822      	ldr	r0, [pc, #136]	; (8001fb4 <PWMInit+0x104>)
 8001f2c:	f7ff f99a 	bl	8001264 <TIM_TimeBaseInit>

	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001f30:	2360      	movs	r3, #96	; 0x60
 8001f32:	813b      	strh	r3, [r7, #8]
	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001f34:	2301      	movs	r3, #1
 8001f36:	817b      	strh	r3, [r7, #10]
	TIM_OCInitStructure.TIM_Pulse = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	82bb      	strh	r3, [r7, #20]

	TIM_OC1Init(TIM4, &TIM_OCInitStructure);
 8001f40:	f107 0308 	add.w	r3, r7, #8
 8001f44:	4619      	mov	r1, r3
 8001f46:	481b      	ldr	r0, [pc, #108]	; (8001fb4 <PWMInit+0x104>)
 8001f48:	f7ff fa38 	bl	80013bc <TIM_OC1Init>
	TIM_OC1PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001f4c:	2108      	movs	r1, #8
 8001f4e:	4819      	ldr	r0, [pc, #100]	; (8001fb4 <PWMInit+0x104>)
 8001f50:	f7ff fc24 	bl	800179c <TIM_OC1PreloadConfig>

	TIM_OC2Init(TIM4, &TIM_OCInitStructure);
 8001f54:	f107 0308 	add.w	r3, r7, #8
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4816      	ldr	r0, [pc, #88]	; (8001fb4 <PWMInit+0x104>)
 8001f5c:	f7ff faa8 	bl	80014b0 <TIM_OC2Init>
	TIM_OC2PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001f60:	2108      	movs	r1, #8
 8001f62:	4814      	ldr	r0, [pc, #80]	; (8001fb4 <PWMInit+0x104>)
 8001f64:	f7ff fc36 	bl	80017d4 <TIM_OC2PreloadConfig>

	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 8001f68:	f107 0308 	add.w	r3, r7, #8
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4811      	ldr	r0, [pc, #68]	; (8001fb4 <PWMInit+0x104>)
 8001f70:	f7ff fb26 	bl	80015c0 <TIM_OC3Init>
	TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001f74:	2108      	movs	r1, #8
 8001f76:	480f      	ldr	r0, [pc, #60]	; (8001fb4 <PWMInit+0x104>)
 8001f78:	f7ff fc4a 	bl	8001810 <TIM_OC3PreloadConfig>

	TIM_OC4Init(TIM4, &TIM_OCInitStructure);
 8001f7c:	f107 0308 	add.w	r3, r7, #8
 8001f80:	4619      	mov	r1, r3
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <PWMInit+0x104>)
 8001f84:	f7ff fba2 	bl	80016cc <TIM_OC4Init>
	TIM_OC4PreloadConfig(TIM4, TIM_OCPreload_Enable);
 8001f88:	2108      	movs	r1, #8
 8001f8a:	480a      	ldr	r0, [pc, #40]	; (8001fb4 <PWMInit+0x104>)
 8001f8c:	f7ff fc5c 	bl	8001848 <TIM_OC4PreloadConfig>

	TIM_ARRPreloadConfig(TIM4, ENABLE);
 8001f90:	2101      	movs	r1, #1
 8001f92:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <PWMInit+0x104>)
 8001f94:	f7ff f9d2 	bl	800133c <TIM_ARRPreloadConfig>

	TIM_Cmd(TIM4, ENABLE);
 8001f98:	2101      	movs	r1, #1
 8001f9a:	4806      	ldr	r0, [pc, #24]	; (8001fb4 <PWMInit+0x104>)
 8001f9c:	f7ff f9ee 	bl	800137c <TIM_Cmd>
}
 8001fa0:	bf00      	nop
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	40020c00 	.word	0x40020c00
 8001fac:	20000030 	.word	0x20000030
 8001fb0:	2000002c 	.word	0x2000002c
 8001fb4:	40000800 	.word	0x40000800

08001fb8 <EVAL_AUDIO_TransferComplete_CallBack>:

/*
 * Callback used by stm32f401_discovery_audio_codec.c.
 * Refer to stm32f401_discovery_audio_codec.h for more info.
 */
void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size) {
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
	/* TODO, implement your code here */
	return;
 8001fc2:	bf00      	nop
}
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <EVAL_AUDIO_GetSampleCallBack>:

/*
 * Callback used by stm32f401_discovery_audio_codec.c.
 * Refer to stm32f401_discovery_audio_codec.h for more info.
 */
uint16_t EVAL_AUDIO_GetSampleCallBack(void) {
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
	/* TODO, implement your code here */
	return -1;
 8001fd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fe0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002018 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fe4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fe6:	e003      	b.n	8001ff0 <LoopCopyDataInit>

08001fe8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fee:	3104      	adds	r1, #4

08001ff0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ff0:	480b      	ldr	r0, [pc, #44]	; (8002020 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ff4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ff6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ff8:	d3f6      	bcc.n	8001fe8 <CopyDataInit>
  ldr  r2, =_sbss
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ffc:	e002      	b.n	8002004 <LoopFillZerobss>

08001ffe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ffe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002000:	f842 3b04 	str.w	r3, [r2], #4

08002004 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002004:	4b09      	ldr	r3, [pc, #36]	; (800202c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002006:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002008:	d3f9      	bcc.n	8001ffe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800200a:	f000 f83b 	bl	8002084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800200e:	f000 ff49 	bl	8002ea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002012:	f7ff fd1b 	bl	8001a4c <main>
  bx  lr    
 8002016:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002018:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 800201c:	08003470 	.word	0x08003470
  ldr  r0, =_sdata
 8002020:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002024:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 8002028:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 800202c:	200001d4 	.word	0x200001d4

08002030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002030:	e7fe      	b.n	8002030 <ADC_IRQHandler>

08002032 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
}
 8002036:	bf00      	nop
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002044:	e7fe      	b.n	8002044 <HardFault_Handler+0x4>

08002046 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800204a:	e7fe      	b.n	800204a <MemManage_Handler+0x4>

0800204c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002050:	e7fe      	b.n	8002050 <BusFault_Handler+0x4>

08002052 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002056:	e7fe      	b.n	8002056 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002088:	4a16      	ldr	r2, [pc, #88]	; (80020e4 <SystemInit+0x60>)
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <SystemInit+0x60>)
 800208c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002098:	4a13      	ldr	r2, [pc, #76]	; (80020e8 <SystemInit+0x64>)
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <SystemInit+0x64>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020a4:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <SystemInit+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020aa:	4a0f      	ldr	r2, [pc, #60]	; (80020e8 <SystemInit+0x64>)
 80020ac:	4b0e      	ldr	r3, [pc, #56]	; (80020e8 <SystemInit+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <SystemInit+0x64>)
 80020bc:	4a0b      	ldr	r2, [pc, #44]	; (80020ec <SystemInit+0x68>)
 80020be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020c0:	4a09      	ldr	r2, [pc, #36]	; (80020e8 <SystemInit+0x64>)
 80020c2:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <SystemInit+0x64>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <SystemInit+0x64>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
       
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80020d2:	f000 f80d 	bl	80020f0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020d6:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <SystemInit+0x60>)
 80020d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020dc:	609a      	str	r2, [r3, #8]
#endif
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	e000ed00 	.word	0xe000ed00
 80020e8:	40023800 	.word	0x40023800
 80020ec:	24003010 	.word	0x24003010

080020f0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL  used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	2300      	movs	r3, #0
 80020fc:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);
   
#else  /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */
    
    /* Enable HSE */
    RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80020fe:	4a35      	ldr	r2, [pc, #212]	; (80021d4 <SetSysClock+0xe4>)
 8002100:	4b34      	ldr	r3, [pc, #208]	; (80021d4 <SetSysClock+0xe4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002108:	6013      	str	r3, [r2, #0]
  #endif  /* PLL_SOURCE_HSE_BYPASS */
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800210a:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <SetSysClock+0xe4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002112:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d103      	bne.n	8002128 <SetSysClock+0x38>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002126:	d1f0      	bne.n	800210a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002128:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <SetSysClock+0xe4>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002134:	2301      	movs	r3, #1
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	e001      	b.n	800213e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800213a:	2300      	movs	r3, #0
 800213c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d102      	bne.n	800214a <SetSysClock+0x5a>
  {

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <SetSysClock+0xe4>)
 8002146:	4a24      	ldr	r2, [pc, #144]	; (80021d8 <SetSysClock+0xe8>)
 8002148:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif  /* PLL_SOURCE_HSI */
  
     /* Select regulator voltage output Scale 2 mode, System frequency up to 84 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800214a:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <SetSysClock+0xe4>)
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <SetSysClock+0xe4>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR &= (uint32_t)~(PWR_CR_VOS);
 8002156:	4a21      	ldr	r2, [pc, #132]	; (80021dc <SetSysClock+0xec>)
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <SetSysClock+0xec>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002160:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002162:	4a1c      	ldr	r2, [pc, #112]	; (80021d4 <SetSysClock+0xe4>)
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <SetSysClock+0xe4>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 1*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 800216a:	4a1a      	ldr	r2, [pc, #104]	; (80021d4 <SetSysClock+0xe4>)
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <SetSysClock+0xe4>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;  
 8002172:	4a18      	ldr	r2, [pc, #96]	; (80021d4 <SetSysClock+0xe4>)
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <SetSysClock+0xe4>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800217c:	6093      	str	r3, [r2, #8]
 
  /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800217e:	4a15      	ldr	r2, [pc, #84]	; (80021d4 <SetSysClock+0xe4>)
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <SetSysClock+0xe4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800218a:	bf00      	nop
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <SetSysClock+0xe4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d0f9      	beq.n	800218c <SetSysClock+0x9c>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <SetSysClock+0xf0>)
 800219a:	f240 7202 	movw	r2, #1794	; 0x702
 800219e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80021a0:	4a0c      	ldr	r2, [pc, #48]	; (80021d4 <SetSysClock+0xe4>)
 80021a2:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <SetSysClock+0xe4>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f023 0303 	bic.w	r3, r3, #3
 80021aa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80021ac:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <SetSysClock+0xe4>)
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <SetSysClock+0xe4>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f043 0302 	orr.w	r3, r3, #2
 80021b6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80021b8:	bf00      	nop
 80021ba:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <SetSysClock+0xe4>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 030c 	and.w	r3, r3, #12
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d1f9      	bne.n	80021ba <SetSysClock+0xca>
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40023800 	.word	0x40023800
 80021d8:	07415408 	.word	0x07415408
 80021dc:	40007000 	.word	0x40007000
 80021e0:	40023c00 	.word	0x40023c00

080021e4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	da0b      	bge.n	8002210 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80021f8:	490d      	ldr	r1, [pc, #52]	; (8002230 <NVIC_SetPriority+0x4c>)
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 030f 	and.w	r3, r3, #15
 8002200:	3b04      	subs	r3, #4
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800220e:	e009      	b.n	8002224 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8002210:	4908      	ldr	r1, [pc, #32]	; (8002234 <NVIC_SetPriority+0x50>)
 8002212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	b2d2      	uxtb	r2, r2
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	440b      	add	r3, r1
 8002220:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	e000e100 	.word	0xe000e100

08002238 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002246:	d301      	bcc.n	800224c <SysTick_Config+0x14>
 8002248:	2301      	movs	r3, #1
 800224a:	e011      	b.n	8002270 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800224c:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002254:	3b01      	subs	r3, #1
 8002256:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8002258:	210f      	movs	r1, #15
 800225a:	f04f 30ff 	mov.w	r0, #4294967295
 800225e:	f7ff ffc1 	bl	80021e4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002262:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002264:	2200      	movs	r2, #0
 8002266:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <SysTick_Config+0x40>)
 800226a:	2207      	movs	r2, #7
 800226c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	e000e010 	.word	0xe000e010

0800227c <SysTick_Handler>:
void TM_DELAY_TIM_IRQ_HANDLER(void) {
	TM_DELAY_TIM->SR = ~TIM_IT_Update;
#elif defined(KEIL_IDE)
void TimingDelay_Decrement(void) {
#else
void SysTick_Handler(void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
#endif
	uint8_t i;
	
	TM_Time++;
 8002282:	4b37      	ldr	r3, [pc, #220]	; (8002360 <SysTick_Handler+0xe4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	4a35      	ldr	r2, [pc, #212]	; (8002360 <SysTick_Handler+0xe4>)
 800228a:	6013      	str	r3, [r2, #0]
	if (TM_Time2 != 0x00) {
 800228c:	4b35      	ldr	r3, [pc, #212]	; (8002364 <SysTick_Handler+0xe8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <SysTick_Handler+0x22>
		TM_Time2--;
 8002294:	4b33      	ldr	r3, [pc, #204]	; (8002364 <SysTick_Handler+0xe8>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3b01      	subs	r3, #1
 800229a:	4a32      	ldr	r2, [pc, #200]	; (8002364 <SysTick_Handler+0xe8>)
 800229c:	6013      	str	r3, [r2, #0]
	}
	
	/* Call user function */
	TM_DELAY_1msHandler();
 800229e:	f3af 8000 	nop.w
	
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	71fb      	strb	r3, [r7, #7]
 80022a6:	e052      	b.n	800234e <SysTick_Handler+0xd2>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80022a8:	79fb      	ldrb	r3, [r7, #7]
 80022aa:	4a2f      	ldr	r2, [pc, #188]	; (8002368 <SysTick_Handler+0xec>)
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	685b      	ldr	r3, [r3, #4]
		if (
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d048      	beq.n	8002348 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4a2b      	ldr	r2, [pc, #172]	; (8002368 <SysTick_Handler+0xec>)
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	7b1b      	ldrb	r3, [r3, #12]
			CustomTimers.Timers[i] &&          /*!< Pointer exists */
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d040      	beq.n	8002348 <SysTick_Handler+0xcc>
			CustomTimers.Timers[i]->CNT > 0    /*!< Counter is not NULL */
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	4a27      	ldr	r2, [pc, #156]	; (8002368 <SysTick_Handler+0xec>)
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
			CustomTimers.Timers[i]->Enabled && /*!< Timer is enabled */
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d038      	beq.n	8002348 <SysTick_Handler+0xcc>
		) {
			/* Decrease counter */
			CustomTimers.Timers[i]->CNT--;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	4a23      	ldr	r2, [pc, #140]	; (8002368 <SysTick_Handler+0xec>)
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	689a      	ldr	r2, [r3, #8]
 80022e2:	3a01      	subs	r2, #1
 80022e4:	609a      	str	r2, [r3, #8]
			
			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <SysTick_Handler+0xec>)
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4413      	add	r3, r2
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d128      	bne.n	8002348 <SysTick_Handler+0xcc>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i]->UserParameters);
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	; (8002368 <SysTick_Handler+0xec>)
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	4918      	ldr	r1, [pc, #96]	; (8002368 <SysTick_Handler+0xec>)
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4618      	mov	r0, r3
 8002310:	4790      	blx	r2
				
				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <SysTick_Handler+0xec>)
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	4912      	ldr	r1, [pc, #72]	; (8002368 <SysTick_Handler+0xec>)
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6093      	str	r3, [r2, #8]
				
				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->AutoReload) {
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <SysTick_Handler+0xec>)
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <SysTick_Handler+0xcc>
					/* Disable counter */
					CustomTimers.Timers[i]->Enabled = 0;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Handler+0xec>)
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	731a      	strb	r2, [r3, #12]
	for (i = 0; i < CustomTimers.Count; i++) {
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	3301      	adds	r3, #1
 800234c:	71fb      	strb	r3, [r7, #7]
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <SysTick_Handler+0xec>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	79fa      	ldrb	r2, [r7, #7]
 8002354:	429a      	cmp	r2, r3
 8002356:	d3a7      	bcc.n	80022a8 <SysTick_Handler+0x2c>
				}
			}
		}
	}
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200000e8 	.word	0x200000e8
 8002364:	200000ec 	.word	0x200000ec
 8002368:	200000f4 	.word	0x200000f4

0800236c <TM_DELAY_Init>:

void TM_DELAY_Init(void) {	
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
#if defined(TM_DELAY_TIM)
	TM_DELAY_INT_InitTIM();
#else
	/* Set Systick interrupt every 1ms */
	if (SysTick_Config(SystemCoreClock / 1000)) {
 8002370:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <TM_DELAY_Init+0x3c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0d      	ldr	r2, [pc, #52]	; (80023ac <TM_DELAY_Init+0x40>)
 8002376:	fba2 2303 	umull	r2, r3, r2, r3
 800237a:	099b      	lsrs	r3, r3, #6
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff5b 	bl	8002238 <SysTick_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d000      	beq.n	800238a <TM_DELAY_Init+0x1e>
		/* Capture error */
		while (1);
 8002388:	e7fe      	b.n	8002388 <TM_DELAY_Init+0x1c>
	}
	
	#ifdef __GNUC__
		/* Set multiplier for delay under 1us with pooling mode = not so accurate */
		mult = SystemCoreClock / 7000000;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <TM_DELAY_Init+0x3c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	099b      	lsrs	r3, r3, #6
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <TM_DELAY_Init+0x44>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0a9b      	lsrs	r3, r3, #10
 8002398:	4a06      	ldr	r2, [pc, #24]	; (80023b4 <TM_DELAY_Init+0x48>)
 800239a:	6013      	str	r3, [r2, #0]
		mult = SystemCoreClock / 3000000;
	#endif
#endif
	
	/* Set initialized flag */
	TM_DELAY_Initialized = 1;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <TM_DELAY_Init+0x4c>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	20000048 	.word	0x20000048
 80023ac:	10624dd3 	.word	0x10624dd3
 80023b0:	02659117 	.word	0x02659117
 80023b4:	200001d0 	.word	0x200001d0
 80023b8:	200000f0 	.word	0x200000f0

080023bc <TM_GPIO_InitAlternate>:
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
}

void TM_GPIO_InitAlternate(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed, uint8_t Alternate) {
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af02      	add	r7, sp, #8
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	4608      	mov	r0, r1
 80023c6:	4611      	mov	r1, r2
 80023c8:	461a      	mov	r2, r3
 80023ca:	4603      	mov	r3, r0
 80023cc:	807b      	strh	r3, [r7, #2]
 80023ce:	460b      	mov	r3, r1
 80023d0:	707b      	strb	r3, [r7, #1]
 80023d2:	4613      	mov	r3, r2
 80023d4:	703b      	strb	r3, [r7, #0]
	uint32_t pinpos;

	/* Check input */
	if (GPIO_Pin == 0x00) {
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d03e      	beq.n	800245a <TM_GPIO_InitAlternate+0x9e>
		return;
	}
	
	/* Enable GPIOx clock */
	TM_GPIO_INT_EnableClock(GPIOx);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f851 	bl	8002484 <TM_GPIO_INT_EnableClock>
	
	/* Set alternate functions for all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	e029      	b.n	800243c <TM_GPIO_InitAlternate+0x80>
		/* Check pin */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80023e8:	887a      	ldrh	r2, [r7, #2]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	fa42 f303 	asr.w	r3, r2, r3
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d01d      	beq.n	8002434 <TM_GPIO_InitAlternate+0x78>
			continue;
		}
		
		/* Set alternate function */
		GPIOx->AFR[pinpos >> 0x03] = (GPIOx->AFR[pinpos >> 0x03] & ~(0x0F << (4 * (pinpos & 0x07)))) | (Alternate << (4 * (pinpos & 0x07)));
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	08da      	lsrs	r2, r3, #3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	08d9      	lsrs	r1, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3108      	adds	r1, #8
 8002404:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002408:	68f9      	ldr	r1, [r7, #12]
 800240a:	f001 0107 	and.w	r1, r1, #7
 800240e:	0089      	lsls	r1, r1, #2
 8002410:	200f      	movs	r0, #15
 8002412:	fa00 f101 	lsl.w	r1, r0, r1
 8002416:	43c9      	mvns	r1, r1
 8002418:	400b      	ands	r3, r1
 800241a:	7f38      	ldrb	r0, [r7, #28]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	f001 0107 	and.w	r1, r1, #7
 8002422:	0089      	lsls	r1, r1, #2
 8002424:	fa00 f101 	lsl.w	r1, r0, r1
 8002428:	4319      	orrs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3208      	adds	r2, #8
 800242e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002432:	e000      	b.n	8002436 <TM_GPIO_InitAlternate+0x7a>
			continue;
 8002434:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	3301      	adds	r3, #1
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b0f      	cmp	r3, #15
 8002440:	d9d2      	bls.n	80023e8 <TM_GPIO_InitAlternate+0x2c>
	}
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, TM_GPIO_Mode_AF, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8002442:	787a      	ldrb	r2, [r7, #1]
 8002444:	8879      	ldrh	r1, [r7, #2]
 8002446:	7e3b      	ldrb	r3, [r7, #24]
 8002448:	9301      	str	r3, [sp, #4]
 800244a:	783b      	ldrb	r3, [r7, #0]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	2202      	movs	r2, #2
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f82e 	bl	80024b4 <TM_GPIO_INT_Init>
 8002458:	e000      	b.n	800245c <TM_GPIO_InitAlternate+0xa0>
		return;
 800245a:	bf00      	nop
}
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8002462:	b480      	push	{r7}
 8002464:	b083      	sub	sp, #12
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8002470:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8002474:	0a9b      	lsrs	r3, r3, #10
 8002476:	b29b      	uxth	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ffe8 	bl	8002462 <TM_GPIO_GetPortSource>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	2301      	movs	r3, #1
 8002498:	fa03 f102 	lsl.w	r1, r3, r2
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <TM_GPIO_INT_EnableClock+0x2c>)
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <TM_GPIO_INT_EnableClock+0x2c>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	430b      	orrs	r3, r1
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800

080024b4 <TM_GPIO_INT_Init>:
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx) {
	/* Clear bit according to the 1 << portsourcenumber */
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	4608      	mov	r0, r1
 80024be:	4611      	mov	r1, r2
 80024c0:	461a      	mov	r2, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	807b      	strh	r3, [r7, #2]
 80024c6:	460b      	mov	r3, r1
 80024c8:	707b      	strb	r3, [r7, #1]
 80024ca:	4613      	mov	r3, r2
 80024cc:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f7ff ffc7 	bl	8002462 <TM_GPIO_GetPortSource>
 80024d4:	4603      	mov	r3, r0
 80024d6:	73bb      	strb	r3, [r7, #14]
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e067      	b.n	80025ae <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 80024de:	887a      	ldrh	r2, [r7, #2]
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	fa42 f303 	asr.w	r3, r2, r3
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d05b      	beq.n	80025a6 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 80024ee:	7bbb      	ldrb	r3, [r7, #14]
 80024f0:	7bba      	ldrb	r2, [r7, #14]
 80024f2:	4932      	ldr	r1, [pc, #200]	; (80025bc <TM_GPIO_INT_Init+0x108>)
 80024f4:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80024f8:	b211      	sxth	r1, r2
 80024fa:	7bfa      	ldrb	r2, [r7, #15]
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	b212      	sxth	r2, r2
 8002504:	430a      	orrs	r2, r1
 8002506:	b212      	sxth	r2, r2
 8002508:	b291      	uxth	r1, r2
 800250a:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <TM_GPIO_INT_Init+0x108>)
 800250c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	7bfa      	ldrb	r2, [r7, #15]
 8002516:	0052      	lsls	r2, r2, #1
 8002518:	2103      	movs	r1, #3
 800251a:	fa01 f202 	lsl.w	r2, r1, r2
 800251e:	43d2      	mvns	r2, r2
 8002520:	4013      	ands	r3, r2
 8002522:	7e39      	ldrb	r1, [r7, #24]
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	fa01 f202 	lsl.w	r2, r1, r2
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	2103      	movs	r1, #3
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	4013      	ands	r3, r2
 8002544:	7879      	ldrb	r1, [r7, #1]
 8002546:	7bfa      	ldrb	r2, [r7, #15]
 8002548:	0052      	lsls	r2, r2, #1
 800254a:	fa01 f202 	lsl.w	r2, r1, r2
 800254e:	431a      	orrs	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8002554:	787b      	ldrb	r3, [r7, #1]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d002      	beq.n	8002560 <TM_GPIO_INT_Init+0xac>
 800255a:	787b      	ldrb	r3, [r7, #1]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	b292      	uxth	r2, r2
 800256e:	43d2      	mvns	r2, r2
 8002570:	4013      	ands	r3, r2
 8002572:	7839      	ldrb	r1, [r7, #0]
 8002574:	7bfa      	ldrb	r2, [r7, #15]
 8002576:	fa01 f202 	lsl.w	r2, r1, r2
 800257a:	b292      	uxth	r2, r2
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2103      	movs	r1, #3
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	4013      	ands	r3, r2
 8002594:	7f39      	ldrb	r1, [r7, #28]
 8002596:	7bfa      	ldrb	r2, [r7, #15]
 8002598:	0052      	lsls	r2, r2, #1
 800259a:	fa01 f202 	lsl.w	r2, r1, r2
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e000      	b.n	80025a8 <TM_GPIO_INT_Init+0xf4>
			continue;
 80025a6:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	3301      	adds	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
 80025b0:	2b0f      	cmp	r3, #15
 80025b2:	d994      	bls.n	80024de <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000010c 	.word	0x2000010c

080025c0 <TM_I2C_Init>:
/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack);
static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack);

void TM_I2C_Init(I2C_TypeDef* I2Cx, TM_I2C_PinsPack_t pinspack, uint32_t clockSpeed) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	460b      	mov	r3, r1
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	72fb      	strb	r3, [r7, #11]
	I2C_InitTypeDef I2C_InitStruct;
	
	if (I2Cx == I2C1) {
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4a44      	ldr	r2, [pc, #272]	; (80026e4 <TM_I2C_Init+0x124>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d121      	bne.n	800261a <TM_I2C_Init+0x5a>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80025d6:	4a44      	ldr	r2, [pc, #272]	; (80026e8 <TM_I2C_Init+0x128>)
 80025d8:	4b43      	ldr	r3, [pc, #268]	; (80026e8 <TM_I2C_Init+0x128>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025e0:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C1_INT_InitPins(pinspack);
 80025e2:	7afb      	ldrb	r3, [r7, #11]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 fa79 	bl	8002adc <TM_I2C1_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[0]) {
 80025ea:	4b40      	ldr	r3, [pc, #256]	; (80026ec <TM_I2C_Init+0x12c>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d902      	bls.n	80025fa <TM_I2C_Init+0x3a>
			TM_I2C_INT_Clocks[0] = clockSpeed;
 80025f4:	4a3d      	ldr	r2, [pc, #244]	; (80026ec <TM_I2C_Init+0x12c>)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6013      	str	r3, [r2, #0]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[0];
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <TM_I2C_Init+0x12c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C1_ACKNOWLEDGED_ADDRESS;
 8002600:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002604:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C1_MODE;
 8002606:	2300      	movs	r3, #0
 8002608:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C1_OWN_ADDRESS;
 800260a:	2300      	movs	r3, #0
 800260c:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C1_ACK;
 800260e:	2300      	movs	r3, #0
 8002610:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C1_DUTY_CYCLE;
 8002612:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002616:	82fb      	strh	r3, [r7, #22]
 8002618:	e04a      	b.n	80026b0 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C2) {
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a34      	ldr	r2, [pc, #208]	; (80026f0 <TM_I2C_Init+0x130>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d121      	bne.n	8002666 <TM_I2C_Init+0xa6>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8002622:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <TM_I2C_Init+0x128>)
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <TM_I2C_Init+0x128>)
 8002626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800262c:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C2_INT_InitPins(pinspack);
 800262e:	7afb      	ldrb	r3, [r7, #11]
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fa91 	bl	8002b58 <TM_I2C2_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[1]) {
 8002636:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <TM_I2C_Init+0x12c>)
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	d902      	bls.n	8002646 <TM_I2C_Init+0x86>
			TM_I2C_INT_Clocks[1] = clockSpeed;
 8002640:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <TM_I2C_Init+0x12c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6053      	str	r3, [r2, #4]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[1];
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <TM_I2C_Init+0x12c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C2_ACKNOWLEDGED_ADDRESS;
 800264c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002650:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C2_MODE;
 8002652:	2300      	movs	r3, #0
 8002654:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C2_OWN_ADDRESS;
 8002656:	2300      	movs	r3, #0
 8002658:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C2_ACK;
 800265a:	2300      	movs	r3, #0
 800265c:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C2_DUTY_CYCLE;
 800265e:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8002662:	82fb      	strh	r3, [r7, #22]
 8002664:	e024      	b.n	80026b0 <TM_I2C_Init+0xf0>
	} else if (I2Cx == I2C3) {
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4a22      	ldr	r2, [pc, #136]	; (80026f4 <TM_I2C_Init+0x134>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d120      	bne.n	80026b0 <TM_I2C_Init+0xf0>
		/* Enable clock */
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 800266e:	4a1e      	ldr	r2, [pc, #120]	; (80026e8 <TM_I2C_Init+0x128>)
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <TM_I2C_Init+0x128>)
 8002672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002674:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
		
		/* Enable pins */
		TM_I2C3_INT_InitPins(pinspack);
 800267a:	7afb      	ldrb	r3, [r7, #11]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 faab 	bl	8002bd8 <TM_I2C3_INT_InitPins>
		
		/* Check clock, set the lowest clock your devices support on the same I2C but */
		if (clockSpeed < TM_I2C_INT_Clocks[2]) {
 8002682:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <TM_I2C_Init+0x12c>)
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	429a      	cmp	r2, r3
 800268a:	d902      	bls.n	8002692 <TM_I2C_Init+0xd2>
			TM_I2C_INT_Clocks[2] = clockSpeed;
 800268c:	4a17      	ldr	r2, [pc, #92]	; (80026ec <TM_I2C_Init+0x12c>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6093      	str	r3, [r2, #8]
		}
		
		/* Set values */
		I2C_InitStruct.I2C_ClockSpeed = TM_I2C_INT_Clocks[2];
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <TM_I2C_Init+0x12c>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	613b      	str	r3, [r7, #16]
		I2C_InitStruct.I2C_AcknowledgedAddress = TM_I2C3_ACKNOWLEDGED_ADDRESS;
 8002698:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800269c:	83bb      	strh	r3, [r7, #28]
		I2C_InitStruct.I2C_Mode = TM_I2C3_MODE;
 800269e:	2300      	movs	r3, #0
 80026a0:	82bb      	strh	r3, [r7, #20]
		I2C_InitStruct.I2C_OwnAddress1 = TM_I2C3_OWN_ADDRESS;
 80026a2:	2300      	movs	r3, #0
 80026a4:	833b      	strh	r3, [r7, #24]
		I2C_InitStruct.I2C_Ack = TM_I2C3_ACK;
 80026a6:	2300      	movs	r3, #0
 80026a8:	837b      	strh	r3, [r7, #26]
		I2C_InitStruct.I2C_DutyCycle = TM_I2C3_DUTY_CYCLE;
 80026aa:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80026ae:	82fb      	strh	r3, [r7, #22]
	}
	
	/* Disable I2C first */
	I2Cx->CR1 &= ~I2C_CR1_PE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	b29a      	uxth	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	801a      	strh	r2, [r3, #0]
	
	/* Initialize I2C */
	I2C_Init(I2Cx, &I2C_InitStruct);
 80026c0:	f107 0310 	add.w	r3, r7, #16
 80026c4:	4619      	mov	r1, r3
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7fe fbc6 	bl	8000e58 <I2C_Init>
	
	/* Enable I2C */
	I2Cx->CR1 |= I2C_CR1_PE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f043 0301 	orr.w	r3, r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	801a      	strh	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	3720      	adds	r7, #32
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40005400 	.word	0x40005400
 80026e8:	40023800 	.word	0x40023800
 80026ec:	2000004c 	.word	0x2000004c
 80026f0:	40005800 	.word	0x40005800
 80026f4:	40005c00 	.word	0x40005c00

080026f8 <TM_I2C_Read>:

uint8_t TM_I2C_Read(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg) {
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	460b      	mov	r3, r1
 8002702:	70fb      	strb	r3, [r7, #3]
 8002704:	4613      	mov	r3, r2
 8002706:	70bb      	strb	r3, [r7, #2]
	uint8_t received_data;
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 8002708:	78f9      	ldrb	r1, [r7, #3]
 800270a:	2300      	movs	r3, #0
 800270c:	2200      	movs	r2, #0
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f89c 	bl	800284c <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8002714:	78bb      	ldrb	r3, [r7, #2]
 8002716:	4619      	mov	r1, r3
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f91b 	bl	8002954 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f9a8 	bl	8002a74 <TM_I2C_Stop>
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_DISABLE);
 8002724:	78f9      	ldrb	r1, [r7, #3]
 8002726:	2300      	movs	r3, #0
 8002728:	2201      	movs	r2, #1
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f88e 	bl	800284c <TM_I2C_Start>
	received_data = TM_I2C_ReadNack(I2Cx);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f967 	bl	8002a04 <TM_I2C_ReadNack>
 8002736:	4603      	mov	r3, r0
 8002738:	73fb      	strb	r3, [r7, #15]
	return received_data;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <TM_I2C_ReadMulti>:

void TM_I2C_ReadMulti(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002744:	b590      	push	{r4, r7, lr}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	460b      	mov	r3, r1
 8002750:	72fb      	strb	r3, [r7, #11]
 8002752:	4613      	mov	r3, r2
 8002754:	72bb      	strb	r3, [r7, #10]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE);
 8002756:	7af9      	ldrb	r1, [r7, #11]
 8002758:	2301      	movs	r3, #1
 800275a:	2200      	movs	r2, #0
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f000 f875 	bl	800284c <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 8002762:	7abb      	ldrb	r3, [r7, #10]
 8002764:	4619      	mov	r1, r3
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 f8f4 	bl	8002954 <TM_I2C_WriteData>
	//TM_I2C_Stop(I2Cx);
	TM_I2C_Start(I2Cx, address, I2C_RECEIVER_MODE, I2C_ACK_ENABLE);
 800276c:	7af9      	ldrb	r1, [r7, #11]
 800276e:	2301      	movs	r3, #1
 8002770:	2201      	movs	r2, #1
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f86a 	bl	800284c <TM_I2C_Start>
	while (count--) {
 8002778:	e013      	b.n	80027a2 <TM_I2C_ReadMulti+0x5e>
		if (!count) {
 800277a:	8c3b      	ldrh	r3, [r7, #32]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d108      	bne.n	8002792 <TM_I2C_ReadMulti+0x4e>
			/* Last byte */
			*data++ = TM_I2C_ReadNack(I2Cx);
 8002780:	687c      	ldr	r4, [r7, #4]
 8002782:	1c63      	adds	r3, r4, #1
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f93c 	bl	8002a04 <TM_I2C_ReadNack>
 800278c:	4603      	mov	r3, r0
 800278e:	7023      	strb	r3, [r4, #0]
 8002790:	e007      	b.n	80027a2 <TM_I2C_ReadMulti+0x5e>
		} else {
			*data++ = TM_I2C_ReadAck(I2Cx);
 8002792:	687c      	ldr	r4, [r7, #4]
 8002794:	1c63      	adds	r3, r4, #1
 8002796:	607b      	str	r3, [r7, #4]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f903 	bl	80029a4 <TM_I2C_ReadAck>
 800279e:	4603      	mov	r3, r0
 80027a0:	7023      	strb	r3, [r4, #0]
	while (count--) {
 80027a2:	8c3b      	ldrh	r3, [r7, #32]
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	843a      	strh	r2, [r7, #32]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1e6      	bne.n	800277a <TM_I2C_ReadMulti+0x36>
		}
	}
}
 80027ac:	bf00      	nop
 80027ae:	3714      	adds	r7, #20
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd90      	pop	{r4, r7, pc}

080027b4 <TM_I2C_Write>:
			*data = TM_I2C_ReadAck(I2Cx);
		}
	}
}

void TM_I2C_Write(I2C_TypeDef* I2Cx, uint8_t address, uint8_t reg, uint8_t data) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	70fb      	strb	r3, [r7, #3]
 80027c6:	460b      	mov	r3, r1
 80027c8:	70bb      	strb	r3, [r7, #2]
 80027ca:	4613      	mov	r3, r2
 80027cc:	707b      	strb	r3, [r7, #1]
	TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_DISABLE);
 80027ce:	78f9      	ldrb	r1, [r7, #3]
 80027d0:	2300      	movs	r3, #0
 80027d2:	2200      	movs	r2, #0
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f839 	bl	800284c <TM_I2C_Start>
	TM_I2C_WriteData(I2Cx, reg);
 80027da:	78bb      	ldrb	r3, [r7, #2]
 80027dc:	4619      	mov	r1, r3
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f8b8 	bl	8002954 <TM_I2C_WriteData>
	TM_I2C_WriteData(I2Cx, data);
 80027e4:	787b      	ldrb	r3, [r7, #1]
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f8b3 	bl	8002954 <TM_I2C_WriteData>
	TM_I2C_Stop(I2Cx);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f940 	bl	8002a74 <TM_I2C_Stop>
}
 80027f4:	bf00      	nop
 80027f6:	3708      	adds	r7, #8
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <TM_I2C_IsDeviceConnected>:
	}
	TM_I2C_Stop(I2Cx);
}


uint8_t TM_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 800280c:	78f9      	ldrb	r1, [r7, #3]
 800280e:	2301      	movs	r3, #1
 8002810:	2200      	movs	r2, #0
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f81a 	bl	800284c <TM_I2C_Start>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d101      	bne.n	8002822 <TM_I2C_IsDeviceConnected+0x26>
		connected = 1;
 800281e:	2301      	movs	r3, #1
 8002820:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f926 	bl	8002a74 <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <TM_I2C_InitCustomPinsCallback>:

__weak void TM_I2C_InitCustomPinsCallback(I2C_TypeDef* I2Cx, uint16_t AlternateFunction) {
 8002832:	b480      	push	{r7}
 8002834:	b083      	sub	sp, #12
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	807b      	strh	r3, [r7, #2]
	/* Custom user function. */
	/* In case user needs functionality for custom pins, this function should be declared outside this library */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
	...

0800284c <TM_I2C_Start>:

/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	70fb      	strb	r3, [r7, #3]
 800285e:	460b      	mov	r3, r1
 8002860:	70bb      	strb	r3, [r7, #2]
 8002862:	4613      	mov	r3, r2
 8002864:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	881b      	ldrh	r3, [r3, #0]
 800286a:	b29b      	uxth	r3, r3
 800286c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002876:	4b35      	ldr	r3, [pc, #212]	; (800294c <TM_I2C_Start+0x100>)
 8002878:	f644 6220 	movw	r2, #20000	; 0x4e20
 800287c:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 800287e:	e00a      	b.n	8002896 <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <TM_I2C_Start+0x100>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	4a31      	ldr	r2, [pc, #196]	; (800294c <TM_I2C_Start+0x100>)
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	4b30      	ldr	r3, [pc, #192]	; (800294c <TM_I2C_Start+0x100>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <TM_I2C_Start+0x4a>
			return 1;
 8002892:	2301      	movs	r3, #1
 8002894:	e056      	b.n	8002944 <TM_I2C_Start+0xf8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	8a9b      	ldrh	r3, [r3, #20]
 800289a:	b29b      	uxth	r3, r3
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0ed      	beq.n	8002880 <TM_I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 80028a4:	787b      	ldrb	r3, [r7, #1]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	881b      	ldrh	r3, [r3, #0]
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b4:	b29a      	uxth	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 80028ba:	78bb      	ldrb	r3, [r7, #2]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11d      	bne.n	80028fc <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 80028c0:	78fb      	ldrb	r3, [r7, #3]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f023 0301 	bic.w	r3, r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <TM_I2C_Start+0x100>)
 80028d0:	f644 6220 	movw	r2, #20000	; 0x4e20
 80028d4:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 80028d6:	e00a      	b.n	80028ee <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <TM_I2C_Start+0x100>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	3b01      	subs	r3, #1
 80028de:	4a1b      	ldr	r2, [pc, #108]	; (800294c <TM_I2C_Start+0x100>)
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	4b1a      	ldr	r3, [pc, #104]	; (800294c <TM_I2C_Start+0x100>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <TM_I2C_Start+0xa2>
				return 1;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e02a      	b.n	8002944 <TM_I2C_Start+0xf8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8a9b      	ldrh	r3, [r3, #20]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0ed      	beq.n	80028d8 <TM_I2C_Start+0x8c>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 80028fc:	78bb      	ldrb	r3, [r7, #2]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d11d      	bne.n	800293e <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	b2db      	uxtb	r3, r3
 800290a:	b29a      	uxth	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002910:	4b0e      	ldr	r3, [pc, #56]	; (800294c <TM_I2C_Start+0x100>)
 8002912:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002916:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8002918:	e00a      	b.n	8002930 <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 800291a:	4b0c      	ldr	r3, [pc, #48]	; (800294c <TM_I2C_Start+0x100>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	3b01      	subs	r3, #1
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <TM_I2C_Start+0x100>)
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b09      	ldr	r3, [pc, #36]	; (800294c <TM_I2C_Start+0x100>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <TM_I2C_Start+0xe4>
				return 1;
 800292c:	2301      	movs	r3, #1
 800292e:	e009      	b.n	8002944 <TM_I2C_Start+0xf8>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8002930:	4907      	ldr	r1, [pc, #28]	; (8002950 <TM_I2C_Start+0x104>)
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7fe fb52 	bl	8000fdc <I2C_CheckEvent>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0ed      	beq.n	800291a <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000124 	.word	0x20000124
 8002950:	00030002 	.word	0x00030002

08002954 <TM_I2C_WriteData>:

void TM_I2C_WriteData(I2C_TypeDef* I2Cx, uint8_t data) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	70fb      	strb	r3, [r7, #3]
	/* Wait till I2C is not busy anymore */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <TM_I2C_WriteData+0x4c>)
 8002962:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002966:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8002968:	e004      	b.n	8002974 <TM_I2C_WriteData+0x20>
		TM_I2C_Timeout--;
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <TM_I2C_WriteData+0x4c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	3b01      	subs	r3, #1
 8002970:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <TM_I2C_WriteData+0x4c>)
 8002972:	6013      	str	r3, [r2, #0]
	while (!(I2Cx->SR1 & I2C_SR1_TXE) && TM_I2C_Timeout) {
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	8a9b      	ldrh	r3, [r3, #20]
 8002978:	b29b      	uxth	r3, r3
 800297a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297e:	2b00      	cmp	r3, #0
 8002980:	d103      	bne.n	800298a <TM_I2C_WriteData+0x36>
 8002982:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <TM_I2C_WriteData+0x4c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1ef      	bne.n	800296a <TM_I2C_WriteData+0x16>
	}
	
	/* Send I2C data */
	I2Cx->DR = data;
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	821a      	strh	r2, [r3, #16]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000124 	.word	0x20000124

080029a4 <TM_I2C_ReadAck>:

uint8_t TM_I2C_ReadAck(I2C_TypeDef* I2Cx) {
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Enable ACK */
	I2Cx->CR1 |= I2C_CR1_ACK;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	881b      	ldrh	r3, [r3, #0]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	801a      	strh	r2, [r3, #0]
	
	/* Wait till not received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <TM_I2C_ReadAck+0x58>)
 80029be:	f644 6220 	movw	r2, #20000	; 0x4e20
 80029c2:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80029c4:	e00a      	b.n	80029dc <TM_I2C_ReadAck+0x38>
		if (--TM_I2C_Timeout == 0x00) {
 80029c6:	4b0d      	ldr	r3, [pc, #52]	; (80029fc <TM_I2C_ReadAck+0x58>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <TM_I2C_ReadAck+0x58>)
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <TM_I2C_ReadAck+0x58>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <TM_I2C_ReadAck+0x38>
			return 1;
 80029d8:	2301      	movs	r3, #1
 80029da:	e00b      	b.n	80029f4 <TM_I2C_ReadAck+0x50>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 80029dc:	4908      	ldr	r1, [pc, #32]	; (8002a00 <TM_I2C_ReadAck+0x5c>)
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f7fe fafc 	bl	8000fdc <I2C_CheckEvent>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0ed      	beq.n	80029c6 <TM_I2C_ReadAck+0x22>
		}
	}
	
	/* Read data */
	data = I2Cx->DR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	8a1b      	ldrh	r3, [r3, #16]
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20000124 	.word	0x20000124
 8002a00:	00030040 	.word	0x00030040

08002a04 <TM_I2C_ReadNack>:

uint8_t TM_I2C_ReadNack(I2C_TypeDef* I2Cx) {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	uint8_t data;
	
	/* Disable ACK */
	I2Cx->CR1 &= ~I2C_CR1_ACK;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	801a      	strh	r2, [r3, #0]
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	881b      	ldrh	r3, [r3, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	b29a      	uxth	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	801a      	strh	r2, [r3, #0]
	
	/* Wait till received */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <TM_I2C_ReadNack+0x68>)
 8002a2e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002a32:	601a      	str	r2, [r3, #0]
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8002a34:	e00a      	b.n	8002a4c <TM_I2C_ReadNack+0x48>
		if (--TM_I2C_Timeout == 0x00) {
 8002a36:	4b0d      	ldr	r3, [pc, #52]	; (8002a6c <TM_I2C_ReadNack+0x68>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	4a0b      	ldr	r2, [pc, #44]	; (8002a6c <TM_I2C_ReadNack+0x68>)
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <TM_I2C_ReadNack+0x68>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d101      	bne.n	8002a4c <TM_I2C_ReadNack+0x48>
			return 1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e00b      	b.n	8002a64 <TM_I2C_ReadNack+0x60>
	while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_BYTE_RECEIVED)) {
 8002a4c:	4908      	ldr	r1, [pc, #32]	; (8002a70 <TM_I2C_ReadNack+0x6c>)
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fac4 	bl	8000fdc <I2C_CheckEvent>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0ed      	beq.n	8002a36 <TM_I2C_ReadNack+0x32>
		}
	}

	/* Read data */
	data = I2Cx->DR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8a1b      	ldrh	r3, [r3, #16]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	73fb      	strb	r3, [r7, #15]
	
	/* Return data */
	return data;
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000124 	.word	0x20000124
 8002a70:	00030040 	.word	0x00030040

08002a74 <TM_I2C_Stop>:

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8002a7c:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <TM_I2C_Stop+0x64>)
 8002a7e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002a82:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8002a84:	e00a      	b.n	8002a9c <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 8002a86:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <TM_I2C_Stop+0x64>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3b01      	subs	r3, #1
 8002a8c:	4a12      	ldr	r2, [pc, #72]	; (8002ad8 <TM_I2C_Stop+0x64>)
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <TM_I2C_Stop+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <TM_I2C_Stop+0x28>
			return 1;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e016      	b.n	8002aca <TM_I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	8a9b      	ldrh	r3, [r3, #20]
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0ed      	beq.n	8002a86 <TM_I2C_Stop+0x12>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	8a9b      	ldrh	r3, [r3, #20]
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0e6      	beq.n	8002a86 <TM_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	881b      	ldrh	r3, [r3, #0]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000124 	.word	0x20000124

08002adc <TM_I2C1_INT_InitPins>:




/* Private functions */
static void TM_I2C1_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <TM_I2C1_INT_InitPins+0x24>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_7, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002aec:	2304      	movs	r3, #4
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	2301      	movs	r3, #1
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	2301      	movs	r3, #1
 8002af6:	2201      	movs	r2, #1
 8002af8:	21c0      	movs	r1, #192	; 0xc0
 8002afa:	4815      	ldr	r0, [pc, #84]	; (8002b50 <TM_I2C1_INT_InitPins+0x74>)
 8002afc:	f7ff fc5e 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d10a      	bne.n	8002b1c <TM_I2C1_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_8 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002b06:	2304      	movs	r3, #4
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	2301      	movs	r3, #1
 8002b10:	2201      	movs	r2, #1
 8002b12:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002b16:	480e      	ldr	r0, [pc, #56]	; (8002b50 <TM_I2C1_INT_InitPins+0x74>)
 8002b18:	f7ff fc50 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d10a      	bne.n	8002b38 <TM_I2C1_INT_InitPins+0x5c>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_6 | GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C1);
 8002b22:	2304      	movs	r3, #4
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2301      	movs	r3, #1
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002b32:	4807      	ldr	r0, [pc, #28]	; (8002b50 <TM_I2C1_INT_InitPins+0x74>)
 8002b34:	f7ff fc42 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d103      	bne.n	8002b46 <TM_I2C1_INT_InitPins+0x6a>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C1, GPIO_AF_I2C1);
 8002b3e:	2104      	movs	r1, #4
 8002b40:	4804      	ldr	r0, [pc, #16]	; (8002b54 <TM_I2C1_INT_InitPins+0x78>)
 8002b42:	f7ff fe76 	bl	8002832 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40020400 	.word	0x40020400
 8002b54:	40005400 	.word	0x40005400

08002b58 <TM_I2C2_INT_InitPins>:

static void TM_I2C2_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOB)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002b62:	79fb      	ldrb	r3, [r7, #7]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <TM_I2C2_INT_InitPins+0x26>
		TM_GPIO_InitAlternate(GPIOB, GPIO_PIN_10 | GPIO_PIN_11, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002b68:	2304      	movs	r3, #4
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2301      	movs	r3, #1
 8002b72:	2201      	movs	r2, #1
 8002b74:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002b78:	4813      	ldr	r0, [pc, #76]	; (8002bc8 <TM_I2C2_INT_InitPins+0x70>)
 8002b7a:	f7ff fc1f 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOF)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d109      	bne.n	8002b98 <TM_I2C2_INT_InitPins+0x40>
		TM_GPIO_InitAlternate(GPIOF, GPIO_PIN_0 | GPIO_PIN_1, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002b84:	2304      	movs	r3, #4
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	2201      	movs	r2, #1
 8002b90:	2103      	movs	r1, #3
 8002b92:	480e      	ldr	r0, [pc, #56]	; (8002bcc <TM_I2C2_INT_InitPins+0x74>)
 8002b94:	f7ff fc12 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_3) {
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d109      	bne.n	8002bb2 <TM_I2C2_INT_InitPins+0x5a>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_4 | GPIO_PIN_5, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C2);
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	9301      	str	r3, [sp, #4]
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	2201      	movs	r2, #1
 8002baa:	2130      	movs	r1, #48	; 0x30
 8002bac:	4808      	ldr	r0, [pc, #32]	; (8002bd0 <TM_I2C2_INT_InitPins+0x78>)
 8002bae:	f7ff fc05 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d103      	bne.n	8002bc0 <TM_I2C2_INT_InitPins+0x68>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C2, GPIO_AF_I2C2);
 8002bb8:	2104      	movs	r1, #4
 8002bba:	4806      	ldr	r0, [pc, #24]	; (8002bd4 <TM_I2C2_INT_InitPins+0x7c>)
 8002bbc:	f7ff fe39 	bl	8002832 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002bc0:	bf00      	nop
 8002bc2:	3708      	adds	r7, #8
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40020400 	.word	0x40020400
 8002bcc:	40021400 	.word	0x40021400
 8002bd0:	40021c00 	.word	0x40021c00
 8002bd4:	40005800 	.word	0x40005800

08002bd8 <TM_I2C3_INT_InitPins>:

static void TM_I2C3_INT_InitPins(TM_I2C_PinsPack_t pinspack) {
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
	/* Init pins */
#if defined(GPIOA) && defined(GPIOC)
	if (pinspack == TM_I2C_PinsPack_1) {
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d115      	bne.n	8002c14 <TM_I2C3_INT_InitPins+0x3c>
		TM_GPIO_InitAlternate(GPIOA, GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002be8:	2304      	movs	r3, #4
 8002bea:	9301      	str	r3, [sp, #4]
 8002bec:	2301      	movs	r3, #1
 8002bee:	9300      	str	r3, [sp, #0]
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bf8:	4813      	ldr	r0, [pc, #76]	; (8002c48 <TM_I2C3_INT_InitPins+0x70>)
 8002bfa:	f7ff fbdf 	bl	80023bc <TM_GPIO_InitAlternate>
		TM_GPIO_InitAlternate(GPIOC, GPIO_PIN_9, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002bfe:	2304      	movs	r3, #4
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	2301      	movs	r3, #1
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2301      	movs	r3, #1
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c0e:	480f      	ldr	r0, [pc, #60]	; (8002c4c <TM_I2C3_INT_InitPins+0x74>)
 8002c10:	f7ff fbd4 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
#if defined(GPIOH)
	if (pinspack == TM_I2C_PinsPack_2) {
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d10a      	bne.n	8002c30 <TM_I2C3_INT_InitPins+0x58>
		TM_GPIO_InitAlternate(GPIOH, GPIO_PIN_7 | GPIO_PIN_8, TM_GPIO_OType_OD, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Medium, GPIO_AF_I2C3);
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	2301      	movs	r3, #1
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	2301      	movs	r3, #1
 8002c24:	2201      	movs	r2, #1
 8002c26:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8002c2a:	4809      	ldr	r0, [pc, #36]	; (8002c50 <TM_I2C3_INT_InitPins+0x78>)
 8002c2c:	f7ff fbc6 	bl	80023bc <TM_GPIO_InitAlternate>
	}
#endif
	if (pinspack == TM_I2C_PinsPack_Custom) {
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d103      	bne.n	8002c3e <TM_I2C3_INT_InitPins+0x66>
		/* Init custom pins, callback function */
		TM_I2C_InitCustomPinsCallback(I2C3, GPIO_AF_I2C3);
 8002c36:	2104      	movs	r1, #4
 8002c38:	4806      	ldr	r0, [pc, #24]	; (8002c54 <TM_I2C3_INT_InitPins+0x7c>)
 8002c3a:	f7ff fdfa 	bl	8002832 <TM_I2C_InitCustomPinsCallback>
	}
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	40020000 	.word	0x40020000
 8002c4c:	40020800 	.word	0x40020800
 8002c50:	40021c00 	.word	0x40021c00
 8002c54:	40005c00 	.word	0x40005c00

08002c58 <TM_MPU6050_Init>:
#include "tm_stm32f4_mpu6050.h"

TM_MPU6050_Result_t TM_MPU6050_Init(TM_MPU6050_t* DataStruct,
		TM_MPU6050_Device_t DeviceNumber,
		TM_MPU6050_Accelerometer_t AccelerometerSensitivity,
		TM_MPU6050_Gyroscope_t GyroscopeSensitivity) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	4608      	mov	r0, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	461a      	mov	r2, r3
 8002c66:	4603      	mov	r3, r0
 8002c68:	70fb      	strb	r3, [r7, #3]
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	70bb      	strb	r3, [r7, #2]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	707b      	strb	r3, [r7, #1]
	uint8_t temp;

	/* Format I2C address */
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t) DeviceNumber;
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8002c78:	b2da      	uxtb	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	701a      	strb	r2, [r3, #0]

	/* Initialize I2C */
	TM_I2C_Init(MPU6050_I2C, MPU6050_I2C_PINSPACK, MPU6050_I2C_CLOCK);
 8002c7e:	4a4f      	ldr	r2, [pc, #316]	; (8002dbc <TM_MPU6050_Init+0x164>)
 8002c80:	2100      	movs	r1, #0
 8002c82:	484f      	ldr	r0, [pc, #316]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002c84:	f7ff fc9c 	bl	80025c0 <TM_I2C_Init>

	/* Check if device is connected */
	if (!TM_I2C_IsDeviceConnected(MPU6050_I2C, DataStruct->Address)) {
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	484c      	ldr	r0, [pc, #304]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002c90:	f7ff fdb4 	bl	80027fc <TM_I2C_IsDeviceConnected>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <TM_MPU6050_Init+0x46>
		/* Return error */
		return TM_MPU6050_Result_DeviceNotConnected;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e089      	b.n	8002db2 <TM_MPU6050_Init+0x15a>
	}

	/* Check who I am */
	if (TM_I2C_Read(MPU6050_I2C, DataStruct->Address,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2275      	movs	r2, #117	; 0x75
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4846      	ldr	r0, [pc, #280]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002ca8:	f7ff fd26 	bl	80026f8 <TM_I2C_Read>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b68      	cmp	r3, #104	; 0x68
 8002cb0:	d001      	beq.n	8002cb6 <TM_MPU6050_Init+0x5e>
			MPU6050_WHO_AM_I) != MPU6050_I_AM) {
		/* Return error */
		return TM_MPU6050_Result_DeviceInvalid;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	e07d      	b.n	8002db2 <TM_MPU6050_Init+0x15a>
	}

	/* Wakeup MPU6050 */
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_PWR_MGMT_1, 0x00);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7819      	ldrb	r1, [r3, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	226b      	movs	r2, #107	; 0x6b
 8002cbe:	4840      	ldr	r0, [pc, #256]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002cc0:	f7ff fd78 	bl	80027b4 <TM_I2C_Write>

	/* Config accelerometer */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	221c      	movs	r2, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	483c      	ldr	r0, [pc, #240]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002cce:	f7ff fd13 	bl	80026f8 <TM_I2C_Read>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t) AccelerometerSensitivity << 3;
 8002cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cda:	f023 0318 	bic.w	r3, r3, #24
 8002cde:	b25a      	sxtb	r2, r3
 8002ce0:	78bb      	ldrb	r3, [r7, #2]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	b25b      	sxtb	r3, r3
 8002cea:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_CONFIG, temp);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7819      	ldrb	r1, [r3, #0]
 8002cf0:	7bfb      	ldrb	r3, [r7, #15]
 8002cf2:	221c      	movs	r2, #28
 8002cf4:	4832      	ldr	r0, [pc, #200]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002cf6:	f7ff fd5d 	bl	80027b4 <TM_I2C_Write>

	/* Config gyroscope */
	temp = TM_I2C_Read(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	221b      	movs	r2, #27
 8002d00:	4619      	mov	r1, r3
 8002d02:	482f      	ldr	r0, [pc, #188]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002d04:	f7ff fcf8 	bl	80026f8 <TM_I2C_Read>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	73fb      	strb	r3, [r7, #15]
	temp = (temp & 0xE7) | (uint8_t) GyroscopeSensitivity << 3;
 8002d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d10:	f023 0318 	bic.w	r3, r3, #24
 8002d14:	b25a      	sxtb	r2, r3
 8002d16:	787b      	ldrb	r3, [r7, #1]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	73fb      	strb	r3, [r7, #15]
	TM_I2C_Write(MPU6050_I2C, DataStruct->Address, MPU6050_GYRO_CONFIG, temp);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7819      	ldrb	r1, [r3, #0]
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	221b      	movs	r2, #27
 8002d2a:	4825      	ldr	r0, [pc, #148]	; (8002dc0 <TM_MPU6050_Init+0x168>)
 8002d2c:	f7ff fd42 	bl	80027b4 <TM_I2C_Write>

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 8002d30:	78bb      	ldrb	r3, [r7, #2]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d81d      	bhi.n	8002d72 <TM_MPU6050_Init+0x11a>
 8002d36:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <TM_MPU6050_Init+0xe4>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d57 	.word	0x08002d57
 8002d44:	08002d61 	.word	0x08002d61
 8002d48:	08002d6b 	.word	0x08002d6b
	case TM_MPU6050_Accelerometer_2G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8002d52:	609a      	str	r2, [r3, #8]
		break;
 8002d54:	e00e      	b.n	8002d74 <TM_MPU6050_Init+0x11c>
	case TM_MPU6050_Accelerometer_4G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_4;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8002d5c:	609a      	str	r2, [r3, #8]
		break;
 8002d5e:	e009      	b.n	8002d74 <TM_MPU6050_Init+0x11c>
	case TM_MPU6050_Accelerometer_8G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_8;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8002d66:	609a      	str	r2, [r3, #8]
		break;
 8002d68:	e004      	b.n	8002d74 <TM_MPU6050_Init+0x11c>
	case TM_MPU6050_Accelerometer_16G:
		DataStruct->Acce_Mult = (float) 1 / MPU6050_ACCE_SENS_16;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8002d70:	609a      	str	r2, [r3, #8]
	default:
		break;
 8002d72:	bf00      	nop
	}

	switch (GyroscopeSensitivity) {
 8002d74:	787b      	ldrb	r3, [r7, #1]
 8002d76:	2b03      	cmp	r3, #3
 8002d78:	d819      	bhi.n	8002dae <TM_MPU6050_Init+0x156>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <TM_MPU6050_Init+0x128>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d91 	.word	0x08002d91
 8002d84:	08002d99 	.word	0x08002d99
 8002d88:	08002da1 	.word	0x08002da1
 8002d8c:	08002da9 	.word	0x08002da9
	case TM_MPU6050_Gyroscope_250s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_250;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <TM_MPU6050_Init+0x16c>)
 8002d94:	605a      	str	r2, [r3, #4]
		break;
 8002d96:	e00b      	b.n	8002db0 <TM_MPU6050_Init+0x158>
	case TM_MPU6050_Gyroscope_500s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_500;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <TM_MPU6050_Init+0x170>)
 8002d9c:	605a      	str	r2, [r3, #4]
		break;
 8002d9e:	e007      	b.n	8002db0 <TM_MPU6050_Init+0x158>
	case TM_MPU6050_Gyroscope_1000s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_1000;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <TM_MPU6050_Init+0x174>)
 8002da4:	605a      	str	r2, [r3, #4]
		break;
 8002da6:	e003      	b.n	8002db0 <TM_MPU6050_Init+0x158>
	case TM_MPU6050_Gyroscope_2000s:
		DataStruct->Gyro_Mult = (float) 1 / MPU6050_GYRO_SENS_2000;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <TM_MPU6050_Init+0x178>)
 8002dac:	605a      	str	r2, [r3, #4]
	default:
		break;
 8002dae:	bf00      	nop
	}

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	00061a80 	.word	0x00061a80
 8002dc0:	40005c00 	.word	0x40005c00
 8002dc4:	3bfa232d 	.word	0x3bfa232d
 8002dc8:	3c7a232d 	.word	0x3c7a232d
 8002dcc:	3cf9c190 	.word	0x3cf9c190
 8002dd0:	3d79c190 	.word	0x3d79c190

08002dd4 <TM_MPU6050_ReadAll>:

	/* Return OK */
	return TM_MPU6050_Result_Ok;
}

TM_MPU6050_Result_t TM_MPU6050_ReadAll(TM_MPU6050_t* DataStruct) {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	6078      	str	r0, [r7, #4]
	uint8_t data[14];
	int16_t temp;

	/* Read full raw data, 14bytes */
	TM_I2C_ReadMulti(MPU6050_I2C, DataStruct->Address, MPU6050_ACCEL_XOUT_H,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	7819      	ldrb	r1, [r3, #0]
 8002de0:	f107 0208 	add.w	r2, r7, #8
 8002de4:	230e      	movs	r3, #14
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	223b      	movs	r2, #59	; 0x3b
 8002dec:	482a      	ldr	r0, [pc, #168]	; (8002e98 <TM_MPU6050_ReadAll+0xc4>)
 8002dee:	f7ff fca9 	bl	8002744 <TM_I2C_ReadMulti>
			data, 14);

	/* Format accelerometer data */
	DataStruct->Accelerometer_X = (int16_t) (data[0] << 8 | data[1]);
 8002df2:	7a3b      	ldrb	r3, [r7, #8]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	b21a      	sxth	r2, r3
 8002df8:	7a7b      	ldrb	r3, [r7, #9]
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b21a      	sxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	819a      	strh	r2, [r3, #12]
	DataStruct->Accelerometer_Y = (int16_t) (data[2] << 8 | data[3]);
 8002e04:	7abb      	ldrb	r3, [r7, #10]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	b21a      	sxth	r2, r3
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	b21a      	sxth	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	81da      	strh	r2, [r3, #14]
	DataStruct->Accelerometer_Z = (int16_t) (data[4] << 8 | data[5]);
 8002e16:	7b3b      	ldrb	r3, [r7, #12]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	7b7b      	ldrb	r3, [r7, #13]
 8002e1e:	b21b      	sxth	r3, r3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b21a      	sxth	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	821a      	strh	r2, [r3, #16]

	/* Format temperature */
	temp = (data[6] << 8 | data[7]);
 8002e28:	7bbb      	ldrb	r3, [r7, #14]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	b21b      	sxth	r3, r3
 8002e32:	4313      	orrs	r3, r2
 8002e34:	82fb      	strh	r3, [r7, #22]
	DataStruct->Temperature = (float) ((float) ((int16_t) temp) / (float) 340.0
 8002e36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e42:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002e9c <TM_MPU6050_ReadAll+0xc8>
 8002e46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e4a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002ea0 <TM_MPU6050_ReadAll+0xcc>
 8002e4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	edc3 7a06 	vstr	s15, [r3, #24]
			+ (float) 36.53);

	/* Format gyroscope data */
	DataStruct->Gyroscope_X = (int16_t) (data[8] << 8 | data[9]);
 8002e58:	7c3b      	ldrb	r3, [r7, #16]
 8002e5a:	021b      	lsls	r3, r3, #8
 8002e5c:	b21a      	sxth	r2, r3
 8002e5e:	7c7b      	ldrb	r3, [r7, #17]
 8002e60:	b21b      	sxth	r3, r3
 8002e62:	4313      	orrs	r3, r2
 8002e64:	b21a      	sxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	825a      	strh	r2, [r3, #18]
	DataStruct->Gyroscope_Y = (int16_t) (data[10] << 8 | data[11]);
 8002e6a:	7cbb      	ldrb	r3, [r7, #18]
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	b21a      	sxth	r2, r3
 8002e70:	7cfb      	ldrb	r3, [r7, #19]
 8002e72:	b21b      	sxth	r3, r3
 8002e74:	4313      	orrs	r3, r2
 8002e76:	b21a      	sxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	829a      	strh	r2, [r3, #20]
	DataStruct->Gyroscope_Z = (int16_t) (data[12] << 8 | data[13]);
 8002e7c:	7d3b      	ldrb	r3, [r7, #20]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	b21a      	sxth	r2, r3
 8002e82:	7d7b      	ldrb	r3, [r7, #21]
 8002e84:	b21b      	sxth	r3, r3
 8002e86:	4313      	orrs	r3, r2
 8002e88:	b21a      	sxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	82da      	strh	r2, [r3, #22]

	/* Return OK */
	return TM_MPU6050_Result_Ok;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40005c00 	.word	0x40005c00
 8002e9c:	43aa0000 	.word	0x43aa0000
 8002ea0:	42121eb8 	.word	0x42121eb8

08002ea4 <__libc_init_array>:
 8002ea4:	b570      	push	{r4, r5, r6, lr}
 8002ea6:	4e0d      	ldr	r6, [pc, #52]	; (8002edc <__libc_init_array+0x38>)
 8002ea8:	4c0d      	ldr	r4, [pc, #52]	; (8002ee0 <__libc_init_array+0x3c>)
 8002eaa:	1ba4      	subs	r4, r4, r6
 8002eac:	10a4      	asrs	r4, r4, #2
 8002eae:	2500      	movs	r5, #0
 8002eb0:	42a5      	cmp	r5, r4
 8002eb2:	d109      	bne.n	8002ec8 <__libc_init_array+0x24>
 8002eb4:	4e0b      	ldr	r6, [pc, #44]	; (8002ee4 <__libc_init_array+0x40>)
 8002eb6:	4c0c      	ldr	r4, [pc, #48]	; (8002ee8 <__libc_init_array+0x44>)
 8002eb8:	f000 faa6 	bl	8003408 <_init>
 8002ebc:	1ba4      	subs	r4, r4, r6
 8002ebe:	10a4      	asrs	r4, r4, #2
 8002ec0:	2500      	movs	r5, #0
 8002ec2:	42a5      	cmp	r5, r4
 8002ec4:	d105      	bne.n	8002ed2 <__libc_init_array+0x2e>
 8002ec6:	bd70      	pop	{r4, r5, r6, pc}
 8002ec8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ecc:	4798      	blx	r3
 8002ece:	3501      	adds	r5, #1
 8002ed0:	e7ee      	b.n	8002eb0 <__libc_init_array+0xc>
 8002ed2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed6:	4798      	blx	r3
 8002ed8:	3501      	adds	r5, #1
 8002eda:	e7f2      	b.n	8002ec2 <__libc_init_array+0x1e>
 8002edc:	08003468 	.word	0x08003468
 8002ee0:	08003468 	.word	0x08003468
 8002ee4:	08003468 	.word	0x08003468
 8002ee8:	0800346c 	.word	0x0800346c

08002eec <atan2>:
 8002eec:	f000 b800 	b.w	8002ef0 <__ieee754_atan2>

08002ef0 <__ieee754_atan2>:
 8002ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef4:	ec57 6b11 	vmov	r6, r7, d1
 8002ef8:	4273      	negs	r3, r6
 8002efa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8002efe:	4333      	orrs	r3, r6
 8002f00:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80030a0 <__ieee754_atan2+0x1b0>
 8002f04:	ec51 0b10 	vmov	r0, r1, d0
 8002f08:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8002f0c:	4563      	cmp	r3, ip
 8002f0e:	ee11 8a10 	vmov	r8, s2
 8002f12:	ee10 9a10 	vmov	r9, s0
 8002f16:	468e      	mov	lr, r1
 8002f18:	d807      	bhi.n	8002f2a <__ieee754_atan2+0x3a>
 8002f1a:	4244      	negs	r4, r0
 8002f1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002f20:	4304      	orrs	r4, r0
 8002f22:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8002f26:	4564      	cmp	r4, ip
 8002f28:	d907      	bls.n	8002f3a <__ieee754_atan2+0x4a>
 8002f2a:	4632      	mov	r2, r6
 8002f2c:	463b      	mov	r3, r7
 8002f2e:	f7fd f951 	bl	80001d4 <__adddf3>
 8002f32:	ec41 0b10 	vmov	d0, r0, r1
 8002f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f3a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8002f3e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002f42:	4334      	orrs	r4, r6
 8002f44:	d103      	bne.n	8002f4e <__ieee754_atan2+0x5e>
 8002f46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f4a:	f000 b8ad 	b.w	80030a8 <atan>
 8002f4e:	17bc      	asrs	r4, r7, #30
 8002f50:	f004 0402 	and.w	r4, r4, #2
 8002f54:	ea59 0903 	orrs.w	r9, r9, r3
 8002f58:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8002f5c:	d107      	bne.n	8002f6e <__ieee754_atan2+0x7e>
 8002f5e:	2c02      	cmp	r4, #2
 8002f60:	d030      	beq.n	8002fc4 <__ieee754_atan2+0xd4>
 8002f62:	2c03      	cmp	r4, #3
 8002f64:	d1e5      	bne.n	8002f32 <__ieee754_atan2+0x42>
 8002f66:	a13c      	add	r1, pc, #240	; (adr r1, 8003058 <__ieee754_atan2+0x168>)
 8002f68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f6c:	e7e1      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002f6e:	ea58 0802 	orrs.w	r8, r8, r2
 8002f72:	d106      	bne.n	8002f82 <__ieee754_atan2+0x92>
 8002f74:	f1be 0f00 	cmp.w	lr, #0
 8002f78:	da6a      	bge.n	8003050 <__ieee754_atan2+0x160>
 8002f7a:	a139      	add	r1, pc, #228	; (adr r1, 8003060 <__ieee754_atan2+0x170>)
 8002f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f80:	e7d7      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002f82:	4562      	cmp	r2, ip
 8002f84:	d122      	bne.n	8002fcc <__ieee754_atan2+0xdc>
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d111      	bne.n	8002fae <__ieee754_atan2+0xbe>
 8002f8a:	2c02      	cmp	r4, #2
 8002f8c:	d007      	beq.n	8002f9e <__ieee754_atan2+0xae>
 8002f8e:	2c03      	cmp	r4, #3
 8002f90:	d009      	beq.n	8002fa6 <__ieee754_atan2+0xb6>
 8002f92:	2c01      	cmp	r4, #1
 8002f94:	d156      	bne.n	8003044 <__ieee754_atan2+0x154>
 8002f96:	a134      	add	r1, pc, #208	; (adr r1, 8003068 <__ieee754_atan2+0x178>)
 8002f98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f9c:	e7c9      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002f9e:	a134      	add	r1, pc, #208	; (adr r1, 8003070 <__ieee754_atan2+0x180>)
 8002fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fa4:	e7c5      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002fa6:	a134      	add	r1, pc, #208	; (adr r1, 8003078 <__ieee754_atan2+0x188>)
 8002fa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fac:	e7c1      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002fae:	2c02      	cmp	r4, #2
 8002fb0:	d008      	beq.n	8002fc4 <__ieee754_atan2+0xd4>
 8002fb2:	2c03      	cmp	r4, #3
 8002fb4:	d0d7      	beq.n	8002f66 <__ieee754_atan2+0x76>
 8002fb6:	2c01      	cmp	r4, #1
 8002fb8:	f04f 0000 	mov.w	r0, #0
 8002fbc:	d146      	bne.n	800304c <__ieee754_atan2+0x15c>
 8002fbe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002fc2:	e7b6      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002fc4:	a12e      	add	r1, pc, #184	; (adr r1, 8003080 <__ieee754_atan2+0x190>)
 8002fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fca:	e7b2      	b.n	8002f32 <__ieee754_atan2+0x42>
 8002fcc:	4563      	cmp	r3, ip
 8002fce:	d0d1      	beq.n	8002f74 <__ieee754_atan2+0x84>
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	151b      	asrs	r3, r3, #20
 8002fd4:	2b3c      	cmp	r3, #60	; 0x3c
 8002fd6:	dc1e      	bgt.n	8003016 <__ieee754_atan2+0x126>
 8002fd8:	2f00      	cmp	r7, #0
 8002fda:	da01      	bge.n	8002fe0 <__ieee754_atan2+0xf0>
 8002fdc:	333c      	adds	r3, #60	; 0x3c
 8002fde:	db1e      	blt.n	800301e <__ieee754_atan2+0x12e>
 8002fe0:	4632      	mov	r2, r6
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	f7fd fbd2 	bl	800078c <__aeabi_ddiv>
 8002fe8:	ec41 0b10 	vmov	d0, r0, r1
 8002fec:	f000 fa04 	bl	80033f8 <fabs>
 8002ff0:	f000 f85a 	bl	80030a8 <atan>
 8002ff4:	ec51 0b10 	vmov	r0, r1, d0
 8002ff8:	2c01      	cmp	r4, #1
 8002ffa:	d013      	beq.n	8003024 <__ieee754_atan2+0x134>
 8002ffc:	2c02      	cmp	r4, #2
 8002ffe:	d014      	beq.n	800302a <__ieee754_atan2+0x13a>
 8003000:	2c00      	cmp	r4, #0
 8003002:	d096      	beq.n	8002f32 <__ieee754_atan2+0x42>
 8003004:	a320      	add	r3, pc, #128	; (adr r3, 8003088 <__ieee754_atan2+0x198>)
 8003006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300a:	f7fd f8e1 	bl	80001d0 <__aeabi_dsub>
 800300e:	a31c      	add	r3, pc, #112	; (adr r3, 8003080 <__ieee754_atan2+0x190>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	e013      	b.n	800303e <__ieee754_atan2+0x14e>
 8003016:	a11e      	add	r1, pc, #120	; (adr r1, 8003090 <__ieee754_atan2+0x1a0>)
 8003018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800301c:	e7ec      	b.n	8002ff8 <__ieee754_atan2+0x108>
 800301e:	2000      	movs	r0, #0
 8003020:	2100      	movs	r1, #0
 8003022:	e7e9      	b.n	8002ff8 <__ieee754_atan2+0x108>
 8003024:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003028:	e783      	b.n	8002f32 <__ieee754_atan2+0x42>
 800302a:	a317      	add	r3, pc, #92	; (adr r3, 8003088 <__ieee754_atan2+0x198>)
 800302c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003030:	f7fd f8ce 	bl	80001d0 <__aeabi_dsub>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	a111      	add	r1, pc, #68	; (adr r1, 8003080 <__ieee754_atan2+0x190>)
 800303a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800303e:	f7fd f8c7 	bl	80001d0 <__aeabi_dsub>
 8003042:	e776      	b.n	8002f32 <__ieee754_atan2+0x42>
 8003044:	a114      	add	r1, pc, #80	; (adr r1, 8003098 <__ieee754_atan2+0x1a8>)
 8003046:	e9d1 0100 	ldrd	r0, r1, [r1]
 800304a:	e772      	b.n	8002f32 <__ieee754_atan2+0x42>
 800304c:	2100      	movs	r1, #0
 800304e:	e770      	b.n	8002f32 <__ieee754_atan2+0x42>
 8003050:	a10f      	add	r1, pc, #60	; (adr r1, 8003090 <__ieee754_atan2+0x1a0>)
 8003052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003056:	e76c      	b.n	8002f32 <__ieee754_atan2+0x42>
 8003058:	54442d18 	.word	0x54442d18
 800305c:	c00921fb 	.word	0xc00921fb
 8003060:	54442d18 	.word	0x54442d18
 8003064:	bff921fb 	.word	0xbff921fb
 8003068:	54442d18 	.word	0x54442d18
 800306c:	bfe921fb 	.word	0xbfe921fb
 8003070:	7f3321d2 	.word	0x7f3321d2
 8003074:	4002d97c 	.word	0x4002d97c
 8003078:	7f3321d2 	.word	0x7f3321d2
 800307c:	c002d97c 	.word	0xc002d97c
 8003080:	54442d18 	.word	0x54442d18
 8003084:	400921fb 	.word	0x400921fb
 8003088:	33145c07 	.word	0x33145c07
 800308c:	3ca1a626 	.word	0x3ca1a626
 8003090:	54442d18 	.word	0x54442d18
 8003094:	3ff921fb 	.word	0x3ff921fb
 8003098:	54442d18 	.word	0x54442d18
 800309c:	3fe921fb 	.word	0x3fe921fb
 80030a0:	7ff00000 	.word	0x7ff00000
 80030a4:	00000000 	.word	0x00000000

080030a8 <atan>:
 80030a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030ac:	ec55 4b10 	vmov	r4, r5, d0
 80030b0:	4bc7      	ldr	r3, [pc, #796]	; (80033d0 <atan+0x328>)
 80030b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80030b6:	429e      	cmp	r6, r3
 80030b8:	46ab      	mov	fp, r5
 80030ba:	dd18      	ble.n	80030ee <atan+0x46>
 80030bc:	4ac5      	ldr	r2, [pc, #788]	; (80033d4 <atan+0x32c>)
 80030be:	4296      	cmp	r6, r2
 80030c0:	dc01      	bgt.n	80030c6 <atan+0x1e>
 80030c2:	d109      	bne.n	80030d8 <atan+0x30>
 80030c4:	b144      	cbz	r4, 80030d8 <atan+0x30>
 80030c6:	4622      	mov	r2, r4
 80030c8:	462b      	mov	r3, r5
 80030ca:	4620      	mov	r0, r4
 80030cc:	4629      	mov	r1, r5
 80030ce:	f7fd f881 	bl	80001d4 <__adddf3>
 80030d2:	4604      	mov	r4, r0
 80030d4:	460d      	mov	r5, r1
 80030d6:	e006      	b.n	80030e6 <atan+0x3e>
 80030d8:	f1bb 0f00 	cmp.w	fp, #0
 80030dc:	f300 813a 	bgt.w	8003354 <atan+0x2ac>
 80030e0:	a59f      	add	r5, pc, #636	; (adr r5, 8003360 <atan+0x2b8>)
 80030e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80030e6:	ec45 4b10 	vmov	d0, r4, r5
 80030ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030ee:	4bba      	ldr	r3, [pc, #744]	; (80033d8 <atan+0x330>)
 80030f0:	429e      	cmp	r6, r3
 80030f2:	dc14      	bgt.n	800311e <atan+0x76>
 80030f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80030f8:	429e      	cmp	r6, r3
 80030fa:	dc0d      	bgt.n	8003118 <atan+0x70>
 80030fc:	a39a      	add	r3, pc, #616	; (adr r3, 8003368 <atan+0x2c0>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	ee10 0a10 	vmov	r0, s0
 8003106:	4629      	mov	r1, r5
 8003108:	f7fd f864 	bl	80001d4 <__adddf3>
 800310c:	2200      	movs	r2, #0
 800310e:	4bb3      	ldr	r3, [pc, #716]	; (80033dc <atan+0x334>)
 8003110:	f7fd fca2 	bl	8000a58 <__aeabi_dcmpgt>
 8003114:	2800      	cmp	r0, #0
 8003116:	d1e6      	bne.n	80030e6 <atan+0x3e>
 8003118:	f04f 3aff 	mov.w	sl, #4294967295
 800311c:	e02b      	b.n	8003176 <atan+0xce>
 800311e:	f000 f96b 	bl	80033f8 <fabs>
 8003122:	4baf      	ldr	r3, [pc, #700]	; (80033e0 <atan+0x338>)
 8003124:	429e      	cmp	r6, r3
 8003126:	ec55 4b10 	vmov	r4, r5, d0
 800312a:	f300 80bf 	bgt.w	80032ac <atan+0x204>
 800312e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8003132:	429e      	cmp	r6, r3
 8003134:	f300 80a0 	bgt.w	8003278 <atan+0x1d0>
 8003138:	ee10 2a10 	vmov	r2, s0
 800313c:	ee10 0a10 	vmov	r0, s0
 8003140:	462b      	mov	r3, r5
 8003142:	4629      	mov	r1, r5
 8003144:	f7fd f846 	bl	80001d4 <__adddf3>
 8003148:	2200      	movs	r2, #0
 800314a:	4ba4      	ldr	r3, [pc, #656]	; (80033dc <atan+0x334>)
 800314c:	f7fd f840 	bl	80001d0 <__aeabi_dsub>
 8003150:	2200      	movs	r2, #0
 8003152:	4606      	mov	r6, r0
 8003154:	460f      	mov	r7, r1
 8003156:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800315a:	4620      	mov	r0, r4
 800315c:	4629      	mov	r1, r5
 800315e:	f7fd f839 	bl	80001d4 <__adddf3>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4630      	mov	r0, r6
 8003168:	4639      	mov	r1, r7
 800316a:	f7fd fb0f 	bl	800078c <__aeabi_ddiv>
 800316e:	f04f 0a00 	mov.w	sl, #0
 8003172:	4604      	mov	r4, r0
 8003174:	460d      	mov	r5, r1
 8003176:	4622      	mov	r2, r4
 8003178:	462b      	mov	r3, r5
 800317a:	4620      	mov	r0, r4
 800317c:	4629      	mov	r1, r5
 800317e:	f7fd f9db 	bl	8000538 <__aeabi_dmul>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4680      	mov	r8, r0
 8003188:	4689      	mov	r9, r1
 800318a:	f7fd f9d5 	bl	8000538 <__aeabi_dmul>
 800318e:	a378      	add	r3, pc, #480	; (adr r3, 8003370 <atan+0x2c8>)
 8003190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003194:	4606      	mov	r6, r0
 8003196:	460f      	mov	r7, r1
 8003198:	f7fd f9ce 	bl	8000538 <__aeabi_dmul>
 800319c:	a376      	add	r3, pc, #472	; (adr r3, 8003378 <atan+0x2d0>)
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f7fd f817 	bl	80001d4 <__adddf3>
 80031a6:	4632      	mov	r2, r6
 80031a8:	463b      	mov	r3, r7
 80031aa:	f7fd f9c5 	bl	8000538 <__aeabi_dmul>
 80031ae:	a374      	add	r3, pc, #464	; (adr r3, 8003380 <atan+0x2d8>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd f80e 	bl	80001d4 <__adddf3>
 80031b8:	4632      	mov	r2, r6
 80031ba:	463b      	mov	r3, r7
 80031bc:	f7fd f9bc 	bl	8000538 <__aeabi_dmul>
 80031c0:	a371      	add	r3, pc, #452	; (adr r3, 8003388 <atan+0x2e0>)
 80031c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c6:	f7fd f805 	bl	80001d4 <__adddf3>
 80031ca:	4632      	mov	r2, r6
 80031cc:	463b      	mov	r3, r7
 80031ce:	f7fd f9b3 	bl	8000538 <__aeabi_dmul>
 80031d2:	a36f      	add	r3, pc, #444	; (adr r3, 8003390 <atan+0x2e8>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fc fffc 	bl	80001d4 <__adddf3>
 80031dc:	4632      	mov	r2, r6
 80031de:	463b      	mov	r3, r7
 80031e0:	f7fd f9aa 	bl	8000538 <__aeabi_dmul>
 80031e4:	a36c      	add	r3, pc, #432	; (adr r3, 8003398 <atan+0x2f0>)
 80031e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ea:	f7fc fff3 	bl	80001d4 <__adddf3>
 80031ee:	4642      	mov	r2, r8
 80031f0:	464b      	mov	r3, r9
 80031f2:	f7fd f9a1 	bl	8000538 <__aeabi_dmul>
 80031f6:	a36a      	add	r3, pc, #424	; (adr r3, 80033a0 <atan+0x2f8>)
 80031f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fc:	4680      	mov	r8, r0
 80031fe:	4689      	mov	r9, r1
 8003200:	4630      	mov	r0, r6
 8003202:	4639      	mov	r1, r7
 8003204:	f7fd f998 	bl	8000538 <__aeabi_dmul>
 8003208:	a367      	add	r3, pc, #412	; (adr r3, 80033a8 <atan+0x300>)
 800320a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320e:	f7fc ffdf 	bl	80001d0 <__aeabi_dsub>
 8003212:	4632      	mov	r2, r6
 8003214:	463b      	mov	r3, r7
 8003216:	f7fd f98f 	bl	8000538 <__aeabi_dmul>
 800321a:	a365      	add	r3, pc, #404	; (adr r3, 80033b0 <atan+0x308>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fc ffd6 	bl	80001d0 <__aeabi_dsub>
 8003224:	4632      	mov	r2, r6
 8003226:	463b      	mov	r3, r7
 8003228:	f7fd f986 	bl	8000538 <__aeabi_dmul>
 800322c:	a362      	add	r3, pc, #392	; (adr r3, 80033b8 <atan+0x310>)
 800322e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003232:	f7fc ffcd 	bl	80001d0 <__aeabi_dsub>
 8003236:	4632      	mov	r2, r6
 8003238:	463b      	mov	r3, r7
 800323a:	f7fd f97d 	bl	8000538 <__aeabi_dmul>
 800323e:	a360      	add	r3, pc, #384	; (adr r3, 80033c0 <atan+0x318>)
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	f7fc ffc4 	bl	80001d0 <__aeabi_dsub>
 8003248:	4632      	mov	r2, r6
 800324a:	463b      	mov	r3, r7
 800324c:	f7fd f974 	bl	8000538 <__aeabi_dmul>
 8003250:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	d155      	bne.n	8003306 <atan+0x25e>
 800325a:	4640      	mov	r0, r8
 800325c:	4649      	mov	r1, r9
 800325e:	f7fc ffb9 	bl	80001d4 <__adddf3>
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	f7fd f967 	bl	8000538 <__aeabi_dmul>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4620      	mov	r0, r4
 8003270:	4629      	mov	r1, r5
 8003272:	f7fc ffad 	bl	80001d0 <__aeabi_dsub>
 8003276:	e72c      	b.n	80030d2 <atan+0x2a>
 8003278:	ee10 0a10 	vmov	r0, s0
 800327c:	2200      	movs	r2, #0
 800327e:	4b57      	ldr	r3, [pc, #348]	; (80033dc <atan+0x334>)
 8003280:	4629      	mov	r1, r5
 8003282:	f7fc ffa5 	bl	80001d0 <__aeabi_dsub>
 8003286:	2200      	movs	r2, #0
 8003288:	4606      	mov	r6, r0
 800328a:	460f      	mov	r7, r1
 800328c:	4b53      	ldr	r3, [pc, #332]	; (80033dc <atan+0x334>)
 800328e:	4620      	mov	r0, r4
 8003290:	4629      	mov	r1, r5
 8003292:	f7fc ff9f 	bl	80001d4 <__adddf3>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4630      	mov	r0, r6
 800329c:	4639      	mov	r1, r7
 800329e:	f7fd fa75 	bl	800078c <__aeabi_ddiv>
 80032a2:	f04f 0a01 	mov.w	sl, #1
 80032a6:	4604      	mov	r4, r0
 80032a8:	460d      	mov	r5, r1
 80032aa:	e764      	b.n	8003176 <atan+0xce>
 80032ac:	4b4d      	ldr	r3, [pc, #308]	; (80033e4 <atan+0x33c>)
 80032ae:	429e      	cmp	r6, r3
 80032b0:	dc1d      	bgt.n	80032ee <atan+0x246>
 80032b2:	ee10 0a10 	vmov	r0, s0
 80032b6:	2200      	movs	r2, #0
 80032b8:	4b4b      	ldr	r3, [pc, #300]	; (80033e8 <atan+0x340>)
 80032ba:	4629      	mov	r1, r5
 80032bc:	f7fc ff88 	bl	80001d0 <__aeabi_dsub>
 80032c0:	2200      	movs	r2, #0
 80032c2:	4606      	mov	r6, r0
 80032c4:	460f      	mov	r7, r1
 80032c6:	4b48      	ldr	r3, [pc, #288]	; (80033e8 <atan+0x340>)
 80032c8:	4620      	mov	r0, r4
 80032ca:	4629      	mov	r1, r5
 80032cc:	f7fd f934 	bl	8000538 <__aeabi_dmul>
 80032d0:	2200      	movs	r2, #0
 80032d2:	4b42      	ldr	r3, [pc, #264]	; (80033dc <atan+0x334>)
 80032d4:	f7fc ff7e 	bl	80001d4 <__adddf3>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4630      	mov	r0, r6
 80032de:	4639      	mov	r1, r7
 80032e0:	f7fd fa54 	bl	800078c <__aeabi_ddiv>
 80032e4:	f04f 0a02 	mov.w	sl, #2
 80032e8:	4604      	mov	r4, r0
 80032ea:	460d      	mov	r5, r1
 80032ec:	e743      	b.n	8003176 <atan+0xce>
 80032ee:	462b      	mov	r3, r5
 80032f0:	ee10 2a10 	vmov	r2, s0
 80032f4:	2000      	movs	r0, #0
 80032f6:	493d      	ldr	r1, [pc, #244]	; (80033ec <atan+0x344>)
 80032f8:	f7fd fa48 	bl	800078c <__aeabi_ddiv>
 80032fc:	f04f 0a03 	mov.w	sl, #3
 8003300:	4604      	mov	r4, r0
 8003302:	460d      	mov	r5, r1
 8003304:	e737      	b.n	8003176 <atan+0xce>
 8003306:	4640      	mov	r0, r8
 8003308:	4649      	mov	r1, r9
 800330a:	f7fc ff63 	bl	80001d4 <__adddf3>
 800330e:	4622      	mov	r2, r4
 8003310:	462b      	mov	r3, r5
 8003312:	f7fd f911 	bl	8000538 <__aeabi_dmul>
 8003316:	4e36      	ldr	r6, [pc, #216]	; (80033f0 <atan+0x348>)
 8003318:	4b36      	ldr	r3, [pc, #216]	; (80033f4 <atan+0x34c>)
 800331a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800331e:	4456      	add	r6, sl
 8003320:	449a      	add	sl, r3
 8003322:	e9da 2300 	ldrd	r2, r3, [sl]
 8003326:	f7fc ff53 	bl	80001d0 <__aeabi_dsub>
 800332a:	4622      	mov	r2, r4
 800332c:	462b      	mov	r3, r5
 800332e:	f7fc ff4f 	bl	80001d0 <__aeabi_dsub>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	e9d6 0100 	ldrd	r0, r1, [r6]
 800333a:	f7fc ff49 	bl	80001d0 <__aeabi_dsub>
 800333e:	f1bb 0f00 	cmp.w	fp, #0
 8003342:	4604      	mov	r4, r0
 8003344:	460d      	mov	r5, r1
 8003346:	f6bf aece 	bge.w	80030e6 <atan+0x3e>
 800334a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800334e:	4604      	mov	r4, r0
 8003350:	461d      	mov	r5, r3
 8003352:	e6c8      	b.n	80030e6 <atan+0x3e>
 8003354:	a51c      	add	r5, pc, #112	; (adr r5, 80033c8 <atan+0x320>)
 8003356:	e9d5 4500 	ldrd	r4, r5, [r5]
 800335a:	e6c4      	b.n	80030e6 <atan+0x3e>
 800335c:	f3af 8000 	nop.w
 8003360:	54442d18 	.word	0x54442d18
 8003364:	bff921fb 	.word	0xbff921fb
 8003368:	8800759c 	.word	0x8800759c
 800336c:	7e37e43c 	.word	0x7e37e43c
 8003370:	e322da11 	.word	0xe322da11
 8003374:	3f90ad3a 	.word	0x3f90ad3a
 8003378:	24760deb 	.word	0x24760deb
 800337c:	3fa97b4b 	.word	0x3fa97b4b
 8003380:	a0d03d51 	.word	0xa0d03d51
 8003384:	3fb10d66 	.word	0x3fb10d66
 8003388:	c54c206e 	.word	0xc54c206e
 800338c:	3fb745cd 	.word	0x3fb745cd
 8003390:	920083ff 	.word	0x920083ff
 8003394:	3fc24924 	.word	0x3fc24924
 8003398:	5555550d 	.word	0x5555550d
 800339c:	3fd55555 	.word	0x3fd55555
 80033a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80033a4:	bfa2b444 	.word	0xbfa2b444
 80033a8:	52defd9a 	.word	0x52defd9a
 80033ac:	3fadde2d 	.word	0x3fadde2d
 80033b0:	af749a6d 	.word	0xaf749a6d
 80033b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80033b8:	fe231671 	.word	0xfe231671
 80033bc:	3fbc71c6 	.word	0x3fbc71c6
 80033c0:	9998ebc4 	.word	0x9998ebc4
 80033c4:	3fc99999 	.word	0x3fc99999
 80033c8:	54442d18 	.word	0x54442d18
 80033cc:	3ff921fb 	.word	0x3ff921fb
 80033d0:	440fffff 	.word	0x440fffff
 80033d4:	7ff00000 	.word	0x7ff00000
 80033d8:	3fdbffff 	.word	0x3fdbffff
 80033dc:	3ff00000 	.word	0x3ff00000
 80033e0:	3ff2ffff 	.word	0x3ff2ffff
 80033e4:	40037fff 	.word	0x40037fff
 80033e8:	3ff80000 	.word	0x3ff80000
 80033ec:	bff00000 	.word	0xbff00000
 80033f0:	08003428 	.word	0x08003428
 80033f4:	08003448 	.word	0x08003448

080033f8 <fabs>:
 80033f8:	ec53 2b10 	vmov	r2, r3, d0
 80033fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003400:	ec43 2b10 	vmov	d0, r2, r3
 8003404:	4770      	bx	lr
	...

08003408 <_init>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr

08003414 <_fini>:
 8003414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003416:	bf00      	nop
 8003418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341a:	bc08      	pop	{r3}
 800341c:	469e      	mov	lr, r3
 800341e:	4770      	bx	lr
